// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#include "user.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ServerRpc {
namespace user {
template <typename>
PROTOBUF_CONSTEXPR user::user(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.password_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.nickname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct userDefaultTypeInternal {
  PROTOBUF_CONSTEXPR userDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~userDefaultTypeInternal() {}
  union {
    user _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 userDefaultTypeInternal _user_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR createUserReq::createUserReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct createUserReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR createUserReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~createUserReqDefaultTypeInternal() {}
  union {
    createUserReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 createUserReqDefaultTypeInternal _createUserReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR createUserResp::createUserResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.issuccess_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct createUserRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR createUserRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~createUserRespDefaultTypeInternal() {}
  union {
    createUserResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 createUserRespDefaultTypeInternal _createUserResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getUserReq::getUserReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getUserReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getUserReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getUserReqDefaultTypeInternal() {}
  union {
    getUserReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getUserReqDefaultTypeInternal _getUserReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getUserResp::getUserResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct getUserRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getUserRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getUserRespDefaultTypeInternal() {}
  union {
    getUserResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getUserRespDefaultTypeInternal _getUserResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR checkUserReq::checkUserReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.password_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct checkUserReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR checkUserReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~checkUserReqDefaultTypeInternal() {}
  union {
    checkUserReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 checkUserReqDefaultTypeInternal _checkUserReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR checkUserResp::checkUserResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.issuccess_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct checkUserRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR checkUserRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~checkUserRespDefaultTypeInternal() {}
  union {
    checkUserResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 checkUserRespDefaultTypeInternal _checkUserResp_default_instance_;
}  // namespace user
}  // namespace ServerRpc
static ::_pb::Metadata file_level_metadata_user_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_user_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_user_2eproto = nullptr;
const ::uint32_t TableStruct_user_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::user, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::user, _impl_.userid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::user, _impl_.password_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::user, _impl_.nickname_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::createUserReq, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::createUserReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::createUserReq, _impl_.user_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::createUserResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::createUserResp, _impl_.issuccess_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::getUserReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::getUserReq, _impl_.userid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::getUserResp, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::getUserResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::getUserResp, _impl_.user_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::checkUserReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::checkUserReq, _impl_.userid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::checkUserReq, _impl_.password_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::checkUserResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::user::checkUserResp, _impl_.issuccess_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ServerRpc::user::user)},
        { 11, 20, -1, sizeof(::ServerRpc::user::createUserReq)},
        { 21, -1, -1, sizeof(::ServerRpc::user::createUserResp)},
        { 30, -1, -1, sizeof(::ServerRpc::user::getUserReq)},
        { 39, 48, -1, sizeof(::ServerRpc::user::getUserResp)},
        { 49, -1, -1, sizeof(::ServerRpc::user::checkUserReq)},
        { 59, -1, -1, sizeof(::ServerRpc::user::checkUserResp)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ServerRpc::user::_user_default_instance_._instance,
    &::ServerRpc::user::_createUserReq_default_instance_._instance,
    &::ServerRpc::user::_createUserResp_default_instance_._instance,
    &::ServerRpc::user::_getUserReq_default_instance_._instance,
    &::ServerRpc::user::_getUserResp_default_instance_._instance,
    &::ServerRpc::user::_checkUserReq_default_instance_._instance,
    &::ServerRpc::user::_checkUserResp_default_instance_._instance,
};
const char descriptor_table_protodef_user_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nuser.proto\022\016ServerRpc.user\":\n\004user\022\016\n\006"
    "userId\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\020\n\010nickna"
    "me\030\003 \001(\t\"3\n\rcreateUserReq\022\"\n\004user\030\001 \001(\0132"
    "\024.ServerRpc.user.user\"#\n\016createUserResp\022"
    "\021\n\tisSuccess\030\001 \001(\010\"\034\n\ngetUserReq\022\016\n\006user"
    "Id\030\001 \001(\t\"1\n\013getUserResp\022\"\n\004user\030\001 \001(\0132\024."
    "ServerRpc.user.user\"0\n\014checkUserReq\022\016\n\006u"
    "serId\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"\"\n\rcheckUs"
    "erResp\022\021\n\tisSuccess\030\001 \001(\0102\341\001\n\004User\022K\n\ncr"
    "eateUser\022\035.ServerRpc.user.createUserReq\032"
    "\036.ServerRpc.user.createUserResp\022B\n\007getUs"
    "er\022\032.ServerRpc.user.getUserReq\032\033.ServerR"
    "pc.user.getUserResp\022H\n\tcheckUser\022\034.Serve"
    "rRpc.user.checkUserReq\032\035.ServerRpc.user."
    "checkUserRespb\006proto3"
};
static ::absl::once_flag descriptor_table_user_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_user_2eproto = {
    false,
    false,
    581,
    descriptor_table_protodef_user_2eproto,
    "user.proto",
    &descriptor_table_user_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_user_2eproto::offsets,
    file_level_metadata_user_2eproto,
    file_level_enum_descriptors_user_2eproto,
    file_level_service_descriptors_user_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_user_2eproto_getter() {
  return &descriptor_table_user_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_user_2eproto(&descriptor_table_user_2eproto);
namespace ServerRpc {
namespace user {
// ===================================================================

class user::_Internal {
 public:
};

user::user(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.user.user)
}
user::user(const user& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  user* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_) {}

    , decltype(_impl_.password_) {}

    , decltype(_impl_.nickname_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.user.user)
}

inline void user::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_) {}

    , decltype(_impl_.password_) {}

    , decltype(_impl_.nickname_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

user::~user() {
  // @@protoc_insertion_point(destructor:ServerRpc.user.user)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void user::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
  _impl_.password_.Destroy();
  _impl_.nickname_.Destroy();
}

void user::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void user::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.user.user)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.user.user.userId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.user.user.password"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.user.user.nickname"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* user::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.user.user)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userId = 1;
  if (!this->_internal_userid().empty()) {
    const std::string& _s = this->_internal_userid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.user.user.userId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    const std::string& _s = this->_internal_password();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.user.user.password");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    const std::string& _s = this->_internal_nickname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.user.user.nickname");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.user.user)
  return target;
}

::size_t user::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.user.user)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userId = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_userid());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_password());
  }

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_nickname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData user::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    user::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*user::GetClassData() const { return &_class_data_; }


void user::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<user*>(&to_msg);
  auto& from = static_cast<const user&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.user.user)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void user::CopyFrom(const user& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.user.user)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user::IsInitialized() const {
  return true;
}

void user::InternalSwap(user* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userid_, lhs_arena,
                                       &other->_impl_.userid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, lhs_arena,
                                       &other->_impl_.password_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nickname_, lhs_arena,
                                       &other->_impl_.nickname_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata user::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[0]);
}
// ===================================================================

class createUserReq::_Internal {
 public:
  using HasBits = decltype(std::declval<createUserReq>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(createUserReq, _impl_._has_bits_);
  static const ::ServerRpc::user::user& user(const createUserReq* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ServerRpc::user::user&
createUserReq::_Internal::user(const createUserReq* msg) {
  return *msg->_impl_.user_;
}
createUserReq::createUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.user.createUserReq)
}
createUserReq::createUserReq(const createUserReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  createUserReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::ServerRpc::user::user(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.user.createUserReq)
}

inline void createUserReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

createUserReq::~createUserReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.user.createUserReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void createUserReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void createUserReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void createUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.user.createUserReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* createUserReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ServerRpc.user.user user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* createUserReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.user.createUserReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ServerRpc.user.user user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.user.createUserReq)
  return target;
}

::size_t createUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.user.createUserReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ServerRpc.user.user user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData createUserReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    createUserReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*createUserReq::GetClassData() const { return &_class_data_; }


void createUserReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<createUserReq*>(&to_msg);
  auto& from = static_cast<const createUserReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.user.createUserReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::ServerRpc::user::user::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void createUserReq::CopyFrom(const createUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.user.createUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool createUserReq::IsInitialized() const {
  return true;
}

void createUserReq::InternalSwap(createUserReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata createUserReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[1]);
}
// ===================================================================

class createUserResp::_Internal {
 public:
};

createUserResp::createUserResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.user.createUserResp)
}
createUserResp::createUserResp(const createUserResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.user.createUserResp)
}

inline void createUserResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.issuccess_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

createUserResp::~createUserResp() {
  // @@protoc_insertion_point(destructor:ServerRpc.user.createUserResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void createUserResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void createUserResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void createUserResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.user.createUserResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.issuccess_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* createUserResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* createUserResp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.user.createUserResp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->_internal_issuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_issuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.user.createUserResp)
  return target;
}

::size_t createUserResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.user.createUserResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->_internal_issuccess() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData createUserResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    createUserResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*createUserResp::GetClassData() const { return &_class_data_; }


void createUserResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<createUserResp*>(&to_msg);
  auto& from = static_cast<const createUserResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.user.createUserResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_issuccess() != 0) {
    _this->_internal_set_issuccess(from._internal_issuccess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void createUserResp::CopyFrom(const createUserResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.user.createUserResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool createUserResp::IsInitialized() const {
  return true;
}

void createUserResp::InternalSwap(createUserResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.issuccess_, other->_impl_.issuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata createUserResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[2]);
}
// ===================================================================

class getUserReq::_Internal {
 public:
};

getUserReq::getUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.user.getUserReq)
}
getUserReq::getUserReq(const getUserReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getUserReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.user.getUserReq)
}

inline void getUserReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getUserReq::~getUserReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.user.getUserReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getUserReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
}

void getUserReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.user.getUserReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getUserReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.user.getUserReq.userId"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getUserReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.user.getUserReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userId = 1;
  if (!this->_internal_userid().empty()) {
    const std::string& _s = this->_internal_userid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.user.getUserReq.userId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.user.getUserReq)
  return target;
}

::size_t getUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.user.getUserReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userId = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getUserReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getUserReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getUserReq::GetClassData() const { return &_class_data_; }


void getUserReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getUserReq*>(&to_msg);
  auto& from = static_cast<const getUserReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.user.getUserReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getUserReq::CopyFrom(const getUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.user.getUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getUserReq::IsInitialized() const {
  return true;
}

void getUserReq::InternalSwap(getUserReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userid_, lhs_arena,
                                       &other->_impl_.userid_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata getUserReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[3]);
}
// ===================================================================

class getUserResp::_Internal {
 public:
  using HasBits = decltype(std::declval<getUserResp>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(getUserResp, _impl_._has_bits_);
  static const ::ServerRpc::user::user& user(const getUserResp* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ServerRpc::user::user&
getUserResp::_Internal::user(const getUserResp* msg) {
  return *msg->_impl_.user_;
}
getUserResp::getUserResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.user.getUserResp)
}
getUserResp::getUserResp(const getUserResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getUserResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::ServerRpc::user::user(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.user.getUserResp)
}

inline void getUserResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

getUserResp::~getUserResp() {
  // @@protoc_insertion_point(destructor:ServerRpc.user.getUserResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getUserResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void getUserResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getUserResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.user.getUserResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getUserResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ServerRpc.user.user user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getUserResp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.user.getUserResp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ServerRpc.user.user user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.user.getUserResp)
  return target;
}

::size_t getUserResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.user.getUserResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ServerRpc.user.user user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getUserResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getUserResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getUserResp::GetClassData() const { return &_class_data_; }


void getUserResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getUserResp*>(&to_msg);
  auto& from = static_cast<const getUserResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.user.getUserResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::ServerRpc::user::user::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getUserResp::CopyFrom(const getUserResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.user.getUserResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getUserResp::IsInitialized() const {
  return true;
}

void getUserResp::InternalSwap(getUserResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getUserResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[4]);
}
// ===================================================================

class checkUserReq::_Internal {
 public:
};

checkUserReq::checkUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.user.checkUserReq)
}
checkUserReq::checkUserReq(const checkUserReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  checkUserReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_) {}

    , decltype(_impl_.password_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.user.checkUserReq)
}

inline void checkUserReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_) {}

    , decltype(_impl_.password_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

checkUserReq::~checkUserReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.user.checkUserReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void checkUserReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
  _impl_.password_.Destroy();
}

void checkUserReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void checkUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.user.checkUserReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* checkUserReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.user.checkUserReq.userId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.user.checkUserReq.password"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* checkUserReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.user.checkUserReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userId = 1;
  if (!this->_internal_userid().empty()) {
    const std::string& _s = this->_internal_userid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.user.checkUserReq.userId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    const std::string& _s = this->_internal_password();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.user.checkUserReq.password");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.user.checkUserReq)
  return target;
}

::size_t checkUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.user.checkUserReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userId = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_userid());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData checkUserReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    checkUserReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*checkUserReq::GetClassData() const { return &_class_data_; }


void checkUserReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<checkUserReq*>(&to_msg);
  auto& from = static_cast<const checkUserReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.user.checkUserReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void checkUserReq::CopyFrom(const checkUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.user.checkUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool checkUserReq::IsInitialized() const {
  return true;
}

void checkUserReq::InternalSwap(checkUserReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userid_, lhs_arena,
                                       &other->_impl_.userid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, lhs_arena,
                                       &other->_impl_.password_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata checkUserReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[5]);
}
// ===================================================================

class checkUserResp::_Internal {
 public:
};

checkUserResp::checkUserResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.user.checkUserResp)
}
checkUserResp::checkUserResp(const checkUserResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.user.checkUserResp)
}

inline void checkUserResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.issuccess_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

checkUserResp::~checkUserResp() {
  // @@protoc_insertion_point(destructor:ServerRpc.user.checkUserResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void checkUserResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void checkUserResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void checkUserResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.user.checkUserResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.issuccess_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* checkUserResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* checkUserResp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.user.checkUserResp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->_internal_issuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_issuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.user.checkUserResp)
  return target;
}

::size_t checkUserResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.user.checkUserResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->_internal_issuccess() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData checkUserResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    checkUserResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*checkUserResp::GetClassData() const { return &_class_data_; }


void checkUserResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<checkUserResp*>(&to_msg);
  auto& from = static_cast<const checkUserResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.user.checkUserResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_issuccess() != 0) {
    _this->_internal_set_issuccess(from._internal_issuccess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void checkUserResp::CopyFrom(const checkUserResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.user.checkUserResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool checkUserResp::IsInitialized() const {
  return true;
}

void checkUserResp::InternalSwap(checkUserResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.issuccess_, other->_impl_.issuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata checkUserResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace user
}  // namespace ServerRpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServerRpc::user::user*
Arena::CreateMaybeMessage< ::ServerRpc::user::user >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::user::user >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::user::createUserReq*
Arena::CreateMaybeMessage< ::ServerRpc::user::createUserReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::user::createUserReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::user::createUserResp*
Arena::CreateMaybeMessage< ::ServerRpc::user::createUserResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::user::createUserResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::user::getUserReq*
Arena::CreateMaybeMessage< ::ServerRpc::user::getUserReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::user::getUserReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::user::getUserResp*
Arena::CreateMaybeMessage< ::ServerRpc::user::getUserResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::user::getUserResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::user::checkUserReq*
Arena::CreateMaybeMessage< ::ServerRpc::user::checkUserReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::user::checkUserReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::user::checkUserResp*
Arena::CreateMaybeMessage< ::ServerRpc::user::checkUserResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::user::checkUserResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
