// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user.proto
#ifndef GRPC_user_2eproto__INCLUDED
#define GRPC_user_2eproto__INCLUDED

#include "user.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ServerRpc {
namespace user {

class User final {
 public:
  static constexpr char const* service_full_name() {
    return "ServerRpc.user.User";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status createUser(::grpc::ClientContext* context, const ::ServerRpc::user::createUserReq& request, ::ServerRpc::user::createUserResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::createUserResp>> AsynccreateUser(::grpc::ClientContext* context, const ::ServerRpc::user::createUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::createUserResp>>(AsynccreateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::createUserResp>> PrepareAsynccreateUser(::grpc::ClientContext* context, const ::ServerRpc::user::createUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::createUserResp>>(PrepareAsynccreateUserRaw(context, request, cq));
    }
    virtual ::grpc::Status getUser(::grpc::ClientContext* context, const ::ServerRpc::user::getUserReq& request, ::ServerRpc::user::getUserResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::getUserResp>> AsyncgetUser(::grpc::ClientContext* context, const ::ServerRpc::user::getUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::getUserResp>>(AsyncgetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::getUserResp>> PrepareAsyncgetUser(::grpc::ClientContext* context, const ::ServerRpc::user::getUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::getUserResp>>(PrepareAsyncgetUserRaw(context, request, cq));
    }
    virtual ::grpc::Status checkUser(::grpc::ClientContext* context, const ::ServerRpc::user::checkUserReq& request, ::ServerRpc::user::checkUserResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::checkUserResp>> AsynccheckUser(::grpc::ClientContext* context, const ::ServerRpc::user::checkUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::checkUserResp>>(AsynccheckUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::checkUserResp>> PrepareAsynccheckUser(::grpc::ClientContext* context, const ::ServerRpc::user::checkUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::checkUserResp>>(PrepareAsynccheckUserRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void createUser(::grpc::ClientContext* context, const ::ServerRpc::user::createUserReq* request, ::ServerRpc::user::createUserResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createUser(::grpc::ClientContext* context, const ::ServerRpc::user::createUserReq* request, ::ServerRpc::user::createUserResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getUser(::grpc::ClientContext* context, const ::ServerRpc::user::getUserReq* request, ::ServerRpc::user::getUserResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getUser(::grpc::ClientContext* context, const ::ServerRpc::user::getUserReq* request, ::ServerRpc::user::getUserResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void checkUser(::grpc::ClientContext* context, const ::ServerRpc::user::checkUserReq* request, ::ServerRpc::user::checkUserResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void checkUser(::grpc::ClientContext* context, const ::ServerRpc::user::checkUserReq* request, ::ServerRpc::user::checkUserResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::createUserResp>* AsynccreateUserRaw(::grpc::ClientContext* context, const ::ServerRpc::user::createUserReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::createUserResp>* PrepareAsynccreateUserRaw(::grpc::ClientContext* context, const ::ServerRpc::user::createUserReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::getUserResp>* AsyncgetUserRaw(::grpc::ClientContext* context, const ::ServerRpc::user::getUserReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::getUserResp>* PrepareAsyncgetUserRaw(::grpc::ClientContext* context, const ::ServerRpc::user::getUserReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::checkUserResp>* AsynccheckUserRaw(::grpc::ClientContext* context, const ::ServerRpc::user::checkUserReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::user::checkUserResp>* PrepareAsynccheckUserRaw(::grpc::ClientContext* context, const ::ServerRpc::user::checkUserReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status createUser(::grpc::ClientContext* context, const ::ServerRpc::user::createUserReq& request, ::ServerRpc::user::createUserResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::createUserResp>> AsynccreateUser(::grpc::ClientContext* context, const ::ServerRpc::user::createUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::createUserResp>>(AsynccreateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::createUserResp>> PrepareAsynccreateUser(::grpc::ClientContext* context, const ::ServerRpc::user::createUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::createUserResp>>(PrepareAsynccreateUserRaw(context, request, cq));
    }
    ::grpc::Status getUser(::grpc::ClientContext* context, const ::ServerRpc::user::getUserReq& request, ::ServerRpc::user::getUserResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::getUserResp>> AsyncgetUser(::grpc::ClientContext* context, const ::ServerRpc::user::getUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::getUserResp>>(AsyncgetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::getUserResp>> PrepareAsyncgetUser(::grpc::ClientContext* context, const ::ServerRpc::user::getUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::getUserResp>>(PrepareAsyncgetUserRaw(context, request, cq));
    }
    ::grpc::Status checkUser(::grpc::ClientContext* context, const ::ServerRpc::user::checkUserReq& request, ::ServerRpc::user::checkUserResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::checkUserResp>> AsynccheckUser(::grpc::ClientContext* context, const ::ServerRpc::user::checkUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::checkUserResp>>(AsynccheckUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::checkUserResp>> PrepareAsynccheckUser(::grpc::ClientContext* context, const ::ServerRpc::user::checkUserReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::checkUserResp>>(PrepareAsynccheckUserRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void createUser(::grpc::ClientContext* context, const ::ServerRpc::user::createUserReq* request, ::ServerRpc::user::createUserResp* response, std::function<void(::grpc::Status)>) override;
      void createUser(::grpc::ClientContext* context, const ::ServerRpc::user::createUserReq* request, ::ServerRpc::user::createUserResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getUser(::grpc::ClientContext* context, const ::ServerRpc::user::getUserReq* request, ::ServerRpc::user::getUserResp* response, std::function<void(::grpc::Status)>) override;
      void getUser(::grpc::ClientContext* context, const ::ServerRpc::user::getUserReq* request, ::ServerRpc::user::getUserResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void checkUser(::grpc::ClientContext* context, const ::ServerRpc::user::checkUserReq* request, ::ServerRpc::user::checkUserResp* response, std::function<void(::grpc::Status)>) override;
      void checkUser(::grpc::ClientContext* context, const ::ServerRpc::user::checkUserReq* request, ::ServerRpc::user::checkUserResp* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::createUserResp>* AsynccreateUserRaw(::grpc::ClientContext* context, const ::ServerRpc::user::createUserReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::createUserResp>* PrepareAsynccreateUserRaw(::grpc::ClientContext* context, const ::ServerRpc::user::createUserReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::getUserResp>* AsyncgetUserRaw(::grpc::ClientContext* context, const ::ServerRpc::user::getUserReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::getUserResp>* PrepareAsyncgetUserRaw(::grpc::ClientContext* context, const ::ServerRpc::user::getUserReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::checkUserResp>* AsynccheckUserRaw(::grpc::ClientContext* context, const ::ServerRpc::user::checkUserReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::user::checkUserResp>* PrepareAsynccheckUserRaw(::grpc::ClientContext* context, const ::ServerRpc::user::checkUserReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_createUser_;
    const ::grpc::internal::RpcMethod rpcmethod_getUser_;
    const ::grpc::internal::RpcMethod rpcmethod_checkUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status createUser(::grpc::ServerContext* context, const ::ServerRpc::user::createUserReq* request, ::ServerRpc::user::createUserResp* response);
    virtual ::grpc::Status getUser(::grpc::ServerContext* context, const ::ServerRpc::user::getUserReq* request, ::ServerRpc::user::getUserResp* response);
    virtual ::grpc::Status checkUser(::grpc::ServerContext* context, const ::ServerRpc::user::checkUserReq* request, ::ServerRpc::user::checkUserResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_createUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_createUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::createUserReq* /*request*/, ::ServerRpc::user::createUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateUser(::grpc::ServerContext* context, ::ServerRpc::user::createUserReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::user::createUserResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::getUserReq* /*request*/, ::ServerRpc::user::getUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetUser(::grpc::ServerContext* context, ::ServerRpc::user::getUserReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::user::getUserResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_checkUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_checkUser() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_checkUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::checkUserReq* /*request*/, ::ServerRpc::user::checkUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcheckUser(::grpc::ServerContext* context, ::ServerRpc::user::checkUserReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::user::checkUserResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_createUser<WithAsyncMethod_getUser<WithAsyncMethod_checkUser<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_createUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createUser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::user::createUserReq, ::ServerRpc::user::createUserResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::user::createUserReq* request, ::ServerRpc::user::createUserResp* response) { return this->createUser(context, request, response); }));}
    void SetMessageAllocatorFor_createUser(
        ::grpc::MessageAllocator< ::ServerRpc::user::createUserReq, ::ServerRpc::user::createUserResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::user::createUserReq, ::ServerRpc::user::createUserResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::createUserReq* /*request*/, ::ServerRpc::user::createUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createUser(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::user::createUserReq* /*request*/, ::ServerRpc::user::createUserResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getUser() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::user::getUserReq, ::ServerRpc::user::getUserResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::user::getUserReq* request, ::ServerRpc::user::getUserResp* response) { return this->getUser(context, request, response); }));}
    void SetMessageAllocatorFor_getUser(
        ::grpc::MessageAllocator< ::ServerRpc::user::getUserReq, ::ServerRpc::user::getUserResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::user::getUserReq, ::ServerRpc::user::getUserResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::getUserReq* /*request*/, ::ServerRpc::user::getUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getUser(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::user::getUserReq* /*request*/, ::ServerRpc::user::getUserResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_checkUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_checkUser() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::user::checkUserReq, ::ServerRpc::user::checkUserResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::user::checkUserReq* request, ::ServerRpc::user::checkUserResp* response) { return this->checkUser(context, request, response); }));}
    void SetMessageAllocatorFor_checkUser(
        ::grpc::MessageAllocator< ::ServerRpc::user::checkUserReq, ::ServerRpc::user::checkUserResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::user::checkUserReq, ::ServerRpc::user::checkUserResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_checkUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::checkUserReq* /*request*/, ::ServerRpc::user::checkUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* checkUser(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::user::checkUserReq* /*request*/, ::ServerRpc::user::checkUserResp* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_createUser<WithCallbackMethod_getUser<WithCallbackMethod_checkUser<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_createUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_createUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::createUserReq* /*request*/, ::ServerRpc::user::createUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::getUserReq* /*request*/, ::ServerRpc::user::getUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_checkUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_checkUser() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_checkUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::checkUserReq* /*request*/, ::ServerRpc::user::checkUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_createUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_createUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::createUserReq* /*request*/, ::ServerRpc::user::createUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::getUserReq* /*request*/, ::ServerRpc::user::getUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_checkUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_checkUser() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_checkUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::checkUserReq* /*request*/, ::ServerRpc::user::checkUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcheckUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createUser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_createUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::createUserReq* /*request*/, ::ServerRpc::user::createUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getUser() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_getUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::getUserReq* /*request*/, ::ServerRpc::user::getUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_checkUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_checkUser() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->checkUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_checkUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::checkUserReq* /*request*/, ::ServerRpc::user::checkUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* checkUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::user::createUserReq, ::ServerRpc::user::createUserResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::user::createUserReq, ::ServerRpc::user::createUserResp>* streamer) {
                       return this->StreamedcreateUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::createUserReq* /*request*/, ::ServerRpc::user::createUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::user::createUserReq,::ServerRpc::user::createUserResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::user::getUserReq, ::ServerRpc::user::getUserResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::user::getUserReq, ::ServerRpc::user::getUserResp>* streamer) {
                       return this->StreamedgetUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::getUserReq* /*request*/, ::ServerRpc::user::getUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::user::getUserReq,::ServerRpc::user::getUserResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_checkUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_checkUser() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::user::checkUserReq, ::ServerRpc::user::checkUserResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::user::checkUserReq, ::ServerRpc::user::checkUserResp>* streamer) {
                       return this->StreamedcheckUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_checkUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status checkUser(::grpc::ServerContext* /*context*/, const ::ServerRpc::user::checkUserReq* /*request*/, ::ServerRpc::user::checkUserResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcheckUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::user::checkUserReq,::ServerRpc::user::checkUserResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_createUser<WithStreamedUnaryMethod_getUser<WithStreamedUnaryMethod_checkUser<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_createUser<WithStreamedUnaryMethod_getUser<WithStreamedUnaryMethod_checkUser<Service > > > StreamedService;
};

}  // namespace user
}  // namespace ServerRpc


#endif  // GRPC_user_2eproto__INCLUDED
