// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#include "group.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ServerRpc {
namespace group {
template <typename>
PROTOBUF_CONSTEXPR groupInfo::groupInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupmembers_)*/{}
  , /*decltype(_impl_.groupname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.groupdesc_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.groupowner_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.groupid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.createtime_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct groupInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR groupInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~groupInfoDefaultTypeInternal() {}
  union {
    groupInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 groupInfoDefaultTypeInternal _groupInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR createGroupReq::createGroupReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupmembers_)*/{}
  , /*decltype(_impl_.groupname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.groupdesc_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.groupowner_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct createGroupReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR createGroupReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~createGroupReqDefaultTypeInternal() {}
  union {
    createGroupReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 createGroupReqDefaultTypeInternal _createGroupReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR createGroupResp::createGroupResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.groupinfo_)*/nullptr} {}
struct createGroupRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR createGroupRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~createGroupRespDefaultTypeInternal() {}
  union {
    createGroupResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 createGroupRespDefaultTypeInternal _createGroupResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR joinGroupReq::joinGroupReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.userid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct joinGroupReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR joinGroupReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~joinGroupReqDefaultTypeInternal() {}
  union {
    joinGroupReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 joinGroupReqDefaultTypeInternal _joinGroupReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR joinGroupResp::joinGroupResp(
    ::_pbi::ConstantInitialized) {}
struct joinGroupRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR joinGroupRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~joinGroupRespDefaultTypeInternal() {}
  union {
    joinGroupResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 joinGroupRespDefaultTypeInternal _joinGroupResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getGroupInfoReq::getGroupInfoReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getGroupInfoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getGroupInfoReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getGroupInfoReqDefaultTypeInternal() {}
  union {
    getGroupInfoReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getGroupInfoReqDefaultTypeInternal _getGroupInfoReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getGroupInfoResp::getGroupInfoResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.groupinfo_)*/nullptr} {}
struct getGroupInfoRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getGroupInfoRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getGroupInfoRespDefaultTypeInternal() {}
  union {
    getGroupInfoResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getGroupInfoRespDefaultTypeInternal _getGroupInfoResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getGroupListReq::getGroupListReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getGroupListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getGroupListReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getGroupListReqDefaultTypeInternal() {}
  union {
    getGroupListReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getGroupListReqDefaultTypeInternal _getGroupListReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getGroupListResp::getGroupListResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupinfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getGroupListRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getGroupListRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getGroupListRespDefaultTypeInternal() {}
  union {
    getGroupListResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getGroupListRespDefaultTypeInternal _getGroupListResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getGroupMemberReq::getGroupMemberReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getGroupMemberReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getGroupMemberReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getGroupMemberReqDefaultTypeInternal() {}
  union {
    getGroupMemberReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getGroupMemberReqDefaultTypeInternal _getGroupMemberReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getGroupMemberResp::getGroupMemberResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupmembers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getGroupMemberRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getGroupMemberRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getGroupMemberRespDefaultTypeInternal() {}
  union {
    getGroupMemberResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getGroupMemberRespDefaultTypeInternal _getGroupMemberResp_default_instance_;
}  // namespace group
}  // namespace ServerRpc
static ::_pb::Metadata file_level_metadata_group_2eproto[11];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_group_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_group_2eproto = nullptr;
const ::uint32_t TableStruct_group_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::groupInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::groupInfo, _impl_.groupname_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::groupInfo, _impl_.groupdesc_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::groupInfo, _impl_.groupowner_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::groupInfo, _impl_.groupmembers_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::groupInfo, _impl_.groupid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::groupInfo, _impl_.createtime_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::createGroupReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::createGroupReq, _impl_.groupname_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::createGroupReq, _impl_.groupdesc_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::createGroupReq, _impl_.groupowner_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::createGroupReq, _impl_.groupmembers_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::createGroupResp, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::createGroupResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::createGroupResp, _impl_.groupinfo_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::joinGroupReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::joinGroupReq, _impl_.groupid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::joinGroupReq, _impl_.userid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::joinGroupResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::getGroupInfoReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::getGroupInfoReq, _impl_.groupid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::getGroupInfoResp, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::getGroupInfoResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::getGroupInfoResp, _impl_.groupinfo_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::getGroupListReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::getGroupListReq, _impl_.userid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::getGroupListResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::getGroupListResp, _impl_.groupinfo_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::getGroupMemberReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::getGroupMemberReq, _impl_.groupid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::getGroupMemberResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::group::getGroupMemberResp, _impl_.groupmembers_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ServerRpc::group::groupInfo)},
        { 14, -1, -1, sizeof(::ServerRpc::group::createGroupReq)},
        { 26, 35, -1, sizeof(::ServerRpc::group::createGroupResp)},
        { 36, -1, -1, sizeof(::ServerRpc::group::joinGroupReq)},
        { 46, -1, -1, sizeof(::ServerRpc::group::joinGroupResp)},
        { 54, -1, -1, sizeof(::ServerRpc::group::getGroupInfoReq)},
        { 63, 72, -1, sizeof(::ServerRpc::group::getGroupInfoResp)},
        { 73, -1, -1, sizeof(::ServerRpc::group::getGroupListReq)},
        { 82, -1, -1, sizeof(::ServerRpc::group::getGroupListResp)},
        { 91, -1, -1, sizeof(::ServerRpc::group::getGroupMemberReq)},
        { 100, -1, -1, sizeof(::ServerRpc::group::getGroupMemberResp)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ServerRpc::group::_groupInfo_default_instance_._instance,
    &::ServerRpc::group::_createGroupReq_default_instance_._instance,
    &::ServerRpc::group::_createGroupResp_default_instance_._instance,
    &::ServerRpc::group::_joinGroupReq_default_instance_._instance,
    &::ServerRpc::group::_joinGroupResp_default_instance_._instance,
    &::ServerRpc::group::_getGroupInfoReq_default_instance_._instance,
    &::ServerRpc::group::_getGroupInfoResp_default_instance_._instance,
    &::ServerRpc::group::_getGroupListReq_default_instance_._instance,
    &::ServerRpc::group::_getGroupListResp_default_instance_._instance,
    &::ServerRpc::group::_getGroupMemberReq_default_instance_._instance,
    &::ServerRpc::group::_getGroupMemberResp_default_instance_._instance,
};
const char descriptor_table_protodef_group_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013group.proto\022\017ServerRpc.group\"\200\001\n\tgroup"
    "Info\022\021\n\tgroupName\030\001 \001(\t\022\021\n\tgroupDesc\030\002 \001"
    "(\t\022\022\n\ngroupOwner\030\003 \001(\t\022\024\n\014groupMembers\030\004"
    " \003(\t\022\017\n\007groupID\030\005 \001(\t\022\022\n\ncreateTime\030\006 \001("
    "\003\"`\n\016createGroupReq\022\021\n\tgroupName\030\001 \001(\t\022\021"
    "\n\tgroupDesc\030\002 \001(\t\022\022\n\ngroupOwner\030\003 \001(\t\022\024\n"
    "\014groupMembers\030\004 \003(\t\"@\n\017createGroupResp\022-"
    "\n\tgroupInfo\030\002 \001(\0132\032.ServerRpc.group.grou"
    "pInfo\"/\n\014joinGroupReq\022\017\n\007groupID\030\001 \001(\t\022\016"
    "\n\006userID\030\002 \001(\t\"\017\n\rjoinGroupResp\"\"\n\017getGr"
    "oupInfoReq\022\017\n\007groupID\030\001 \001(\t\"A\n\020getGroupI"
    "nfoResp\022-\n\tgroupInfo\030\002 \001(\0132\032.ServerRpc.g"
    "roup.groupInfo\"!\n\017getGroupListReq\022\016\n\006use"
    "rID\030\001 \001(\t\"A\n\020getGroupListResp\022-\n\tgroupIn"
    "fo\030\002 \003(\0132\032.ServerRpc.group.groupInfo\"$\n\021"
    "getGroupMemberReq\022\017\n\007groupID\030\001 \001(\t\"*\n\022ge"
    "tGroupMemberResp\022\024\n\014groupMembers\030\002 \003(\t2\252"
    "\003\n\005Group\022P\n\013createGroup\022\037.ServerRpc.grou"
    "p.createGroupReq\032 .ServerRpc.group.creat"
    "eGroupResp\022J\n\tjoinGroup\022\035.ServerRpc.grou"
    "p.joinGroupReq\032\036.ServerRpc.group.joinGro"
    "upResp\022S\n\014getGroupInfo\022 .ServerRpc.group"
    ".getGroupInfoReq\032!.ServerRpc.group.getGr"
    "oupInfoResp\022S\n\014getGroupList\022 .ServerRpc."
    "group.getGroupListReq\032!.ServerRpc.group."
    "getGroupListResp\022Y\n\016getGroupMember\022\".Ser"
    "verRpc.group.getGroupMemberReq\032#.ServerR"
    "pc.group.getGroupMemberRespb\006proto3"
};
static ::absl::once_flag descriptor_table_group_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_group_2eproto = {
    false,
    false,
    1115,
    descriptor_table_protodef_group_2eproto,
    "group.proto",
    &descriptor_table_group_2eproto_once,
    nullptr,
    0,
    11,
    schemas,
    file_default_instances,
    TableStruct_group_2eproto::offsets,
    file_level_metadata_group_2eproto,
    file_level_enum_descriptors_group_2eproto,
    file_level_service_descriptors_group_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_group_2eproto_getter() {
  return &descriptor_table_group_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_group_2eproto(&descriptor_table_group_2eproto);
namespace ServerRpc {
namespace group {
// ===================================================================

class groupInfo::_Internal {
 public:
};

groupInfo::groupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.group.groupInfo)
}
groupInfo::groupInfo(const groupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  groupInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupmembers_){from._impl_.groupmembers_}
    , decltype(_impl_.groupname_) {}

    , decltype(_impl_.groupdesc_) {}

    , decltype(_impl_.groupowner_) {}

    , decltype(_impl_.groupid_) {}

    , decltype(_impl_.createtime_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupname().empty()) {
    _this->_impl_.groupname_.Set(from._internal_groupname(), _this->GetArenaForAllocation());
  }
  _impl_.groupdesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupdesc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupdesc().empty()) {
    _this->_impl_.groupdesc_.Set(from._internal_groupdesc(), _this->GetArenaForAllocation());
  }
  _impl_.groupowner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupowner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupowner().empty()) {
    _this->_impl_.groupowner_.Set(from._internal_groupowner(), _this->GetArenaForAllocation());
  }
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupid().empty()) {
    _this->_impl_.groupid_.Set(from._internal_groupid(), _this->GetArenaForAllocation());
  }
  _this->_impl_.createtime_ = from._impl_.createtime_;
  // @@protoc_insertion_point(copy_constructor:ServerRpc.group.groupInfo)
}

inline void groupInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.groupmembers_){arena}
    , decltype(_impl_.groupname_) {}

    , decltype(_impl_.groupdesc_) {}

    , decltype(_impl_.groupowner_) {}

    , decltype(_impl_.groupid_) {}

    , decltype(_impl_.createtime_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupdesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupdesc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupowner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupowner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

groupInfo::~groupInfo() {
  // @@protoc_insertion_point(destructor:ServerRpc.group.groupInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void groupInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_groupmembers()->~RepeatedPtrField();
  _impl_.groupname_.Destroy();
  _impl_.groupdesc_.Destroy();
  _impl_.groupowner_.Destroy();
  _impl_.groupid_.Destroy();
}

void groupInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void groupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.group.groupInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_groupmembers()->Clear();
  _impl_.groupname_.ClearToEmpty();
  _impl_.groupdesc_.ClearToEmpty();
  _impl_.groupowner_.ClearToEmpty();
  _impl_.groupid_.ClearToEmpty();
  _impl_.createtime_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* groupInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string groupName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_groupname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.group.groupInfo.groupName"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string groupDesc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_groupdesc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.group.groupInfo.groupDesc"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string groupOwner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_groupowner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.group.groupInfo.groupOwner"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string groupMembers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_groupmembers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.group.groupInfo.groupMembers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string groupID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_groupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.group.groupInfo.groupID"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 createTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* groupInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.group.groupInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string groupName = 1;
  if (!this->_internal_groupname().empty()) {
    const std::string& _s = this->_internal_groupname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.group.groupInfo.groupName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string groupDesc = 2;
  if (!this->_internal_groupdesc().empty()) {
    const std::string& _s = this->_internal_groupdesc();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.group.groupInfo.groupDesc");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string groupOwner = 3;
  if (!this->_internal_groupowner().empty()) {
    const std::string& _s = this->_internal_groupowner();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.group.groupInfo.groupOwner");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated string groupMembers = 4;
  for (int i = 0, n = this->_internal_groupmembers_size(); i < n; ++i) {
    const auto& s = this->_internal_groupmembers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.group.groupInfo.groupMembers");
    target = stream->WriteString(4, s, target);
  }

  // string groupID = 5;
  if (!this->_internal_groupid().empty()) {
    const std::string& _s = this->_internal_groupid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.group.groupInfo.groupID");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // int64 createTime = 6;
  if (this->_internal_createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_createtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.group.groupInfo)
  return target;
}

::size_t groupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.group.groupInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string groupMembers = 4;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_groupmembers().size());
  for (int i = 0, n = _internal_groupmembers().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_groupmembers().Get(i));
  }

  // string groupName = 1;
  if (!this->_internal_groupname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_groupname());
  }

  // string groupDesc = 2;
  if (!this->_internal_groupdesc().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_groupdesc());
  }

  // string groupOwner = 3;
  if (!this->_internal_groupowner().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_groupowner());
  }

  // string groupID = 5;
  if (!this->_internal_groupid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_groupid());
  }

  // int64 createTime = 6;
  if (this->_internal_createtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_createtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData groupInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    groupInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*groupInfo::GetClassData() const { return &_class_data_; }


void groupInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<groupInfo*>(&to_msg);
  auto& from = static_cast<const groupInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.group.groupInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_groupmembers()->MergeFrom(from._internal_groupmembers());
  if (!from._internal_groupname().empty()) {
    _this->_internal_set_groupname(from._internal_groupname());
  }
  if (!from._internal_groupdesc().empty()) {
    _this->_internal_set_groupdesc(from._internal_groupdesc());
  }
  if (!from._internal_groupowner().empty()) {
    _this->_internal_set_groupowner(from._internal_groupowner());
  }
  if (!from._internal_groupid().empty()) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  if (from._internal_createtime() != 0) {
    _this->_internal_set_createtime(from._internal_createtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void groupInfo::CopyFrom(const groupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.group.groupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool groupInfo::IsInitialized() const {
  return true;
}

void groupInfo::InternalSwap(groupInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_groupmembers()->InternalSwap(
      other->_internal_mutable_groupmembers());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.groupname_, lhs_arena,
                                       &other->_impl_.groupname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.groupdesc_, lhs_arena,
                                       &other->_impl_.groupdesc_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.groupowner_, lhs_arena,
                                       &other->_impl_.groupowner_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.groupid_, lhs_arena,
                                       &other->_impl_.groupid_, rhs_arena);

  swap(_impl_.createtime_, other->_impl_.createtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata groupInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[0]);
}
// ===================================================================

class createGroupReq::_Internal {
 public:
};

createGroupReq::createGroupReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.group.createGroupReq)
}
createGroupReq::createGroupReq(const createGroupReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  createGroupReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupmembers_){from._impl_.groupmembers_}
    , decltype(_impl_.groupname_) {}

    , decltype(_impl_.groupdesc_) {}

    , decltype(_impl_.groupowner_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupname().empty()) {
    _this->_impl_.groupname_.Set(from._internal_groupname(), _this->GetArenaForAllocation());
  }
  _impl_.groupdesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupdesc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupdesc().empty()) {
    _this->_impl_.groupdesc_.Set(from._internal_groupdesc(), _this->GetArenaForAllocation());
  }
  _impl_.groupowner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupowner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupowner().empty()) {
    _this->_impl_.groupowner_.Set(from._internal_groupowner(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.group.createGroupReq)
}

inline void createGroupReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.groupmembers_){arena}
    , decltype(_impl_.groupname_) {}

    , decltype(_impl_.groupdesc_) {}

    , decltype(_impl_.groupowner_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupdesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupdesc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupowner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupowner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

createGroupReq::~createGroupReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.group.createGroupReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void createGroupReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_groupmembers()->~RepeatedPtrField();
  _impl_.groupname_.Destroy();
  _impl_.groupdesc_.Destroy();
  _impl_.groupowner_.Destroy();
}

void createGroupReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void createGroupReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.group.createGroupReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_groupmembers()->Clear();
  _impl_.groupname_.ClearToEmpty();
  _impl_.groupdesc_.ClearToEmpty();
  _impl_.groupowner_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* createGroupReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string groupName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_groupname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.group.createGroupReq.groupName"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string groupDesc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_groupdesc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.group.createGroupReq.groupDesc"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string groupOwner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_groupowner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.group.createGroupReq.groupOwner"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string groupMembers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_groupmembers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.group.createGroupReq.groupMembers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* createGroupReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.group.createGroupReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string groupName = 1;
  if (!this->_internal_groupname().empty()) {
    const std::string& _s = this->_internal_groupname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.group.createGroupReq.groupName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string groupDesc = 2;
  if (!this->_internal_groupdesc().empty()) {
    const std::string& _s = this->_internal_groupdesc();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.group.createGroupReq.groupDesc");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string groupOwner = 3;
  if (!this->_internal_groupowner().empty()) {
    const std::string& _s = this->_internal_groupowner();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.group.createGroupReq.groupOwner");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated string groupMembers = 4;
  for (int i = 0, n = this->_internal_groupmembers_size(); i < n; ++i) {
    const auto& s = this->_internal_groupmembers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.group.createGroupReq.groupMembers");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.group.createGroupReq)
  return target;
}

::size_t createGroupReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.group.createGroupReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string groupMembers = 4;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_groupmembers().size());
  for (int i = 0, n = _internal_groupmembers().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_groupmembers().Get(i));
  }

  // string groupName = 1;
  if (!this->_internal_groupname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_groupname());
  }

  // string groupDesc = 2;
  if (!this->_internal_groupdesc().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_groupdesc());
  }

  // string groupOwner = 3;
  if (!this->_internal_groupowner().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_groupowner());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData createGroupReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    createGroupReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*createGroupReq::GetClassData() const { return &_class_data_; }


void createGroupReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<createGroupReq*>(&to_msg);
  auto& from = static_cast<const createGroupReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.group.createGroupReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_groupmembers()->MergeFrom(from._internal_groupmembers());
  if (!from._internal_groupname().empty()) {
    _this->_internal_set_groupname(from._internal_groupname());
  }
  if (!from._internal_groupdesc().empty()) {
    _this->_internal_set_groupdesc(from._internal_groupdesc());
  }
  if (!from._internal_groupowner().empty()) {
    _this->_internal_set_groupowner(from._internal_groupowner());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void createGroupReq::CopyFrom(const createGroupReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.group.createGroupReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool createGroupReq::IsInitialized() const {
  return true;
}

void createGroupReq::InternalSwap(createGroupReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_groupmembers()->InternalSwap(
      other->_internal_mutable_groupmembers());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.groupname_, lhs_arena,
                                       &other->_impl_.groupname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.groupdesc_, lhs_arena,
                                       &other->_impl_.groupdesc_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.groupowner_, lhs_arena,
                                       &other->_impl_.groupowner_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata createGroupReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[1]);
}
// ===================================================================

class createGroupResp::_Internal {
 public:
  using HasBits = decltype(std::declval<createGroupResp>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(createGroupResp, _impl_._has_bits_);
  static const ::ServerRpc::group::groupInfo& groupinfo(const createGroupResp* msg);
  static void set_has_groupinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ServerRpc::group::groupInfo&
createGroupResp::_Internal::groupinfo(const createGroupResp* msg) {
  return *msg->_impl_.groupinfo_;
}
createGroupResp::createGroupResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.group.createGroupResp)
}
createGroupResp::createGroupResp(const createGroupResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  createGroupResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groupinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.groupinfo_ = new ::ServerRpc::group::groupInfo(*from._impl_.groupinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.group.createGroupResp)
}

inline void createGroupResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groupinfo_){nullptr}
  };
}

createGroupResp::~createGroupResp() {
  // @@protoc_insertion_point(destructor:ServerRpc.group.createGroupResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void createGroupResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.groupinfo_;
}

void createGroupResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void createGroupResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.group.createGroupResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.groupinfo_ != nullptr);
    _impl_.groupinfo_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* createGroupResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ServerRpc.group.groupInfo groupInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupinfo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* createGroupResp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.group.createGroupResp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ServerRpc.group.groupInfo groupInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::groupinfo(this),
        _Internal::groupinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.group.createGroupResp)
  return target;
}

::size_t createGroupResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.group.createGroupResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ServerRpc.group.groupInfo groupInfo = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.groupinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData createGroupResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    createGroupResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*createGroupResp::GetClassData() const { return &_class_data_; }


void createGroupResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<createGroupResp*>(&to_msg);
  auto& from = static_cast<const createGroupResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.group.createGroupResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_groupinfo()->::ServerRpc::group::groupInfo::MergeFrom(
        from._internal_groupinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void createGroupResp::CopyFrom(const createGroupResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.group.createGroupResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool createGroupResp::IsInitialized() const {
  return true;
}

void createGroupResp::InternalSwap(createGroupResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.groupinfo_, other->_impl_.groupinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata createGroupResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[2]);
}
// ===================================================================

class joinGroupReq::_Internal {
 public:
};

joinGroupReq::joinGroupReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.group.joinGroupReq)
}
joinGroupReq::joinGroupReq(const joinGroupReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  joinGroupReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_) {}

    , decltype(_impl_.userid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupid().empty()) {
    _this->_impl_.groupid_.Set(from._internal_groupid(), _this->GetArenaForAllocation());
  }
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.group.joinGroupReq)
}

inline void joinGroupReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_) {}

    , decltype(_impl_.userid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

joinGroupReq::~joinGroupReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.group.joinGroupReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void joinGroupReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groupid_.Destroy();
  _impl_.userid_.Destroy();
}

void joinGroupReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void joinGroupReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.group.joinGroupReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groupid_.ClearToEmpty();
  _impl_.userid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* joinGroupReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string groupID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_groupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.group.joinGroupReq.groupID"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string userID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.group.joinGroupReq.userID"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* joinGroupReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.group.joinGroupReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string groupID = 1;
  if (!this->_internal_groupid().empty()) {
    const std::string& _s = this->_internal_groupid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.group.joinGroupReq.groupID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string userID = 2;
  if (!this->_internal_userid().empty()) {
    const std::string& _s = this->_internal_userid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.group.joinGroupReq.userID");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.group.joinGroupReq)
  return target;
}

::size_t joinGroupReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.group.joinGroupReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string groupID = 1;
  if (!this->_internal_groupid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_groupid());
  }

  // string userID = 2;
  if (!this->_internal_userid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData joinGroupReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    joinGroupReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*joinGroupReq::GetClassData() const { return &_class_data_; }


void joinGroupReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<joinGroupReq*>(&to_msg);
  auto& from = static_cast<const joinGroupReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.group.joinGroupReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_groupid().empty()) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void joinGroupReq::CopyFrom(const joinGroupReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.group.joinGroupReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool joinGroupReq::IsInitialized() const {
  return true;
}

void joinGroupReq::InternalSwap(joinGroupReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.groupid_, lhs_arena,
                                       &other->_impl_.groupid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userid_, lhs_arena,
                                       &other->_impl_.userid_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata joinGroupReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[3]);
}
// ===================================================================

class joinGroupResp::_Internal {
 public:
};

joinGroupResp::joinGroupResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ServerRpc.group.joinGroupResp)
}
joinGroupResp::joinGroupResp(const joinGroupResp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  joinGroupResp* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.group.joinGroupResp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData joinGroupResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*joinGroupResp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata joinGroupResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[4]);
}
// ===================================================================

class getGroupInfoReq::_Internal {
 public:
};

getGroupInfoReq::getGroupInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.group.getGroupInfoReq)
}
getGroupInfoReq::getGroupInfoReq(const getGroupInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getGroupInfoReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupid().empty()) {
    _this->_impl_.groupid_.Set(from._internal_groupid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.group.getGroupInfoReq)
}

inline void getGroupInfoReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getGroupInfoReq::~getGroupInfoReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.group.getGroupInfoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getGroupInfoReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groupid_.Destroy();
}

void getGroupInfoReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getGroupInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.group.getGroupInfoReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groupid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getGroupInfoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string groupID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_groupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.group.getGroupInfoReq.groupID"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getGroupInfoReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.group.getGroupInfoReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string groupID = 1;
  if (!this->_internal_groupid().empty()) {
    const std::string& _s = this->_internal_groupid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.group.getGroupInfoReq.groupID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.group.getGroupInfoReq)
  return target;
}

::size_t getGroupInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.group.getGroupInfoReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string groupID = 1;
  if (!this->_internal_groupid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_groupid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getGroupInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getGroupInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getGroupInfoReq::GetClassData() const { return &_class_data_; }


void getGroupInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getGroupInfoReq*>(&to_msg);
  auto& from = static_cast<const getGroupInfoReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.group.getGroupInfoReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_groupid().empty()) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getGroupInfoReq::CopyFrom(const getGroupInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.group.getGroupInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getGroupInfoReq::IsInitialized() const {
  return true;
}

void getGroupInfoReq::InternalSwap(getGroupInfoReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.groupid_, lhs_arena,
                                       &other->_impl_.groupid_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata getGroupInfoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[5]);
}
// ===================================================================

class getGroupInfoResp::_Internal {
 public:
  using HasBits = decltype(std::declval<getGroupInfoResp>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(getGroupInfoResp, _impl_._has_bits_);
  static const ::ServerRpc::group::groupInfo& groupinfo(const getGroupInfoResp* msg);
  static void set_has_groupinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ServerRpc::group::groupInfo&
getGroupInfoResp::_Internal::groupinfo(const getGroupInfoResp* msg) {
  return *msg->_impl_.groupinfo_;
}
getGroupInfoResp::getGroupInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.group.getGroupInfoResp)
}
getGroupInfoResp::getGroupInfoResp(const getGroupInfoResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getGroupInfoResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groupinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.groupinfo_ = new ::ServerRpc::group::groupInfo(*from._impl_.groupinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.group.getGroupInfoResp)
}

inline void getGroupInfoResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groupinfo_){nullptr}
  };
}

getGroupInfoResp::~getGroupInfoResp() {
  // @@protoc_insertion_point(destructor:ServerRpc.group.getGroupInfoResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getGroupInfoResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.groupinfo_;
}

void getGroupInfoResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getGroupInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.group.getGroupInfoResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.groupinfo_ != nullptr);
    _impl_.groupinfo_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getGroupInfoResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ServerRpc.group.groupInfo groupInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupinfo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getGroupInfoResp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.group.getGroupInfoResp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ServerRpc.group.groupInfo groupInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::groupinfo(this),
        _Internal::groupinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.group.getGroupInfoResp)
  return target;
}

::size_t getGroupInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.group.getGroupInfoResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ServerRpc.group.groupInfo groupInfo = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.groupinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getGroupInfoResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getGroupInfoResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getGroupInfoResp::GetClassData() const { return &_class_data_; }


void getGroupInfoResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getGroupInfoResp*>(&to_msg);
  auto& from = static_cast<const getGroupInfoResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.group.getGroupInfoResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_groupinfo()->::ServerRpc::group::groupInfo::MergeFrom(
        from._internal_groupinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getGroupInfoResp::CopyFrom(const getGroupInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.group.getGroupInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getGroupInfoResp::IsInitialized() const {
  return true;
}

void getGroupInfoResp::InternalSwap(getGroupInfoResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.groupinfo_, other->_impl_.groupinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getGroupInfoResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[6]);
}
// ===================================================================

class getGroupListReq::_Internal {
 public:
};

getGroupListReq::getGroupListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.group.getGroupListReq)
}
getGroupListReq::getGroupListReq(const getGroupListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getGroupListReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.group.getGroupListReq)
}

inline void getGroupListReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getGroupListReq::~getGroupListReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.group.getGroupListReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getGroupListReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
}

void getGroupListReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getGroupListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.group.getGroupListReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getGroupListReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.group.getGroupListReq.userID"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getGroupListReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.group.getGroupListReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    const std::string& _s = this->_internal_userid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.group.getGroupListReq.userID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.group.getGroupListReq)
  return target;
}

::size_t getGroupListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.group.getGroupListReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getGroupListReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getGroupListReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getGroupListReq::GetClassData() const { return &_class_data_; }


void getGroupListReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getGroupListReq*>(&to_msg);
  auto& from = static_cast<const getGroupListReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.group.getGroupListReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getGroupListReq::CopyFrom(const getGroupListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.group.getGroupListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getGroupListReq::IsInitialized() const {
  return true;
}

void getGroupListReq::InternalSwap(getGroupListReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userid_, lhs_arena,
                                       &other->_impl_.userid_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata getGroupListReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[7]);
}
// ===================================================================

class getGroupListResp::_Internal {
 public:
};

getGroupListResp::getGroupListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.group.getGroupListResp)
}
getGroupListResp::getGroupListResp(const getGroupListResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getGroupListResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupinfo_){from._impl_.groupinfo_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.group.getGroupListResp)
}

inline void getGroupListResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.groupinfo_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

getGroupListResp::~getGroupListResp() {
  // @@protoc_insertion_point(destructor:ServerRpc.group.getGroupListResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getGroupListResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_groupinfo()->~RepeatedPtrField();
}

void getGroupListResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getGroupListResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.group.getGroupListResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_groupinfo()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getGroupListResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ServerRpc.group.groupInfo groupInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groupinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getGroupListResp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.group.getGroupListResp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerRpc.group.groupInfo groupInfo = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_groupinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_groupinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.group.getGroupListResp)
  return target;
}

::size_t getGroupListResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.group.getGroupListResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ServerRpc.group.groupInfo groupInfo = 2;
  total_size += 1UL * this->_internal_groupinfo_size();
  for (const auto& msg : this->_internal_groupinfo()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getGroupListResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getGroupListResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getGroupListResp::GetClassData() const { return &_class_data_; }


void getGroupListResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getGroupListResp*>(&to_msg);
  auto& from = static_cast<const getGroupListResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.group.getGroupListResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_groupinfo()->MergeFrom(from._internal_groupinfo());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getGroupListResp::CopyFrom(const getGroupListResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.group.getGroupListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getGroupListResp::IsInitialized() const {
  return true;
}

void getGroupListResp::InternalSwap(getGroupListResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_groupinfo()->InternalSwap(other->_internal_mutable_groupinfo());
}

::PROTOBUF_NAMESPACE_ID::Metadata getGroupListResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[8]);
}
// ===================================================================

class getGroupMemberReq::_Internal {
 public:
};

getGroupMemberReq::getGroupMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.group.getGroupMemberReq)
}
getGroupMemberReq::getGroupMemberReq(const getGroupMemberReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getGroupMemberReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupid().empty()) {
    _this->_impl_.groupid_.Set(from._internal_groupid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.group.getGroupMemberReq)
}

inline void getGroupMemberReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getGroupMemberReq::~getGroupMemberReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.group.getGroupMemberReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getGroupMemberReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groupid_.Destroy();
}

void getGroupMemberReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getGroupMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.group.getGroupMemberReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groupid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getGroupMemberReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string groupID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_groupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.group.getGroupMemberReq.groupID"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getGroupMemberReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.group.getGroupMemberReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string groupID = 1;
  if (!this->_internal_groupid().empty()) {
    const std::string& _s = this->_internal_groupid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.group.getGroupMemberReq.groupID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.group.getGroupMemberReq)
  return target;
}

::size_t getGroupMemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.group.getGroupMemberReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string groupID = 1;
  if (!this->_internal_groupid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_groupid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getGroupMemberReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getGroupMemberReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getGroupMemberReq::GetClassData() const { return &_class_data_; }


void getGroupMemberReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getGroupMemberReq*>(&to_msg);
  auto& from = static_cast<const getGroupMemberReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.group.getGroupMemberReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_groupid().empty()) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getGroupMemberReq::CopyFrom(const getGroupMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.group.getGroupMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getGroupMemberReq::IsInitialized() const {
  return true;
}

void getGroupMemberReq::InternalSwap(getGroupMemberReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.groupid_, lhs_arena,
                                       &other->_impl_.groupid_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata getGroupMemberReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[9]);
}
// ===================================================================

class getGroupMemberResp::_Internal {
 public:
};

getGroupMemberResp::getGroupMemberResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.group.getGroupMemberResp)
}
getGroupMemberResp::getGroupMemberResp(const getGroupMemberResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getGroupMemberResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupmembers_){from._impl_.groupmembers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.group.getGroupMemberResp)
}

inline void getGroupMemberResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.groupmembers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

getGroupMemberResp::~getGroupMemberResp() {
  // @@protoc_insertion_point(destructor:ServerRpc.group.getGroupMemberResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getGroupMemberResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_groupmembers()->~RepeatedPtrField();
}

void getGroupMemberResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getGroupMemberResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.group.getGroupMemberResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_groupmembers()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getGroupMemberResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string groupMembers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_groupmembers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.group.getGroupMemberResp.groupMembers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getGroupMemberResp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.group.getGroupMemberResp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string groupMembers = 2;
  for (int i = 0, n = this->_internal_groupmembers_size(); i < n; ++i) {
    const auto& s = this->_internal_groupmembers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.group.getGroupMemberResp.groupMembers");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.group.getGroupMemberResp)
  return target;
}

::size_t getGroupMemberResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.group.getGroupMemberResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string groupMembers = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_groupmembers().size());
  for (int i = 0, n = _internal_groupmembers().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_groupmembers().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getGroupMemberResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getGroupMemberResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getGroupMemberResp::GetClassData() const { return &_class_data_; }


void getGroupMemberResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getGroupMemberResp*>(&to_msg);
  auto& from = static_cast<const getGroupMemberResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.group.getGroupMemberResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_groupmembers()->MergeFrom(from._internal_groupmembers());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getGroupMemberResp::CopyFrom(const getGroupMemberResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.group.getGroupMemberResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getGroupMemberResp::IsInitialized() const {
  return true;
}

void getGroupMemberResp::InternalSwap(getGroupMemberResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_groupmembers()->InternalSwap(
      other->_internal_mutable_groupmembers());
}

::PROTOBUF_NAMESPACE_ID::Metadata getGroupMemberResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[10]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace group
}  // namespace ServerRpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServerRpc::group::groupInfo*
Arena::CreateMaybeMessage< ::ServerRpc::group::groupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::group::groupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::group::createGroupReq*
Arena::CreateMaybeMessage< ::ServerRpc::group::createGroupReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::group::createGroupReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::group::createGroupResp*
Arena::CreateMaybeMessage< ::ServerRpc::group::createGroupResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::group::createGroupResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::group::joinGroupReq*
Arena::CreateMaybeMessage< ::ServerRpc::group::joinGroupReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::group::joinGroupReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::group::joinGroupResp*
Arena::CreateMaybeMessage< ::ServerRpc::group::joinGroupResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::group::joinGroupResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::group::getGroupInfoReq*
Arena::CreateMaybeMessage< ::ServerRpc::group::getGroupInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::group::getGroupInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::group::getGroupInfoResp*
Arena::CreateMaybeMessage< ::ServerRpc::group::getGroupInfoResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::group::getGroupInfoResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::group::getGroupListReq*
Arena::CreateMaybeMessage< ::ServerRpc::group::getGroupListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::group::getGroupListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::group::getGroupListResp*
Arena::CreateMaybeMessage< ::ServerRpc::group::getGroupListResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::group::getGroupListResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::group::getGroupMemberReq*
Arena::CreateMaybeMessage< ::ServerRpc::group::getGroupMemberReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::group::getGroupMemberReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::group::getGroupMemberResp*
Arena::CreateMaybeMessage< ::ServerRpc::group::getGroupMemberResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::group::getGroupMemberResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
