// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: group.proto

#include "group.pb.h"
#include "group.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ServerRpc {
namespace group {

static const char* Group_method_names[] = {
  "/ServerRpc.group.Group/createGroup",
  "/ServerRpc.group.Group/joinGroup",
  "/ServerRpc.group.Group/getGroupInfo",
  "/ServerRpc.group.Group/getGroupList",
  "/ServerRpc.group.Group/getGroupMember",
};

std::unique_ptr< Group::Stub> Group::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Group::Stub> stub(new Group::Stub(channel, options));
  return stub;
}

Group::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_createGroup_(Group_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_joinGroup_(Group_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGroupInfo_(Group_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGroupList_(Group_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGroupMember_(Group_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Group::Stub::createGroup(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq& request, ::ServerRpc::group::createGroupResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::group::createGroupReq, ::ServerRpc::group::createGroupResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createGroup_, context, request, response);
}

void Group::Stub::async::createGroup(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq* request, ::ServerRpc::group::createGroupResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::group::createGroupReq, ::ServerRpc::group::createGroupResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createGroup_, context, request, response, std::move(f));
}

void Group::Stub::async::createGroup(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq* request, ::ServerRpc::group::createGroupResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::group::createGroupResp>* Group::Stub::PrepareAsynccreateGroupRaw(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::group::createGroupResp, ::ServerRpc::group::createGroupReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::group::createGroupResp>* Group::Stub::AsynccreateGroupRaw(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Group::Stub::joinGroup(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq& request, ::ServerRpc::group::joinGroupResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::group::joinGroupReq, ::ServerRpc::group::joinGroupResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_joinGroup_, context, request, response);
}

void Group::Stub::async::joinGroup(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq* request, ::ServerRpc::group::joinGroupResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::group::joinGroupReq, ::ServerRpc::group::joinGroupResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_joinGroup_, context, request, response, std::move(f));
}

void Group::Stub::async::joinGroup(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq* request, ::ServerRpc::group::joinGroupResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_joinGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::group::joinGroupResp>* Group::Stub::PrepareAsyncjoinGroupRaw(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::group::joinGroupResp, ::ServerRpc::group::joinGroupReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_joinGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::group::joinGroupResp>* Group::Stub::AsyncjoinGroupRaw(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncjoinGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Group::Stub::getGroupInfo(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq& request, ::ServerRpc::group::getGroupInfoResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::group::getGroupInfoReq, ::ServerRpc::group::getGroupInfoResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getGroupInfo_, context, request, response);
}

void Group::Stub::async::getGroupInfo(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq* request, ::ServerRpc::group::getGroupInfoResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::group::getGroupInfoReq, ::ServerRpc::group::getGroupInfoResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGroupInfo_, context, request, response, std::move(f));
}

void Group::Stub::async::getGroupInfo(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq* request, ::ServerRpc::group::getGroupInfoResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGroupInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupInfoResp>* Group::Stub::PrepareAsyncgetGroupInfoRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::group::getGroupInfoResp, ::ServerRpc::group::getGroupInfoReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getGroupInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupInfoResp>* Group::Stub::AsyncgetGroupInfoRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetGroupInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Group::Stub::getGroupList(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq& request, ::ServerRpc::group::getGroupListResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::group::getGroupListReq, ::ServerRpc::group::getGroupListResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getGroupList_, context, request, response);
}

void Group::Stub::async::getGroupList(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq* request, ::ServerRpc::group::getGroupListResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::group::getGroupListReq, ::ServerRpc::group::getGroupListResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGroupList_, context, request, response, std::move(f));
}

void Group::Stub::async::getGroupList(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq* request, ::ServerRpc::group::getGroupListResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGroupList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupListResp>* Group::Stub::PrepareAsyncgetGroupListRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::group::getGroupListResp, ::ServerRpc::group::getGroupListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getGroupList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupListResp>* Group::Stub::AsyncgetGroupListRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetGroupListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Group::Stub::getGroupMember(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberReq& request, ::ServerRpc::group::getGroupMemberResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::group::getGroupMemberReq, ::ServerRpc::group::getGroupMemberResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getGroupMember_, context, request, response);
}

void Group::Stub::async::getGroupMember(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberReq* request, ::ServerRpc::group::getGroupMemberResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::group::getGroupMemberReq, ::ServerRpc::group::getGroupMemberResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGroupMember_, context, request, response, std::move(f));
}

void Group::Stub::async::getGroupMember(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberReq* request, ::ServerRpc::group::getGroupMemberResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGroupMember_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupMemberResp>* Group::Stub::PrepareAsyncgetGroupMemberRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::group::getGroupMemberResp, ::ServerRpc::group::getGroupMemberReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getGroupMember_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupMemberResp>* Group::Stub::AsyncgetGroupMemberRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetGroupMemberRaw(context, request, cq);
  result->StartCall();
  return result;
}

Group::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Group_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Group::Service, ::ServerRpc::group::createGroupReq, ::ServerRpc::group::createGroupResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Group::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::group::createGroupReq* req,
             ::ServerRpc::group::createGroupResp* resp) {
               return service->createGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Group_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Group::Service, ::ServerRpc::group::joinGroupReq, ::ServerRpc::group::joinGroupResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Group::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::group::joinGroupReq* req,
             ::ServerRpc::group::joinGroupResp* resp) {
               return service->joinGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Group_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Group::Service, ::ServerRpc::group::getGroupInfoReq, ::ServerRpc::group::getGroupInfoResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Group::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::group::getGroupInfoReq* req,
             ::ServerRpc::group::getGroupInfoResp* resp) {
               return service->getGroupInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Group_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Group::Service, ::ServerRpc::group::getGroupListReq, ::ServerRpc::group::getGroupListResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Group::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::group::getGroupListReq* req,
             ::ServerRpc::group::getGroupListResp* resp) {
               return service->getGroupList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Group_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Group::Service, ::ServerRpc::group::getGroupMemberReq, ::ServerRpc::group::getGroupMemberResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Group::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::group::getGroupMemberReq* req,
             ::ServerRpc::group::getGroupMemberResp* resp) {
               return service->getGroupMember(ctx, req, resp);
             }, this)));
}

Group::Service::~Service() {
}

::grpc::Status Group::Service::createGroup(::grpc::ServerContext* context, const ::ServerRpc::group::createGroupReq* request, ::ServerRpc::group::createGroupResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Group::Service::joinGroup(::grpc::ServerContext* context, const ::ServerRpc::group::joinGroupReq* request, ::ServerRpc::group::joinGroupResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Group::Service::getGroupInfo(::grpc::ServerContext* context, const ::ServerRpc::group::getGroupInfoReq* request, ::ServerRpc::group::getGroupInfoResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Group::Service::getGroupList(::grpc::ServerContext* context, const ::ServerRpc::group::getGroupListReq* request, ::ServerRpc::group::getGroupListResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Group::Service::getGroupMember(::grpc::ServerContext* context, const ::ServerRpc::group::getGroupMemberReq* request, ::ServerRpc::group::getGroupMemberResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ServerRpc
}  // namespace group

