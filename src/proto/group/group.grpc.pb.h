// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: group.proto
#ifndef GRPC_group_2eproto__INCLUDED
#define GRPC_group_2eproto__INCLUDED

#include "group.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ServerRpc {
namespace group {

class Group final {
 public:
  static constexpr char const* service_full_name() {
    return "ServerRpc.group.Group";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status createGroup(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq& request, ::ServerRpc::group::createGroupResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::createGroupResp>> AsynccreateGroup(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::createGroupResp>>(AsynccreateGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::createGroupResp>> PrepareAsynccreateGroup(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::createGroupResp>>(PrepareAsynccreateGroupRaw(context, request, cq));
    }
    virtual ::grpc::Status joinGroup(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq& request, ::ServerRpc::group::joinGroupResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::joinGroupResp>> AsyncjoinGroup(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::joinGroupResp>>(AsyncjoinGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::joinGroupResp>> PrepareAsyncjoinGroup(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::joinGroupResp>>(PrepareAsyncjoinGroupRaw(context, request, cq));
    }
    virtual ::grpc::Status getGroupInfo(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq& request, ::ServerRpc::group::getGroupInfoResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupInfoResp>> AsyncgetGroupInfo(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupInfoResp>>(AsyncgetGroupInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupInfoResp>> PrepareAsyncgetGroupInfo(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupInfoResp>>(PrepareAsyncgetGroupInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status getGroupList(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq& request, ::ServerRpc::group::getGroupListResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupListResp>> AsyncgetGroupList(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupListResp>>(AsyncgetGroupListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupListResp>> PrepareAsyncgetGroupList(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupListResp>>(PrepareAsyncgetGroupListRaw(context, request, cq));
    }
    virtual ::grpc::Status getGroupMemberId(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdReq& request, ::ServerRpc::group::getGroupMemberIdResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupMemberIdResp>> AsyncgetGroupMemberId(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupMemberIdResp>>(AsyncgetGroupMemberIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupMemberIdResp>> PrepareAsyncgetGroupMemberId(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupMemberIdResp>>(PrepareAsyncgetGroupMemberIdRaw(context, request, cq));
    }
    virtual ::grpc::Status getGroupMemberIdHash(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq& request, ::ServerRpc::group::getGroupMemberIdHashResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupMemberIdHashResp>> AsyncgetGroupMemberIdHash(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupMemberIdHashResp>>(AsyncgetGroupMemberIdHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupMemberIdHashResp>> PrepareAsyncgetGroupMemberIdHash(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupMemberIdHashResp>>(PrepareAsyncgetGroupMemberIdHashRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void createGroup(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq* request, ::ServerRpc::group::createGroupResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createGroup(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq* request, ::ServerRpc::group::createGroupResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void joinGroup(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq* request, ::ServerRpc::group::joinGroupResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void joinGroup(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq* request, ::ServerRpc::group::joinGroupResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getGroupInfo(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq* request, ::ServerRpc::group::getGroupInfoResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getGroupInfo(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq* request, ::ServerRpc::group::getGroupInfoResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getGroupList(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq* request, ::ServerRpc::group::getGroupListResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getGroupList(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq* request, ::ServerRpc::group::getGroupListResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getGroupMemberId(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdReq* request, ::ServerRpc::group::getGroupMemberIdResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getGroupMemberId(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdReq* request, ::ServerRpc::group::getGroupMemberIdResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getGroupMemberIdHash(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq* request, ::ServerRpc::group::getGroupMemberIdHashResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getGroupMemberIdHash(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq* request, ::ServerRpc::group::getGroupMemberIdHashResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::createGroupResp>* AsynccreateGroupRaw(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::createGroupResp>* PrepareAsynccreateGroupRaw(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::joinGroupResp>* AsyncjoinGroupRaw(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::joinGroupResp>* PrepareAsyncjoinGroupRaw(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupInfoResp>* AsyncgetGroupInfoRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupInfoResp>* PrepareAsyncgetGroupInfoRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupListResp>* AsyncgetGroupListRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupListResp>* PrepareAsyncgetGroupListRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupMemberIdResp>* AsyncgetGroupMemberIdRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupMemberIdResp>* PrepareAsyncgetGroupMemberIdRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupMemberIdHashResp>* AsyncgetGroupMemberIdHashRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::group::getGroupMemberIdHashResp>* PrepareAsyncgetGroupMemberIdHashRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status createGroup(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq& request, ::ServerRpc::group::createGroupResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::createGroupResp>> AsynccreateGroup(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::createGroupResp>>(AsynccreateGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::createGroupResp>> PrepareAsynccreateGroup(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::createGroupResp>>(PrepareAsynccreateGroupRaw(context, request, cq));
    }
    ::grpc::Status joinGroup(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq& request, ::ServerRpc::group::joinGroupResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::joinGroupResp>> AsyncjoinGroup(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::joinGroupResp>>(AsyncjoinGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::joinGroupResp>> PrepareAsyncjoinGroup(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::joinGroupResp>>(PrepareAsyncjoinGroupRaw(context, request, cq));
    }
    ::grpc::Status getGroupInfo(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq& request, ::ServerRpc::group::getGroupInfoResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupInfoResp>> AsyncgetGroupInfo(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupInfoResp>>(AsyncgetGroupInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupInfoResp>> PrepareAsyncgetGroupInfo(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupInfoResp>>(PrepareAsyncgetGroupInfoRaw(context, request, cq));
    }
    ::grpc::Status getGroupList(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq& request, ::ServerRpc::group::getGroupListResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupListResp>> AsyncgetGroupList(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupListResp>>(AsyncgetGroupListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupListResp>> PrepareAsyncgetGroupList(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupListResp>>(PrepareAsyncgetGroupListRaw(context, request, cq));
    }
    ::grpc::Status getGroupMemberId(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdReq& request, ::ServerRpc::group::getGroupMemberIdResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupMemberIdResp>> AsyncgetGroupMemberId(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupMemberIdResp>>(AsyncgetGroupMemberIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupMemberIdResp>> PrepareAsyncgetGroupMemberId(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupMemberIdResp>>(PrepareAsyncgetGroupMemberIdRaw(context, request, cq));
    }
    ::grpc::Status getGroupMemberIdHash(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq& request, ::ServerRpc::group::getGroupMemberIdHashResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupMemberIdHashResp>> AsyncgetGroupMemberIdHash(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupMemberIdHashResp>>(AsyncgetGroupMemberIdHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupMemberIdHashResp>> PrepareAsyncgetGroupMemberIdHash(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupMemberIdHashResp>>(PrepareAsyncgetGroupMemberIdHashRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void createGroup(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq* request, ::ServerRpc::group::createGroupResp* response, std::function<void(::grpc::Status)>) override;
      void createGroup(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq* request, ::ServerRpc::group::createGroupResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void joinGroup(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq* request, ::ServerRpc::group::joinGroupResp* response, std::function<void(::grpc::Status)>) override;
      void joinGroup(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq* request, ::ServerRpc::group::joinGroupResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getGroupInfo(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq* request, ::ServerRpc::group::getGroupInfoResp* response, std::function<void(::grpc::Status)>) override;
      void getGroupInfo(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq* request, ::ServerRpc::group::getGroupInfoResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getGroupList(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq* request, ::ServerRpc::group::getGroupListResp* response, std::function<void(::grpc::Status)>) override;
      void getGroupList(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq* request, ::ServerRpc::group::getGroupListResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getGroupMemberId(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdReq* request, ::ServerRpc::group::getGroupMemberIdResp* response, std::function<void(::grpc::Status)>) override;
      void getGroupMemberId(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdReq* request, ::ServerRpc::group::getGroupMemberIdResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getGroupMemberIdHash(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq* request, ::ServerRpc::group::getGroupMemberIdHashResp* response, std::function<void(::grpc::Status)>) override;
      void getGroupMemberIdHash(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq* request, ::ServerRpc::group::getGroupMemberIdHashResp* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::createGroupResp>* AsynccreateGroupRaw(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::createGroupResp>* PrepareAsynccreateGroupRaw(::grpc::ClientContext* context, const ::ServerRpc::group::createGroupReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::joinGroupResp>* AsyncjoinGroupRaw(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::joinGroupResp>* PrepareAsyncjoinGroupRaw(::grpc::ClientContext* context, const ::ServerRpc::group::joinGroupReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupInfoResp>* AsyncgetGroupInfoRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupInfoResp>* PrepareAsyncgetGroupInfoRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupListResp>* AsyncgetGroupListRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupListResp>* PrepareAsyncgetGroupListRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupListReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupMemberIdResp>* AsyncgetGroupMemberIdRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupMemberIdResp>* PrepareAsyncgetGroupMemberIdRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupMemberIdHashResp>* AsyncgetGroupMemberIdHashRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::group::getGroupMemberIdHashResp>* PrepareAsyncgetGroupMemberIdHashRaw(::grpc::ClientContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_createGroup_;
    const ::grpc::internal::RpcMethod rpcmethod_joinGroup_;
    const ::grpc::internal::RpcMethod rpcmethod_getGroupInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_getGroupList_;
    const ::grpc::internal::RpcMethod rpcmethod_getGroupMemberId_;
    const ::grpc::internal::RpcMethod rpcmethod_getGroupMemberIdHash_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status createGroup(::grpc::ServerContext* context, const ::ServerRpc::group::createGroupReq* request, ::ServerRpc::group::createGroupResp* response);
    virtual ::grpc::Status joinGroup(::grpc::ServerContext* context, const ::ServerRpc::group::joinGroupReq* request, ::ServerRpc::group::joinGroupResp* response);
    virtual ::grpc::Status getGroupInfo(::grpc::ServerContext* context, const ::ServerRpc::group::getGroupInfoReq* request, ::ServerRpc::group::getGroupInfoResp* response);
    virtual ::grpc::Status getGroupList(::grpc::ServerContext* context, const ::ServerRpc::group::getGroupListReq* request, ::ServerRpc::group::getGroupListResp* response);
    virtual ::grpc::Status getGroupMemberId(::grpc::ServerContext* context, const ::ServerRpc::group::getGroupMemberIdReq* request, ::ServerRpc::group::getGroupMemberIdResp* response);
    virtual ::grpc::Status getGroupMemberIdHash(::grpc::ServerContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq* request, ::ServerRpc::group::getGroupMemberIdHashResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_createGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createGroup() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_createGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGroup(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::createGroupReq* /*request*/, ::ServerRpc::group::createGroupResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateGroup(::grpc::ServerContext* context, ::ServerRpc::group::createGroupReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::group::createGroupResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_joinGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_joinGroup() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_joinGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status joinGroup(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::joinGroupReq* /*request*/, ::ServerRpc::group::joinGroupResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestjoinGroup(::grpc::ServerContext* context, ::ServerRpc::group::joinGroupReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::group::joinGroupResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGroupInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getGroupInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getGroupInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupInfo(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupInfoReq* /*request*/, ::ServerRpc::group::getGroupInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGroupInfo(::grpc::ServerContext* context, ::ServerRpc::group::getGroupInfoReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::group::getGroupInfoResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGroupList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getGroupList() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getGroupList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupList(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupListReq* /*request*/, ::ServerRpc::group::getGroupListResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGroupList(::grpc::ServerContext* context, ::ServerRpc::group::getGroupListReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::group::getGroupListResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGroupMemberId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getGroupMemberId() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getGroupMemberId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupMemberId(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupMemberIdReq* /*request*/, ::ServerRpc::group::getGroupMemberIdResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGroupMemberId(::grpc::ServerContext* context, ::ServerRpc::group::getGroupMemberIdReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::group::getGroupMemberIdResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGroupMemberIdHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getGroupMemberIdHash() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_getGroupMemberIdHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupMemberIdHash(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupMemberIdHashReq* /*request*/, ::ServerRpc::group::getGroupMemberIdHashResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGroupMemberIdHash(::grpc::ServerContext* context, ::ServerRpc::group::getGroupMemberIdHashReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::group::getGroupMemberIdHashResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_createGroup<WithAsyncMethod_joinGroup<WithAsyncMethod_getGroupInfo<WithAsyncMethod_getGroupList<WithAsyncMethod_getGroupMemberId<WithAsyncMethod_getGroupMemberIdHash<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_createGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createGroup() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::group::createGroupReq, ::ServerRpc::group::createGroupResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::group::createGroupReq* request, ::ServerRpc::group::createGroupResp* response) { return this->createGroup(context, request, response); }));}
    void SetMessageAllocatorFor_createGroup(
        ::grpc::MessageAllocator< ::ServerRpc::group::createGroupReq, ::ServerRpc::group::createGroupResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::group::createGroupReq, ::ServerRpc::group::createGroupResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGroup(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::createGroupReq* /*request*/, ::ServerRpc::group::createGroupResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::group::createGroupReq* /*request*/, ::ServerRpc::group::createGroupResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_joinGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_joinGroup() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::group::joinGroupReq, ::ServerRpc::group::joinGroupResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::group::joinGroupReq* request, ::ServerRpc::group::joinGroupResp* response) { return this->joinGroup(context, request, response); }));}
    void SetMessageAllocatorFor_joinGroup(
        ::grpc::MessageAllocator< ::ServerRpc::group::joinGroupReq, ::ServerRpc::group::joinGroupResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::group::joinGroupReq, ::ServerRpc::group::joinGroupResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_joinGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status joinGroup(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::joinGroupReq* /*request*/, ::ServerRpc::group::joinGroupResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* joinGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::group::joinGroupReq* /*request*/, ::ServerRpc::group::joinGroupResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getGroupInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getGroupInfo() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::group::getGroupInfoReq, ::ServerRpc::group::getGroupInfoResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::group::getGroupInfoReq* request, ::ServerRpc::group::getGroupInfoResp* response) { return this->getGroupInfo(context, request, response); }));}
    void SetMessageAllocatorFor_getGroupInfo(
        ::grpc::MessageAllocator< ::ServerRpc::group::getGroupInfoReq, ::ServerRpc::group::getGroupInfoResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::group::getGroupInfoReq, ::ServerRpc::group::getGroupInfoResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getGroupInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupInfo(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupInfoReq* /*request*/, ::ServerRpc::group::getGroupInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGroupInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::group::getGroupInfoReq* /*request*/, ::ServerRpc::group::getGroupInfoResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getGroupList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getGroupList() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::group::getGroupListReq, ::ServerRpc::group::getGroupListResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::group::getGroupListReq* request, ::ServerRpc::group::getGroupListResp* response) { return this->getGroupList(context, request, response); }));}
    void SetMessageAllocatorFor_getGroupList(
        ::grpc::MessageAllocator< ::ServerRpc::group::getGroupListReq, ::ServerRpc::group::getGroupListResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::group::getGroupListReq, ::ServerRpc::group::getGroupListResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getGroupList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupList(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupListReq* /*request*/, ::ServerRpc::group::getGroupListResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGroupList(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::group::getGroupListReq* /*request*/, ::ServerRpc::group::getGroupListResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getGroupMemberId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getGroupMemberId() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::group::getGroupMemberIdReq, ::ServerRpc::group::getGroupMemberIdResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::group::getGroupMemberIdReq* request, ::ServerRpc::group::getGroupMemberIdResp* response) { return this->getGroupMemberId(context, request, response); }));}
    void SetMessageAllocatorFor_getGroupMemberId(
        ::grpc::MessageAllocator< ::ServerRpc::group::getGroupMemberIdReq, ::ServerRpc::group::getGroupMemberIdResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::group::getGroupMemberIdReq, ::ServerRpc::group::getGroupMemberIdResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getGroupMemberId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupMemberId(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupMemberIdReq* /*request*/, ::ServerRpc::group::getGroupMemberIdResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGroupMemberId(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::group::getGroupMemberIdReq* /*request*/, ::ServerRpc::group::getGroupMemberIdResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getGroupMemberIdHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getGroupMemberIdHash() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::group::getGroupMemberIdHashReq, ::ServerRpc::group::getGroupMemberIdHashResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::group::getGroupMemberIdHashReq* request, ::ServerRpc::group::getGroupMemberIdHashResp* response) { return this->getGroupMemberIdHash(context, request, response); }));}
    void SetMessageAllocatorFor_getGroupMemberIdHash(
        ::grpc::MessageAllocator< ::ServerRpc::group::getGroupMemberIdHashReq, ::ServerRpc::group::getGroupMemberIdHashResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::group::getGroupMemberIdHashReq, ::ServerRpc::group::getGroupMemberIdHashResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getGroupMemberIdHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupMemberIdHash(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupMemberIdHashReq* /*request*/, ::ServerRpc::group::getGroupMemberIdHashResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGroupMemberIdHash(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::group::getGroupMemberIdHashReq* /*request*/, ::ServerRpc::group::getGroupMemberIdHashResp* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_createGroup<WithCallbackMethod_joinGroup<WithCallbackMethod_getGroupInfo<WithCallbackMethod_getGroupList<WithCallbackMethod_getGroupMemberId<WithCallbackMethod_getGroupMemberIdHash<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_createGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createGroup() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_createGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGroup(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::createGroupReq* /*request*/, ::ServerRpc::group::createGroupResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_joinGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_joinGroup() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_joinGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status joinGroup(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::joinGroupReq* /*request*/, ::ServerRpc::group::joinGroupResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGroupInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getGroupInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getGroupInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupInfo(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupInfoReq* /*request*/, ::ServerRpc::group::getGroupInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGroupList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getGroupList() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getGroupList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupList(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupListReq* /*request*/, ::ServerRpc::group::getGroupListResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGroupMemberId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getGroupMemberId() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getGroupMemberId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupMemberId(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupMemberIdReq* /*request*/, ::ServerRpc::group::getGroupMemberIdResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGroupMemberIdHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getGroupMemberIdHash() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_getGroupMemberIdHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupMemberIdHash(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupMemberIdHashReq* /*request*/, ::ServerRpc::group::getGroupMemberIdHashResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_createGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createGroup() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_createGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGroup(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::createGroupReq* /*request*/, ::ServerRpc::group::createGroupResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_joinGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_joinGroup() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_joinGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status joinGroup(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::joinGroupReq* /*request*/, ::ServerRpc::group::joinGroupResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestjoinGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGroupInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getGroupInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getGroupInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupInfo(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupInfoReq* /*request*/, ::ServerRpc::group::getGroupInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGroupInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGroupList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getGroupList() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getGroupList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupList(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupListReq* /*request*/, ::ServerRpc::group::getGroupListResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGroupList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGroupMemberId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getGroupMemberId() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getGroupMemberId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupMemberId(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupMemberIdReq* /*request*/, ::ServerRpc::group::getGroupMemberIdResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGroupMemberId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGroupMemberIdHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getGroupMemberIdHash() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_getGroupMemberIdHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupMemberIdHash(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupMemberIdHashReq* /*request*/, ::ServerRpc::group::getGroupMemberIdHashResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGroupMemberIdHash(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createGroup() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createGroup(context, request, response); }));
    }
    ~WithRawCallbackMethod_createGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGroup(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::createGroupReq* /*request*/, ::ServerRpc::group::createGroupResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_joinGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_joinGroup() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->joinGroup(context, request, response); }));
    }
    ~WithRawCallbackMethod_joinGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status joinGroup(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::joinGroupReq* /*request*/, ::ServerRpc::group::joinGroupResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* joinGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getGroupInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getGroupInfo() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getGroupInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_getGroupInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupInfo(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupInfoReq* /*request*/, ::ServerRpc::group::getGroupInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGroupInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getGroupList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getGroupList() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getGroupList(context, request, response); }));
    }
    ~WithRawCallbackMethod_getGroupList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupList(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupListReq* /*request*/, ::ServerRpc::group::getGroupListResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGroupList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getGroupMemberId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getGroupMemberId() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getGroupMemberId(context, request, response); }));
    }
    ~WithRawCallbackMethod_getGroupMemberId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupMemberId(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupMemberIdReq* /*request*/, ::ServerRpc::group::getGroupMemberIdResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGroupMemberId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getGroupMemberIdHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getGroupMemberIdHash() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getGroupMemberIdHash(context, request, response); }));
    }
    ~WithRawCallbackMethod_getGroupMemberIdHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGroupMemberIdHash(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupMemberIdHashReq* /*request*/, ::ServerRpc::group::getGroupMemberIdHashResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGroupMemberIdHash(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createGroup() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::group::createGroupReq, ::ServerRpc::group::createGroupResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::group::createGroupReq, ::ServerRpc::group::createGroupResp>* streamer) {
                       return this->StreamedcreateGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createGroup(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::createGroupReq* /*request*/, ::ServerRpc::group::createGroupResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::group::createGroupReq,::ServerRpc::group::createGroupResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_joinGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_joinGroup() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::group::joinGroupReq, ::ServerRpc::group::joinGroupResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::group::joinGroupReq, ::ServerRpc::group::joinGroupResp>* streamer) {
                       return this->StreamedjoinGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_joinGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status joinGroup(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::joinGroupReq* /*request*/, ::ServerRpc::group::joinGroupResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedjoinGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::group::joinGroupReq,::ServerRpc::group::joinGroupResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGroupInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getGroupInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::group::getGroupInfoReq, ::ServerRpc::group::getGroupInfoResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::group::getGroupInfoReq, ::ServerRpc::group::getGroupInfoResp>* streamer) {
                       return this->StreamedgetGroupInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getGroupInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGroupInfo(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupInfoReq* /*request*/, ::ServerRpc::group::getGroupInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGroupInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::group::getGroupInfoReq,::ServerRpc::group::getGroupInfoResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGroupList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getGroupList() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::group::getGroupListReq, ::ServerRpc::group::getGroupListResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::group::getGroupListReq, ::ServerRpc::group::getGroupListResp>* streamer) {
                       return this->StreamedgetGroupList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getGroupList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGroupList(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupListReq* /*request*/, ::ServerRpc::group::getGroupListResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGroupList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::group::getGroupListReq,::ServerRpc::group::getGroupListResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGroupMemberId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getGroupMemberId() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::group::getGroupMemberIdReq, ::ServerRpc::group::getGroupMemberIdResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::group::getGroupMemberIdReq, ::ServerRpc::group::getGroupMemberIdResp>* streamer) {
                       return this->StreamedgetGroupMemberId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getGroupMemberId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGroupMemberId(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupMemberIdReq* /*request*/, ::ServerRpc::group::getGroupMemberIdResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGroupMemberId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::group::getGroupMemberIdReq,::ServerRpc::group::getGroupMemberIdResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGroupMemberIdHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getGroupMemberIdHash() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::group::getGroupMemberIdHashReq, ::ServerRpc::group::getGroupMemberIdHashResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::group::getGroupMemberIdHashReq, ::ServerRpc::group::getGroupMemberIdHashResp>* streamer) {
                       return this->StreamedgetGroupMemberIdHash(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getGroupMemberIdHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGroupMemberIdHash(::grpc::ServerContext* /*context*/, const ::ServerRpc::group::getGroupMemberIdHashReq* /*request*/, ::ServerRpc::group::getGroupMemberIdHashResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGroupMemberIdHash(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::group::getGroupMemberIdHashReq,::ServerRpc::group::getGroupMemberIdHashResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_createGroup<WithStreamedUnaryMethod_joinGroup<WithStreamedUnaryMethod_getGroupInfo<WithStreamedUnaryMethod_getGroupList<WithStreamedUnaryMethod_getGroupMemberId<WithStreamedUnaryMethod_getGroupMemberIdHash<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_createGroup<WithStreamedUnaryMethod_joinGroup<WithStreamedUnaryMethod_getGroupInfo<WithStreamedUnaryMethod_getGroupList<WithStreamedUnaryMethod_getGroupMemberId<WithStreamedUnaryMethod_getGroupMemberIdHash<Service > > > > > > StreamedService;
};

}  // namespace group
}  // namespace ServerRpc


#endif  // GRPC_group_2eproto__INCLUDED
