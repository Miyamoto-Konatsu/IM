// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: conversation.proto

#include "conversation.pb.h"
#include "conversation.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ServerRpc {
namespace conversation {

static const char* Conversation_method_names[] = {
  "/ServerRpc.conversation.Conversation/setConversation",
  "/ServerRpc.conversation.Conversation/getConversation",
  "/ServerRpc.conversation.Conversation/getConversations",
  "/ServerRpc.conversation.Conversation/getAllConversations",
  "/ServerRpc.conversation.Conversation/batchSetConversations",
  "/ServerRpc.conversation.Conversation/createSingleChatConversations",
  "/ServerRpc.conversation.Conversation/createGroupChatConversations",
  "/ServerRpc.conversation.Conversation/setConversationMaxSeq",
  "/ServerRpc.conversation.Conversation/getConversationIDs",
  "/ServerRpc.conversation.Conversation/getUserConversationIDsHash",
  "/ServerRpc.conversation.Conversation/getConversationsByConversationID",
};

std::unique_ptr< Conversation::Stub> Conversation::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Conversation::Stub> stub(new Conversation::Stub(channel, options));
  return stub;
}

Conversation::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_setConversation_(Conversation_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getConversation_(Conversation_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getConversations_(Conversation_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAllConversations_(Conversation_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_batchSetConversations_(Conversation_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_createSingleChatConversations_(Conversation_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_createGroupChatConversations_(Conversation_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setConversationMaxSeq_(Conversation_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getConversationIDs_(Conversation_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getUserConversationIDsHash_(Conversation_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getConversationsByConversationID_(Conversation_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Conversation::Stub::setConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq& request, ::ServerRpc::conversation::setConversationResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::conversation::setConversationReq, ::ServerRpc::conversation::setConversationResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setConversation_, context, request, response);
}

void Conversation::Stub::async::setConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq* request, ::ServerRpc::conversation::setConversationResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::conversation::setConversationReq, ::ServerRpc::conversation::setConversationResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setConversation_, context, request, response, std::move(f));
}

void Conversation::Stub::async::setConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq* request, ::ServerRpc::conversation::setConversationResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setConversation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationResp>* Conversation::Stub::PrepareAsyncsetConversationRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::conversation::setConversationResp, ::ServerRpc::conversation::setConversationReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setConversation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationResp>* Conversation::Stub::AsyncsetConversationRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetConversationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Conversation::Stub::getConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq& request, ::ServerRpc::conversation::getConversationResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::conversation::getConversationReq, ::ServerRpc::conversation::getConversationResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getConversation_, context, request, response);
}

void Conversation::Stub::async::getConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq* request, ::ServerRpc::conversation::getConversationResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::conversation::getConversationReq, ::ServerRpc::conversation::getConversationResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConversation_, context, request, response, std::move(f));
}

void Conversation::Stub::async::getConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq* request, ::ServerRpc::conversation::getConversationResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConversation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationResp>* Conversation::Stub::PrepareAsyncgetConversationRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::conversation::getConversationResp, ::ServerRpc::conversation::getConversationReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getConversation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationResp>* Conversation::Stub::AsyncgetConversationRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetConversationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Conversation::Stub::getConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq& request, ::ServerRpc::conversation::getConversationsResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::conversation::getConversationsReq, ::ServerRpc::conversation::getConversationsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getConversations_, context, request, response);
}

void Conversation::Stub::async::getConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq* request, ::ServerRpc::conversation::getConversationsResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::conversation::getConversationsReq, ::ServerRpc::conversation::getConversationsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConversations_, context, request, response, std::move(f));
}

void Conversation::Stub::async::getConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq* request, ::ServerRpc::conversation::getConversationsResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConversations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsResp>* Conversation::Stub::PrepareAsyncgetConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::conversation::getConversationsResp, ::ServerRpc::conversation::getConversationsReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getConversations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsResp>* Conversation::Stub::AsyncgetConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetConversationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Conversation::Stub::getAllConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq& request, ::ServerRpc::conversation::getAllConversationsResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::conversation::getAllConversationsReq, ::ServerRpc::conversation::getAllConversationsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAllConversations_, context, request, response);
}

void Conversation::Stub::async::getAllConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq* request, ::ServerRpc::conversation::getAllConversationsResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::conversation::getAllConversationsReq, ::ServerRpc::conversation::getAllConversationsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllConversations_, context, request, response, std::move(f));
}

void Conversation::Stub::async::getAllConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq* request, ::ServerRpc::conversation::getAllConversationsResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllConversations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getAllConversationsResp>* Conversation::Stub::PrepareAsyncgetAllConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::conversation::getAllConversationsResp, ::ServerRpc::conversation::getAllConversationsReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAllConversations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getAllConversationsResp>* Conversation::Stub::AsyncgetAllConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAllConversationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Conversation::Stub::batchSetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq& request, ::ServerRpc::conversation::batchSetConversationsResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::conversation::batchSetConversationsReq, ::ServerRpc::conversation::batchSetConversationsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_batchSetConversations_, context, request, response);
}

void Conversation::Stub::async::batchSetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq* request, ::ServerRpc::conversation::batchSetConversationsResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::conversation::batchSetConversationsReq, ::ServerRpc::conversation::batchSetConversationsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_batchSetConversations_, context, request, response, std::move(f));
}

void Conversation::Stub::async::batchSetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq* request, ::ServerRpc::conversation::batchSetConversationsResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_batchSetConversations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::batchSetConversationsResp>* Conversation::Stub::PrepareAsyncbatchSetConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::conversation::batchSetConversationsResp, ::ServerRpc::conversation::batchSetConversationsReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_batchSetConversations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::batchSetConversationsResp>* Conversation::Stub::AsyncbatchSetConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbatchSetConversationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Conversation::Stub::createSingleChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq& request, ::ServerRpc::conversation::createSingleChatConversationsResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::conversation::createSingleChatConversationsReq, ::ServerRpc::conversation::createSingleChatConversationsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createSingleChatConversations_, context, request, response);
}

void Conversation::Stub::async::createSingleChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq* request, ::ServerRpc::conversation::createSingleChatConversationsResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::conversation::createSingleChatConversationsReq, ::ServerRpc::conversation::createSingleChatConversationsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createSingleChatConversations_, context, request, response, std::move(f));
}

void Conversation::Stub::async::createSingleChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq* request, ::ServerRpc::conversation::createSingleChatConversationsResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createSingleChatConversations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createSingleChatConversationsResp>* Conversation::Stub::PrepareAsynccreateSingleChatConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::conversation::createSingleChatConversationsResp, ::ServerRpc::conversation::createSingleChatConversationsReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createSingleChatConversations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createSingleChatConversationsResp>* Conversation::Stub::AsynccreateSingleChatConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateSingleChatConversationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Conversation::Stub::createGroupChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq& request, ::ServerRpc::conversation::createGroupChatConversationsResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::conversation::createGroupChatConversationsReq, ::ServerRpc::conversation::createGroupChatConversationsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createGroupChatConversations_, context, request, response);
}

void Conversation::Stub::async::createGroupChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq* request, ::ServerRpc::conversation::createGroupChatConversationsResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::conversation::createGroupChatConversationsReq, ::ServerRpc::conversation::createGroupChatConversationsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createGroupChatConversations_, context, request, response, std::move(f));
}

void Conversation::Stub::async::createGroupChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq* request, ::ServerRpc::conversation::createGroupChatConversationsResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createGroupChatConversations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createGroupChatConversationsResp>* Conversation::Stub::PrepareAsynccreateGroupChatConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::conversation::createGroupChatConversationsResp, ::ServerRpc::conversation::createGroupChatConversationsReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createGroupChatConversations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createGroupChatConversationsResp>* Conversation::Stub::AsynccreateGroupChatConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateGroupChatConversationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Conversation::Stub::setConversationMaxSeq(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq& request, ::ServerRpc::conversation::setConversationMaxSeqResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::conversation::setConversationMaxSeqReq, ::ServerRpc::conversation::setConversationMaxSeqResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setConversationMaxSeq_, context, request, response);
}

void Conversation::Stub::async::setConversationMaxSeq(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq* request, ::ServerRpc::conversation::setConversationMaxSeqResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::conversation::setConversationMaxSeqReq, ::ServerRpc::conversation::setConversationMaxSeqResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setConversationMaxSeq_, context, request, response, std::move(f));
}

void Conversation::Stub::async::setConversationMaxSeq(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq* request, ::ServerRpc::conversation::setConversationMaxSeqResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setConversationMaxSeq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationMaxSeqResp>* Conversation::Stub::PrepareAsyncsetConversationMaxSeqRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::conversation::setConversationMaxSeqResp, ::ServerRpc::conversation::setConversationMaxSeqReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setConversationMaxSeq_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationMaxSeqResp>* Conversation::Stub::AsyncsetConversationMaxSeqRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetConversationMaxSeqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Conversation::Stub::getConversationIDs(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq& request, ::ServerRpc::conversation::getConversationIDsResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::conversation::getConversationIDsReq, ::ServerRpc::conversation::getConversationIDsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getConversationIDs_, context, request, response);
}

void Conversation::Stub::async::getConversationIDs(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq* request, ::ServerRpc::conversation::getConversationIDsResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::conversation::getConversationIDsReq, ::ServerRpc::conversation::getConversationIDsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConversationIDs_, context, request, response, std::move(f));
}

void Conversation::Stub::async::getConversationIDs(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq* request, ::ServerRpc::conversation::getConversationIDsResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConversationIDs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationIDsResp>* Conversation::Stub::PrepareAsyncgetConversationIDsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::conversation::getConversationIDsResp, ::ServerRpc::conversation::getConversationIDsReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getConversationIDs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationIDsResp>* Conversation::Stub::AsyncgetConversationIDsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetConversationIDsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Conversation::Stub::getUserConversationIDsHash(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq& request, ::ServerRpc::conversation::getUserConversationIDsHashResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::conversation::getUserConversationIDsHashReq, ::ServerRpc::conversation::getUserConversationIDsHashResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getUserConversationIDsHash_, context, request, response);
}

void Conversation::Stub::async::getUserConversationIDsHash(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq* request, ::ServerRpc::conversation::getUserConversationIDsHashResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::conversation::getUserConversationIDsHashReq, ::ServerRpc::conversation::getUserConversationIDsHashResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getUserConversationIDsHash_, context, request, response, std::move(f));
}

void Conversation::Stub::async::getUserConversationIDsHash(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq* request, ::ServerRpc::conversation::getUserConversationIDsHashResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getUserConversationIDsHash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getUserConversationIDsHashResp>* Conversation::Stub::PrepareAsyncgetUserConversationIDsHashRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::conversation::getUserConversationIDsHashResp, ::ServerRpc::conversation::getUserConversationIDsHashReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getUserConversationIDsHash_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getUserConversationIDsHashResp>* Conversation::Stub::AsyncgetUserConversationIDsHashRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetUserConversationIDsHashRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Conversation::Stub::getConversationsByConversationID(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq& request, ::ServerRpc::conversation::getConversationsByConversationIDResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServerRpc::conversation::getConversationsByConversationIDReq, ::ServerRpc::conversation::getConversationsByConversationIDResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getConversationsByConversationID_, context, request, response);
}

void Conversation::Stub::async::getConversationsByConversationID(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq* request, ::ServerRpc::conversation::getConversationsByConversationIDResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServerRpc::conversation::getConversationsByConversationIDReq, ::ServerRpc::conversation::getConversationsByConversationIDResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConversationsByConversationID_, context, request, response, std::move(f));
}

void Conversation::Stub::async::getConversationsByConversationID(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq* request, ::ServerRpc::conversation::getConversationsByConversationIDResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConversationsByConversationID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsByConversationIDResp>* Conversation::Stub::PrepareAsyncgetConversationsByConversationIDRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerRpc::conversation::getConversationsByConversationIDResp, ::ServerRpc::conversation::getConversationsByConversationIDReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getConversationsByConversationID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsByConversationIDResp>* Conversation::Stub::AsyncgetConversationsByConversationIDRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetConversationsByConversationIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

Conversation::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Conversation_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Conversation::Service, ::ServerRpc::conversation::setConversationReq, ::ServerRpc::conversation::setConversationResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Conversation::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::conversation::setConversationReq* req,
             ::ServerRpc::conversation::setConversationResp* resp) {
               return service->setConversation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Conversation_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Conversation::Service, ::ServerRpc::conversation::getConversationReq, ::ServerRpc::conversation::getConversationResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Conversation::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::conversation::getConversationReq* req,
             ::ServerRpc::conversation::getConversationResp* resp) {
               return service->getConversation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Conversation_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Conversation::Service, ::ServerRpc::conversation::getConversationsReq, ::ServerRpc::conversation::getConversationsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Conversation::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::conversation::getConversationsReq* req,
             ::ServerRpc::conversation::getConversationsResp* resp) {
               return service->getConversations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Conversation_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Conversation::Service, ::ServerRpc::conversation::getAllConversationsReq, ::ServerRpc::conversation::getAllConversationsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Conversation::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::conversation::getAllConversationsReq* req,
             ::ServerRpc::conversation::getAllConversationsResp* resp) {
               return service->getAllConversations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Conversation_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Conversation::Service, ::ServerRpc::conversation::batchSetConversationsReq, ::ServerRpc::conversation::batchSetConversationsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Conversation::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::conversation::batchSetConversationsReq* req,
             ::ServerRpc::conversation::batchSetConversationsResp* resp) {
               return service->batchSetConversations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Conversation_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Conversation::Service, ::ServerRpc::conversation::createSingleChatConversationsReq, ::ServerRpc::conversation::createSingleChatConversationsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Conversation::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::conversation::createSingleChatConversationsReq* req,
             ::ServerRpc::conversation::createSingleChatConversationsResp* resp) {
               return service->createSingleChatConversations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Conversation_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Conversation::Service, ::ServerRpc::conversation::createGroupChatConversationsReq, ::ServerRpc::conversation::createGroupChatConversationsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Conversation::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::conversation::createGroupChatConversationsReq* req,
             ::ServerRpc::conversation::createGroupChatConversationsResp* resp) {
               return service->createGroupChatConversations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Conversation_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Conversation::Service, ::ServerRpc::conversation::setConversationMaxSeqReq, ::ServerRpc::conversation::setConversationMaxSeqResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Conversation::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::conversation::setConversationMaxSeqReq* req,
             ::ServerRpc::conversation::setConversationMaxSeqResp* resp) {
               return service->setConversationMaxSeq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Conversation_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Conversation::Service, ::ServerRpc::conversation::getConversationIDsReq, ::ServerRpc::conversation::getConversationIDsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Conversation::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::conversation::getConversationIDsReq* req,
             ::ServerRpc::conversation::getConversationIDsResp* resp) {
               return service->getConversationIDs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Conversation_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Conversation::Service, ::ServerRpc::conversation::getUserConversationIDsHashReq, ::ServerRpc::conversation::getUserConversationIDsHashResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Conversation::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::conversation::getUserConversationIDsHashReq* req,
             ::ServerRpc::conversation::getUserConversationIDsHashResp* resp) {
               return service->getUserConversationIDsHash(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Conversation_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Conversation::Service, ::ServerRpc::conversation::getConversationsByConversationIDReq, ::ServerRpc::conversation::getConversationsByConversationIDResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Conversation::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServerRpc::conversation::getConversationsByConversationIDReq* req,
             ::ServerRpc::conversation::getConversationsByConversationIDResp* resp) {
               return service->getConversationsByConversationID(ctx, req, resp);
             }, this)));
}

Conversation::Service::~Service() {
}

::grpc::Status Conversation::Service::setConversation(::grpc::ServerContext* context, const ::ServerRpc::conversation::setConversationReq* request, ::ServerRpc::conversation::setConversationResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Conversation::Service::getConversation(::grpc::ServerContext* context, const ::ServerRpc::conversation::getConversationReq* request, ::ServerRpc::conversation::getConversationResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Conversation::Service::getConversations(::grpc::ServerContext* context, const ::ServerRpc::conversation::getConversationsReq* request, ::ServerRpc::conversation::getConversationsResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Conversation::Service::getAllConversations(::grpc::ServerContext* context, const ::ServerRpc::conversation::getAllConversationsReq* request, ::ServerRpc::conversation::getAllConversationsResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Conversation::Service::batchSetConversations(::grpc::ServerContext* context, const ::ServerRpc::conversation::batchSetConversationsReq* request, ::ServerRpc::conversation::batchSetConversationsResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Conversation::Service::createSingleChatConversations(::grpc::ServerContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq* request, ::ServerRpc::conversation::createSingleChatConversationsResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Conversation::Service::createGroupChatConversations(::grpc::ServerContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq* request, ::ServerRpc::conversation::createGroupChatConversationsResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Conversation::Service::setConversationMaxSeq(::grpc::ServerContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq* request, ::ServerRpc::conversation::setConversationMaxSeqResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Conversation::Service::getConversationIDs(::grpc::ServerContext* context, const ::ServerRpc::conversation::getConversationIDsReq* request, ::ServerRpc::conversation::getConversationIDsResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Conversation::Service::getUserConversationIDsHash(::grpc::ServerContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq* request, ::ServerRpc::conversation::getUserConversationIDsHashResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Conversation::Service::getConversationsByConversationID(::grpc::ServerContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq* request, ::ServerRpc::conversation::getConversationsByConversationIDResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ServerRpc
}  // namespace conversation

