// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: conversation.proto

#include "conversation.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ServerRpc {
namespace conversation {
template <typename>
PROTOBUF_CONSTEXPR conversation::conversation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ownerid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.conversationid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.groupid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.touserid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maxseq_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.minseq_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.conversationtype_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct conversationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR conversationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~conversationDefaultTypeInternal() {}
  union {
    conversation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 conversationDefaultTypeInternal _conversation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR setConversationReq::setConversationReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.conversation_)*/nullptr} {}
struct setConversationReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setConversationReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~setConversationReqDefaultTypeInternal() {}
  union {
    setConversationReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setConversationReqDefaultTypeInternal _setConversationReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR setConversationResp::setConversationResp(
    ::_pbi::ConstantInitialized) {}
struct setConversationRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setConversationRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~setConversationRespDefaultTypeInternal() {}
  union {
    setConversationResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setConversationRespDefaultTypeInternal _setConversationResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getConversationReq::getConversationReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversationid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.owneruserid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getConversationReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getConversationReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getConversationReqDefaultTypeInternal() {}
  union {
    getConversationReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getConversationReqDefaultTypeInternal _getConversationReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getConversationResp::getConversationResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.conversation_)*/nullptr} {}
struct getConversationRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getConversationRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getConversationRespDefaultTypeInternal() {}
  union {
    getConversationResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getConversationRespDefaultTypeInternal _getConversationResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getConversationsReq::getConversationsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversationids_)*/{}
  , /*decltype(_impl_.owneruserid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getConversationsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getConversationsReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getConversationsReqDefaultTypeInternal() {}
  union {
    getConversationsReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getConversationsReqDefaultTypeInternal _getConversationsReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getConversationsResp::getConversationsResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversations_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getConversationsRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getConversationsRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getConversationsRespDefaultTypeInternal() {}
  union {
    getConversationsResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getConversationsRespDefaultTypeInternal _getConversationsResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getAllConversationsReq::getAllConversationsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owneruserid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getAllConversationsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getAllConversationsReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getAllConversationsReqDefaultTypeInternal() {}
  union {
    getAllConversationsReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getAllConversationsReqDefaultTypeInternal _getAllConversationsReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getAllConversationsResp::getAllConversationsResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversations_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getAllConversationsRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getAllConversationsRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getAllConversationsRespDefaultTypeInternal() {}
  union {
    getAllConversationsResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getAllConversationsRespDefaultTypeInternal _getAllConversationsResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR batchSetConversationsReq::batchSetConversationsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversations_)*/{}
  , /*decltype(_impl_.owneruserid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct batchSetConversationsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR batchSetConversationsReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~batchSetConversationsReqDefaultTypeInternal() {}
  union {
    batchSetConversationsReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 batchSetConversationsReqDefaultTypeInternal _batchSetConversationsReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR batchSetConversationsResp::batchSetConversationsResp(
    ::_pbi::ConstantInitialized) {}
struct batchSetConversationsRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR batchSetConversationsRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~batchSetConversationsRespDefaultTypeInternal() {}
  union {
    batchSetConversationsResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 batchSetConversationsRespDefaultTypeInternal _batchSetConversationsResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR createSingleChatConversationsReq::createSingleChatConversationsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.recvid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sendid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct createSingleChatConversationsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR createSingleChatConversationsReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~createSingleChatConversationsReqDefaultTypeInternal() {}
  union {
    createSingleChatConversationsReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 createSingleChatConversationsReqDefaultTypeInternal _createSingleChatConversationsReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR createSingleChatConversationsResp::createSingleChatConversationsResp(
    ::_pbi::ConstantInitialized) {}
struct createSingleChatConversationsRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR createSingleChatConversationsRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~createSingleChatConversationsRespDefaultTypeInternal() {}
  union {
    createSingleChatConversationsResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 createSingleChatConversationsRespDefaultTypeInternal _createSingleChatConversationsResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR createGroupChatConversationsReq::createGroupChatConversationsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userids_)*/{}
  , /*decltype(_impl_.groupid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct createGroupChatConversationsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR createGroupChatConversationsReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~createGroupChatConversationsReqDefaultTypeInternal() {}
  union {
    createGroupChatConversationsReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 createGroupChatConversationsReqDefaultTypeInternal _createGroupChatConversationsReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR createGroupChatConversationsResp::createGroupChatConversationsResp(
    ::_pbi::ConstantInitialized) {}
struct createGroupChatConversationsRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR createGroupChatConversationsRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~createGroupChatConversationsRespDefaultTypeInternal() {}
  union {
    createGroupChatConversationsResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 createGroupChatConversationsRespDefaultTypeInternal _createGroupChatConversationsResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR setConversationMaxSeqReq::setConversationMaxSeqReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owneruserid_)*/{}
  , /*decltype(_impl_.conversationid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maxseq_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct setConversationMaxSeqReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setConversationMaxSeqReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~setConversationMaxSeqReqDefaultTypeInternal() {}
  union {
    setConversationMaxSeqReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setConversationMaxSeqReqDefaultTypeInternal _setConversationMaxSeqReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR setConversationMaxSeqResp::setConversationMaxSeqResp(
    ::_pbi::ConstantInitialized) {}
struct setConversationMaxSeqRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setConversationMaxSeqRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~setConversationMaxSeqRespDefaultTypeInternal() {}
  union {
    setConversationMaxSeqResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setConversationMaxSeqRespDefaultTypeInternal _setConversationMaxSeqResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getConversationIDsReq::getConversationIDsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getConversationIDsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getConversationIDsReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getConversationIDsReqDefaultTypeInternal() {}
  union {
    getConversationIDsReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getConversationIDsReqDefaultTypeInternal _getConversationIDsReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getConversationIDsResp::getConversationIDsResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversationids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getConversationIDsRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getConversationIDsRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getConversationIDsRespDefaultTypeInternal() {}
  union {
    getConversationIDsResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getConversationIDsRespDefaultTypeInternal _getConversationIDsResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getUserConversationIDsHashReq::getUserConversationIDsHashReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owneruserid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getUserConversationIDsHashReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getUserConversationIDsHashReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getUserConversationIDsHashReqDefaultTypeInternal() {}
  union {
    getUserConversationIDsHashReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getUserConversationIDsHashReqDefaultTypeInternal _getUserConversationIDsHashReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getUserConversationIDsHashResp::getUserConversationIDsHashResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getUserConversationIDsHashRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getUserConversationIDsHashRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getUserConversationIDsHashRespDefaultTypeInternal() {}
  union {
    getUserConversationIDsHashResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getUserConversationIDsHashRespDefaultTypeInternal _getUserConversationIDsHashResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getConversationsByConversationIDReq::getConversationsByConversationIDReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversationids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getConversationsByConversationIDReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getConversationsByConversationIDReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getConversationsByConversationIDReqDefaultTypeInternal() {}
  union {
    getConversationsByConversationIDReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getConversationsByConversationIDReqDefaultTypeInternal _getConversationsByConversationIDReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR getConversationsByConversationIDResp::getConversationsByConversationIDResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversations_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getConversationsByConversationIDRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getConversationsByConversationIDRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~getConversationsByConversationIDRespDefaultTypeInternal() {}
  union {
    getConversationsByConversationIDResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getConversationsByConversationIDRespDefaultTypeInternal _getConversationsByConversationIDResp_default_instance_;
}  // namespace conversation
}  // namespace ServerRpc
static ::_pb::Metadata file_level_metadata_conversation_2eproto[23];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_conversation_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_conversation_2eproto = nullptr;
const ::uint32_t TableStruct_conversation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::conversation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::conversation, _impl_.ownerid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::conversation, _impl_.conversationid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::conversation, _impl_.conversationtype_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::conversation, _impl_.groupid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::conversation, _impl_.touserid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::conversation, _impl_.maxseq_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::conversation, _impl_.minseq_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::setConversationReq, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::setConversationReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::setConversationReq, _impl_.conversation_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::setConversationResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationReq, _impl_.conversationid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationReq, _impl_.owneruserid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationResp, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationResp, _impl_.conversation_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationsReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationsReq, _impl_.owneruserid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationsReq, _impl_.conversationids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationsResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationsResp, _impl_.conversations_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getAllConversationsReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getAllConversationsReq, _impl_.owneruserid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getAllConversationsResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getAllConversationsResp, _impl_.conversations_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::batchSetConversationsReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::batchSetConversationsReq, _impl_.conversations_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::batchSetConversationsReq, _impl_.owneruserid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::batchSetConversationsResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::createSingleChatConversationsReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::createSingleChatConversationsReq, _impl_.recvid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::createSingleChatConversationsReq, _impl_.sendid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::createSingleChatConversationsResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::createGroupChatConversationsReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::createGroupChatConversationsReq, _impl_.userids_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::createGroupChatConversationsReq, _impl_.groupid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::createGroupChatConversationsResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::setConversationMaxSeqReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::setConversationMaxSeqReq, _impl_.conversationid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::setConversationMaxSeqReq, _impl_.owneruserid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::setConversationMaxSeqReq, _impl_.maxseq_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::setConversationMaxSeqResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationIDsReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationIDsReq, _impl_.userid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationIDsResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationIDsResp, _impl_.conversationids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getUserConversationIDsHashReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getUserConversationIDsHashReq, _impl_.owneruserid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getUserConversationIDsHashResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getUserConversationIDsHashResp, _impl_.hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationsByConversationIDReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationsByConversationIDReq, _impl_.conversationids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationsByConversationIDResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::conversation::getConversationsByConversationIDResp, _impl_.conversations_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ServerRpc::conversation::conversation)},
        { 15, 24, -1, sizeof(::ServerRpc::conversation::setConversationReq)},
        { 25, -1, -1, sizeof(::ServerRpc::conversation::setConversationResp)},
        { 33, -1, -1, sizeof(::ServerRpc::conversation::getConversationReq)},
        { 43, 52, -1, sizeof(::ServerRpc::conversation::getConversationResp)},
        { 53, -1, -1, sizeof(::ServerRpc::conversation::getConversationsReq)},
        { 63, -1, -1, sizeof(::ServerRpc::conversation::getConversationsResp)},
        { 72, -1, -1, sizeof(::ServerRpc::conversation::getAllConversationsReq)},
        { 81, -1, -1, sizeof(::ServerRpc::conversation::getAllConversationsResp)},
        { 90, -1, -1, sizeof(::ServerRpc::conversation::batchSetConversationsReq)},
        { 100, -1, -1, sizeof(::ServerRpc::conversation::batchSetConversationsResp)},
        { 108, -1, -1, sizeof(::ServerRpc::conversation::createSingleChatConversationsReq)},
        { 118, -1, -1, sizeof(::ServerRpc::conversation::createSingleChatConversationsResp)},
        { 126, -1, -1, sizeof(::ServerRpc::conversation::createGroupChatConversationsReq)},
        { 136, -1, -1, sizeof(::ServerRpc::conversation::createGroupChatConversationsResp)},
        { 144, -1, -1, sizeof(::ServerRpc::conversation::setConversationMaxSeqReq)},
        { 155, -1, -1, sizeof(::ServerRpc::conversation::setConversationMaxSeqResp)},
        { 163, -1, -1, sizeof(::ServerRpc::conversation::getConversationIDsReq)},
        { 172, -1, -1, sizeof(::ServerRpc::conversation::getConversationIDsResp)},
        { 181, -1, -1, sizeof(::ServerRpc::conversation::getUserConversationIDsHashReq)},
        { 190, -1, -1, sizeof(::ServerRpc::conversation::getUserConversationIDsHashResp)},
        { 199, -1, -1, sizeof(::ServerRpc::conversation::getConversationsByConversationIDReq)},
        { 208, -1, -1, sizeof(::ServerRpc::conversation::getConversationsByConversationIDResp)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ServerRpc::conversation::_conversation_default_instance_._instance,
    &::ServerRpc::conversation::_setConversationReq_default_instance_._instance,
    &::ServerRpc::conversation::_setConversationResp_default_instance_._instance,
    &::ServerRpc::conversation::_getConversationReq_default_instance_._instance,
    &::ServerRpc::conversation::_getConversationResp_default_instance_._instance,
    &::ServerRpc::conversation::_getConversationsReq_default_instance_._instance,
    &::ServerRpc::conversation::_getConversationsResp_default_instance_._instance,
    &::ServerRpc::conversation::_getAllConversationsReq_default_instance_._instance,
    &::ServerRpc::conversation::_getAllConversationsResp_default_instance_._instance,
    &::ServerRpc::conversation::_batchSetConversationsReq_default_instance_._instance,
    &::ServerRpc::conversation::_batchSetConversationsResp_default_instance_._instance,
    &::ServerRpc::conversation::_createSingleChatConversationsReq_default_instance_._instance,
    &::ServerRpc::conversation::_createSingleChatConversationsResp_default_instance_._instance,
    &::ServerRpc::conversation::_createGroupChatConversationsReq_default_instance_._instance,
    &::ServerRpc::conversation::_createGroupChatConversationsResp_default_instance_._instance,
    &::ServerRpc::conversation::_setConversationMaxSeqReq_default_instance_._instance,
    &::ServerRpc::conversation::_setConversationMaxSeqResp_default_instance_._instance,
    &::ServerRpc::conversation::_getConversationIDsReq_default_instance_._instance,
    &::ServerRpc::conversation::_getConversationIDsResp_default_instance_._instance,
    &::ServerRpc::conversation::_getUserConversationIDsHashReq_default_instance_._instance,
    &::ServerRpc::conversation::_getUserConversationIDsHashResp_default_instance_._instance,
    &::ServerRpc::conversation::_getConversationsByConversationIDReq_default_instance_._instance,
    &::ServerRpc::conversation::_getConversationsByConversationIDResp_default_instance_._instance,
};
const char descriptor_table_protodef_conversation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022conversation.proto\022\026ServerRpc.conversa"
    "tion\"\224\001\n\014conversation\022\017\n\007ownerId\030\001 \001(\t\022\026"
    "\n\016conversationId\030\002 \001(\t\022\030\n\020conversationTy"
    "pe\030\003 \001(\005\022\017\n\007groupId\030\004 \001(\t\022\020\n\010toUserId\030\005 "
    "\001(\t\022\016\n\006maxSeq\030\006 \001(\004\022\016\n\006minSeq\030\007 \001(\004\"P\n\022s"
    "etConversationReq\022:\n\014conversation\030\001 \001(\0132"
    "$.ServerRpc.conversation.conversation\"\025\n"
    "\023setConversationResp\"A\n\022getConversationR"
    "eq\022\026\n\016conversationID\030\001 \001(\t\022\023\n\013ownerUserI"
    "D\030\002 \001(\t\"Q\n\023getConversationResp\022:\n\014conver"
    "sation\030\002 \001(\0132$.ServerRpc.conversation.co"
    "nversation\"C\n\023getConversationsReq\022\023\n\013own"
    "erUserID\030\001 \001(\t\022\027\n\017conversationIDs\030\002 \003(\t\""
    "S\n\024getConversationsResp\022;\n\rconversations"
    "\030\002 \003(\0132$.ServerRpc.conversation.conversa"
    "tion\"-\n\026getAllConversationsReq\022\023\n\013ownerU"
    "serID\030\001 \001(\t\"V\n\027getAllConversationsResp\022;"
    "\n\rconversations\030\002 \003(\0132$.ServerRpc.conver"
    "sation.conversation\"l\n\030batchSetConversat"
    "ionsReq\022;\n\rconversations\030\001 \003(\0132$.ServerR"
    "pc.conversation.conversation\022\023\n\013ownerUse"
    "rID\030\002 \001(\t\"\033\n\031batchSetConversationsResp\"B"
    "\n createSingleChatConversationsReq\022\016\n\006re"
    "cvID\030\001 \001(\t\022\016\n\006sendID\030\002 \001(\t\"#\n!createSing"
    "leChatConversationsResp\"C\n\037createGroupCh"
    "atConversationsReq\022\017\n\007userIDs\030\001 \003(\t\022\017\n\007g"
    "roupID\030\002 \001(\t\"\"\n createGroupChatConversat"
    "ionsResp\"W\n\030setConversationMaxSeqReq\022\026\n\016"
    "conversationID\030\001 \001(\t\022\023\n\013ownerUserID\030\002 \003("
    "\t\022\016\n\006maxSeq\030\003 \001(\003\"\033\n\031setConversationMaxS"
    "eqResp\"\'\n\025getConversationIDsReq\022\016\n\006userI"
    "D\030\001 \001(\t\"1\n\026getConversationIDsResp\022\027\n\017con"
    "versationIDs\030\001 \003(\t\"4\n\035getUserConversatio"
    "nIDsHashReq\022\023\n\013ownerUserID\030\001 \001(\t\".\n\036getU"
    "serConversationIDsHashResp\022\014\n\004hash\030\001 \001(\004"
    "\">\n#getConversationsByConversationIDReq\022"
    "\027\n\017conversationIDs\030\001 \003(\t\"c\n$getConversat"
    "ionsByConversationIDResp\022;\n\rconversation"
    "s\030\001 \003(\0132$.ServerRpc.conversation.convers"
    "ation2\255\013\n\014Conversation\022l\n\017setConversatio"
    "n\022*.ServerRpc.conversation.setConversati"
    "onReq\032+.ServerRpc.conversation.setConver"
    "sationResp\"\000\022l\n\017getConversation\022*.Server"
    "Rpc.conversation.getConversationReq\032+.Se"
    "rverRpc.conversation.getConversationResp"
    "\"\000\022o\n\020getConversations\022+.ServerRpc.conve"
    "rsation.getConversationsReq\032,.ServerRpc."
    "conversation.getConversationsResp\"\000\022x\n\023g"
    "etAllConversations\022..ServerRpc.conversat"
    "ion.getAllConversationsReq\032/.ServerRpc.c"
    "onversation.getAllConversationsResp\"\000\022~\n"
    "\025batchSetConversations\0220.ServerRpc.conve"
    "rsation.batchSetConversationsReq\0321.Serve"
    "rRpc.conversation.batchSetConversationsR"
    "esp\"\000\022\226\001\n\035createSingleChatConversations\022"
    "8.ServerRpc.conversation.createSingleCha"
    "tConversationsReq\0329.ServerRpc.conversati"
    "on.createSingleChatConversationsResp\"\000\022\223"
    "\001\n\034createGroupChatConversations\0227.Server"
    "Rpc.conversation.createGroupChatConversa"
    "tionsReq\0328.ServerRpc.conversation.create"
    "GroupChatConversationsResp\"\000\022~\n\025setConve"
    "rsationMaxSeq\0220.ServerRpc.conversation.s"
    "etConversationMaxSeqReq\0321.ServerRpc.conv"
    "ersation.setConversationMaxSeqResp\"\000\022u\n\022"
    "getConversationIDs\022-.ServerRpc.conversat"
    "ion.getConversationIDsReq\032..ServerRpc.co"
    "nversation.getConversationIDsResp\"\000\022\215\001\n\032"
    "getUserConversationIDsHash\0225.ServerRpc.c"
    "onversation.getUserConversationIDsHashRe"
    "q\0326.ServerRpc.conversation.getUserConver"
    "sationIDsHashResp\"\000\022\237\001\n getConversations"
    "ByConversationID\022;.ServerRpc.conversatio"
    "n.getConversationsByConversationIDReq\032<."
    "ServerRpc.conversation.getConversationsB"
    "yConversationIDResp\"\000b\006proto3"
};
static ::absl::once_flag descriptor_table_conversation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_conversation_2eproto = {
    false,
    false,
    3029,
    descriptor_table_protodef_conversation_2eproto,
    "conversation.proto",
    &descriptor_table_conversation_2eproto_once,
    nullptr,
    0,
    23,
    schemas,
    file_default_instances,
    TableStruct_conversation_2eproto::offsets,
    file_level_metadata_conversation_2eproto,
    file_level_enum_descriptors_conversation_2eproto,
    file_level_service_descriptors_conversation_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_conversation_2eproto_getter() {
  return &descriptor_table_conversation_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_conversation_2eproto(&descriptor_table_conversation_2eproto);
namespace ServerRpc {
namespace conversation {
// ===================================================================

class conversation::_Internal {
 public:
};

conversation::conversation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.conversation)
}
conversation::conversation(const conversation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  conversation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_) {}

    , decltype(_impl_.conversationid_) {}

    , decltype(_impl_.groupid_) {}

    , decltype(_impl_.touserid_) {}

    , decltype(_impl_.maxseq_) {}

    , decltype(_impl_.minseq_) {}

    , decltype(_impl_.conversationtype_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ownerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ownerid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ownerid().empty()) {
    _this->_impl_.ownerid_.Set(from._internal_ownerid(), _this->GetArenaForAllocation());
  }
  _impl_.conversationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.conversationid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversationid().empty()) {
    _this->_impl_.conversationid_.Set(from._internal_conversationid(), _this->GetArenaForAllocation());
  }
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupid().empty()) {
    _this->_impl_.groupid_.Set(from._internal_groupid(), _this->GetArenaForAllocation());
  }
  _impl_.touserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.touserid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_touserid().empty()) {
    _this->_impl_.touserid_.Set(from._internal_touserid(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.maxseq_, &from._impl_.maxseq_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.conversationtype_) -
    reinterpret_cast<char*>(&_impl_.maxseq_)) + sizeof(_impl_.conversationtype_));
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.conversation)
}

inline void conversation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_) {}

    , decltype(_impl_.conversationid_) {}

    , decltype(_impl_.groupid_) {}

    , decltype(_impl_.touserid_) {}

    , decltype(_impl_.maxseq_) { ::uint64_t{0u} }

    , decltype(_impl_.minseq_) { ::uint64_t{0u} }

    , decltype(_impl_.conversationtype_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ownerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ownerid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.conversationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.conversationid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.touserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.touserid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

conversation::~conversation() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.conversation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void conversation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ownerid_.Destroy();
  _impl_.conversationid_.Destroy();
  _impl_.groupid_.Destroy();
  _impl_.touserid_.Destroy();
}

void conversation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void conversation::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.conversation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ownerid_.ClearToEmpty();
  _impl_.conversationid_.ClearToEmpty();
  _impl_.groupid_.ClearToEmpty();
  _impl_.touserid_.ClearToEmpty();
  ::memset(&_impl_.maxseq_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.conversationtype_) -
      reinterpret_cast<char*>(&_impl_.maxseq_)) + sizeof(_impl_.conversationtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* conversation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ownerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ownerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.conversation.ownerId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string conversationId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_conversationid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.conversation.conversationId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 conversationType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.conversationtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string groupId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_groupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.conversation.groupId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string toUserId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_touserid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.conversation.toUserId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 maxSeq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.maxseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 minSeq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.minseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* conversation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.conversation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ownerId = 1;
  if (!this->_internal_ownerid().empty()) {
    const std::string& _s = this->_internal_ownerid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.conversation.ownerId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string conversationId = 2;
  if (!this->_internal_conversationid().empty()) {
    const std::string& _s = this->_internal_conversationid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.conversation.conversationId");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 conversationType = 3;
  if (this->_internal_conversationtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_conversationtype(), target);
  }

  // string groupId = 4;
  if (!this->_internal_groupid().empty()) {
    const std::string& _s = this->_internal_groupid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.conversation.groupId");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string toUserId = 5;
  if (!this->_internal_touserid().empty()) {
    const std::string& _s = this->_internal_touserid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.conversation.toUserId");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // uint64 maxSeq = 6;
  if (this->_internal_maxseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_maxseq(), target);
  }

  // uint64 minSeq = 7;
  if (this->_internal_minseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_minseq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.conversation)
  return target;
}

::size_t conversation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.conversation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ownerId = 1;
  if (!this->_internal_ownerid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ownerid());
  }

  // string conversationId = 2;
  if (!this->_internal_conversationid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_conversationid());
  }

  // string groupId = 4;
  if (!this->_internal_groupid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_groupid());
  }

  // string toUserId = 5;
  if (!this->_internal_touserid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_touserid());
  }

  // uint64 maxSeq = 6;
  if (this->_internal_maxseq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_maxseq());
  }

  // uint64 minSeq = 7;
  if (this->_internal_minseq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_minseq());
  }

  // int32 conversationType = 3;
  if (this->_internal_conversationtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_conversationtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData conversation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    conversation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*conversation::GetClassData() const { return &_class_data_; }


void conversation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<conversation*>(&to_msg);
  auto& from = static_cast<const conversation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.conversation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ownerid().empty()) {
    _this->_internal_set_ownerid(from._internal_ownerid());
  }
  if (!from._internal_conversationid().empty()) {
    _this->_internal_set_conversationid(from._internal_conversationid());
  }
  if (!from._internal_groupid().empty()) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  if (!from._internal_touserid().empty()) {
    _this->_internal_set_touserid(from._internal_touserid());
  }
  if (from._internal_maxseq() != 0) {
    _this->_internal_set_maxseq(from._internal_maxseq());
  }
  if (from._internal_minseq() != 0) {
    _this->_internal_set_minseq(from._internal_minseq());
  }
  if (from._internal_conversationtype() != 0) {
    _this->_internal_set_conversationtype(from._internal_conversationtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void conversation::CopyFrom(const conversation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.conversation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool conversation::IsInitialized() const {
  return true;
}

void conversation::InternalSwap(conversation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ownerid_, lhs_arena,
                                       &other->_impl_.ownerid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.conversationid_, lhs_arena,
                                       &other->_impl_.conversationid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.groupid_, lhs_arena,
                                       &other->_impl_.groupid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.touserid_, lhs_arena,
                                       &other->_impl_.touserid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(conversation, _impl_.conversationtype_)
      + sizeof(conversation::_impl_.conversationtype_)
      - PROTOBUF_FIELD_OFFSET(conversation, _impl_.maxseq_)>(
          reinterpret_cast<char*>(&_impl_.maxseq_),
          reinterpret_cast<char*>(&other->_impl_.maxseq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata conversation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[0]);
}
// ===================================================================

class setConversationReq::_Internal {
 public:
  using HasBits = decltype(std::declval<setConversationReq>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(setConversationReq, _impl_._has_bits_);
  static const ::ServerRpc::conversation::conversation& conversation(const setConversationReq* msg);
  static void set_has_conversation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ServerRpc::conversation::conversation&
setConversationReq::_Internal::conversation(const setConversationReq* msg) {
  return *msg->_impl_.conversation_;
}
setConversationReq::setConversationReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.setConversationReq)
}
setConversationReq::setConversationReq(const setConversationReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  setConversationReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conversation_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.conversation_ = new ::ServerRpc::conversation::conversation(*from._impl_.conversation_);
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.setConversationReq)
}

inline void setConversationReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conversation_){nullptr}
  };
}

setConversationReq::~setConversationReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.setConversationReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void setConversationReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.conversation_;
}

void setConversationReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void setConversationReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.setConversationReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.conversation_ != nullptr);
    _impl_.conversation_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setConversationReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ServerRpc.conversation.conversation conversation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conversation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* setConversationReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.setConversationReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ServerRpc.conversation.conversation conversation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::conversation(this),
        _Internal::conversation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.setConversationReq)
  return target;
}

::size_t setConversationReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.setConversationReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ServerRpc.conversation.conversation conversation = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conversation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setConversationReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    setConversationReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setConversationReq::GetClassData() const { return &_class_data_; }


void setConversationReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<setConversationReq*>(&to_msg);
  auto& from = static_cast<const setConversationReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.setConversationReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_conversation()->::ServerRpc::conversation::conversation::MergeFrom(
        from._internal_conversation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setConversationReq::CopyFrom(const setConversationReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.setConversationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setConversationReq::IsInitialized() const {
  return true;
}

void setConversationReq::InternalSwap(setConversationReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.conversation_, other->_impl_.conversation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setConversationReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[1]);
}
// ===================================================================

class setConversationResp::_Internal {
 public:
};

setConversationResp::setConversationResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.setConversationResp)
}
setConversationResp::setConversationResp(const setConversationResp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  setConversationResp* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.setConversationResp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setConversationResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setConversationResp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata setConversationResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[2]);
}
// ===================================================================

class getConversationReq::_Internal {
 public:
};

getConversationReq::getConversationReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.getConversationReq)
}
getConversationReq::getConversationReq(const getConversationReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getConversationReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversationid_) {}

    , decltype(_impl_.owneruserid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.conversationid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversationid().empty()) {
    _this->_impl_.conversationid_.Set(from._internal_conversationid(), _this->GetArenaForAllocation());
  }
  _impl_.owneruserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owneruserid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owneruserid().empty()) {
    _this->_impl_.owneruserid_.Set(from._internal_owneruserid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.getConversationReq)
}

inline void getConversationReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.conversationid_) {}

    , decltype(_impl_.owneruserid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.conversationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.conversationid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owneruserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owneruserid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getConversationReq::~getConversationReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.getConversationReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getConversationReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conversationid_.Destroy();
  _impl_.owneruserid_.Destroy();
}

void getConversationReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getConversationReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.getConversationReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conversationid_.ClearToEmpty();
  _impl_.owneruserid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getConversationReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string conversationID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversationid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.getConversationReq.conversationID"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string ownerUserID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owneruserid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.getConversationReq.ownerUserID"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getConversationReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.getConversationReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversationID = 1;
  if (!this->_internal_conversationid().empty()) {
    const std::string& _s = this->_internal_conversationid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.getConversationReq.conversationID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ownerUserID = 2;
  if (!this->_internal_owneruserid().empty()) {
    const std::string& _s = this->_internal_owneruserid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.getConversationReq.ownerUserID");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.getConversationReq)
  return target;
}

::size_t getConversationReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.getConversationReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string conversationID = 1;
  if (!this->_internal_conversationid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_conversationid());
  }

  // string ownerUserID = 2;
  if (!this->_internal_owneruserid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_owneruserid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getConversationReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getConversationReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getConversationReq::GetClassData() const { return &_class_data_; }


void getConversationReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getConversationReq*>(&to_msg);
  auto& from = static_cast<const getConversationReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.getConversationReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_conversationid().empty()) {
    _this->_internal_set_conversationid(from._internal_conversationid());
  }
  if (!from._internal_owneruserid().empty()) {
    _this->_internal_set_owneruserid(from._internal_owneruserid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getConversationReq::CopyFrom(const getConversationReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.getConversationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getConversationReq::IsInitialized() const {
  return true;
}

void getConversationReq::InternalSwap(getConversationReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.conversationid_, lhs_arena,
                                       &other->_impl_.conversationid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owneruserid_, lhs_arena,
                                       &other->_impl_.owneruserid_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata getConversationReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[3]);
}
// ===================================================================

class getConversationResp::_Internal {
 public:
  using HasBits = decltype(std::declval<getConversationResp>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(getConversationResp, _impl_._has_bits_);
  static const ::ServerRpc::conversation::conversation& conversation(const getConversationResp* msg);
  static void set_has_conversation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ServerRpc::conversation::conversation&
getConversationResp::_Internal::conversation(const getConversationResp* msg) {
  return *msg->_impl_.conversation_;
}
getConversationResp::getConversationResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.getConversationResp)
}
getConversationResp::getConversationResp(const getConversationResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getConversationResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conversation_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.conversation_ = new ::ServerRpc::conversation::conversation(*from._impl_.conversation_);
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.getConversationResp)
}

inline void getConversationResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conversation_){nullptr}
  };
}

getConversationResp::~getConversationResp() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.getConversationResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getConversationResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.conversation_;
}

void getConversationResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getConversationResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.getConversationResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.conversation_ != nullptr);
    _impl_.conversation_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getConversationResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ServerRpc.conversation.conversation conversation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_conversation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getConversationResp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.getConversationResp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ServerRpc.conversation.conversation conversation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::conversation(this),
        _Internal::conversation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.getConversationResp)
  return target;
}

::size_t getConversationResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.getConversationResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ServerRpc.conversation.conversation conversation = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conversation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getConversationResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getConversationResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getConversationResp::GetClassData() const { return &_class_data_; }


void getConversationResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getConversationResp*>(&to_msg);
  auto& from = static_cast<const getConversationResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.getConversationResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_conversation()->::ServerRpc::conversation::conversation::MergeFrom(
        from._internal_conversation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getConversationResp::CopyFrom(const getConversationResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.getConversationResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getConversationResp::IsInitialized() const {
  return true;
}

void getConversationResp::InternalSwap(getConversationResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.conversation_, other->_impl_.conversation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getConversationResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[4]);
}
// ===================================================================

class getConversationsReq::_Internal {
 public:
};

getConversationsReq::getConversationsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.getConversationsReq)
}
getConversationsReq::getConversationsReq(const getConversationsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getConversationsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversationids_){from._impl_.conversationids_}
    , decltype(_impl_.owneruserid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.owneruserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owneruserid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owneruserid().empty()) {
    _this->_impl_.owneruserid_.Set(from._internal_owneruserid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.getConversationsReq)
}

inline void getConversationsReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.conversationids_){arena}
    , decltype(_impl_.owneruserid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.owneruserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owneruserid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getConversationsReq::~getConversationsReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.getConversationsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getConversationsReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_conversationids()->~RepeatedPtrField();
  _impl_.owneruserid_.Destroy();
}

void getConversationsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getConversationsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.getConversationsReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_conversationids()->Clear();
  _impl_.owneruserid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getConversationsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ownerUserID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owneruserid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.getConversationsReq.ownerUserID"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string conversationIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_conversationids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.getConversationsReq.conversationIDs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getConversationsReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.getConversationsReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ownerUserID = 1;
  if (!this->_internal_owneruserid().empty()) {
    const std::string& _s = this->_internal_owneruserid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.getConversationsReq.ownerUserID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string conversationIDs = 2;
  for (int i = 0, n = this->_internal_conversationids_size(); i < n; ++i) {
    const auto& s = this->_internal_conversationids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.getConversationsReq.conversationIDs");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.getConversationsReq)
  return target;
}

::size_t getConversationsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.getConversationsReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string conversationIDs = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_conversationids().size());
  for (int i = 0, n = _internal_conversationids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_conversationids().Get(i));
  }

  // string ownerUserID = 1;
  if (!this->_internal_owneruserid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_owneruserid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getConversationsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getConversationsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getConversationsReq::GetClassData() const { return &_class_data_; }


void getConversationsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getConversationsReq*>(&to_msg);
  auto& from = static_cast<const getConversationsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.getConversationsReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_conversationids()->MergeFrom(from._internal_conversationids());
  if (!from._internal_owneruserid().empty()) {
    _this->_internal_set_owneruserid(from._internal_owneruserid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getConversationsReq::CopyFrom(const getConversationsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.getConversationsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getConversationsReq::IsInitialized() const {
  return true;
}

void getConversationsReq::InternalSwap(getConversationsReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_conversationids()->InternalSwap(
      other->_internal_mutable_conversationids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owneruserid_, lhs_arena,
                                       &other->_impl_.owneruserid_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata getConversationsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[5]);
}
// ===================================================================

class getConversationsResp::_Internal {
 public:
};

getConversationsResp::getConversationsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.getConversationsResp)
}
getConversationsResp::getConversationsResp(const getConversationsResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getConversationsResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversations_){from._impl_.conversations_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.getConversationsResp)
}

inline void getConversationsResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.conversations_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

getConversationsResp::~getConversationsResp() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.getConversationsResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getConversationsResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_conversations()->~RepeatedPtrField();
}

void getConversationsResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getConversationsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.getConversationsResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_conversations()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getConversationsResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ServerRpc.conversation.conversation conversations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conversations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getConversationsResp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.getConversationsResp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerRpc.conversation.conversation conversations = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_conversations_size()); i < n; i++) {
    const auto& repfield = this->_internal_conversations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.getConversationsResp)
  return target;
}

::size_t getConversationsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.getConversationsResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ServerRpc.conversation.conversation conversations = 2;
  total_size += 1UL * this->_internal_conversations_size();
  for (const auto& msg : this->_internal_conversations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getConversationsResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getConversationsResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getConversationsResp::GetClassData() const { return &_class_data_; }


void getConversationsResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getConversationsResp*>(&to_msg);
  auto& from = static_cast<const getConversationsResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.getConversationsResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_conversations()->MergeFrom(from._internal_conversations());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getConversationsResp::CopyFrom(const getConversationsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.getConversationsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getConversationsResp::IsInitialized() const {
  return true;
}

void getConversationsResp::InternalSwap(getConversationsResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_conversations()->InternalSwap(other->_internal_mutable_conversations());
}

::PROTOBUF_NAMESPACE_ID::Metadata getConversationsResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[6]);
}
// ===================================================================

class getAllConversationsReq::_Internal {
 public:
};

getAllConversationsReq::getAllConversationsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.getAllConversationsReq)
}
getAllConversationsReq::getAllConversationsReq(const getAllConversationsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getAllConversationsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owneruserid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.owneruserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owneruserid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owneruserid().empty()) {
    _this->_impl_.owneruserid_.Set(from._internal_owneruserid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.getAllConversationsReq)
}

inline void getAllConversationsReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.owneruserid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.owneruserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owneruserid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getAllConversationsReq::~getAllConversationsReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.getAllConversationsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getAllConversationsReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owneruserid_.Destroy();
}

void getAllConversationsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getAllConversationsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.getAllConversationsReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owneruserid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAllConversationsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ownerUserID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owneruserid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.getAllConversationsReq.ownerUserID"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getAllConversationsReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.getAllConversationsReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ownerUserID = 1;
  if (!this->_internal_owneruserid().empty()) {
    const std::string& _s = this->_internal_owneruserid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.getAllConversationsReq.ownerUserID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.getAllConversationsReq)
  return target;
}

::size_t getAllConversationsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.getAllConversationsReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ownerUserID = 1;
  if (!this->_internal_owneruserid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_owneruserid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getAllConversationsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getAllConversationsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getAllConversationsReq::GetClassData() const { return &_class_data_; }


void getAllConversationsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getAllConversationsReq*>(&to_msg);
  auto& from = static_cast<const getAllConversationsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.getAllConversationsReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owneruserid().empty()) {
    _this->_internal_set_owneruserid(from._internal_owneruserid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getAllConversationsReq::CopyFrom(const getAllConversationsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.getAllConversationsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAllConversationsReq::IsInitialized() const {
  return true;
}

void getAllConversationsReq::InternalSwap(getAllConversationsReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owneruserid_, lhs_arena,
                                       &other->_impl_.owneruserid_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata getAllConversationsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[7]);
}
// ===================================================================

class getAllConversationsResp::_Internal {
 public:
};

getAllConversationsResp::getAllConversationsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.getAllConversationsResp)
}
getAllConversationsResp::getAllConversationsResp(const getAllConversationsResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getAllConversationsResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversations_){from._impl_.conversations_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.getAllConversationsResp)
}

inline void getAllConversationsResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.conversations_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

getAllConversationsResp::~getAllConversationsResp() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.getAllConversationsResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getAllConversationsResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_conversations()->~RepeatedPtrField();
}

void getAllConversationsResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getAllConversationsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.getAllConversationsResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_conversations()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAllConversationsResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ServerRpc.conversation.conversation conversations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conversations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getAllConversationsResp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.getAllConversationsResp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerRpc.conversation.conversation conversations = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_conversations_size()); i < n; i++) {
    const auto& repfield = this->_internal_conversations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.getAllConversationsResp)
  return target;
}

::size_t getAllConversationsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.getAllConversationsResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ServerRpc.conversation.conversation conversations = 2;
  total_size += 1UL * this->_internal_conversations_size();
  for (const auto& msg : this->_internal_conversations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getAllConversationsResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getAllConversationsResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getAllConversationsResp::GetClassData() const { return &_class_data_; }


void getAllConversationsResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getAllConversationsResp*>(&to_msg);
  auto& from = static_cast<const getAllConversationsResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.getAllConversationsResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_conversations()->MergeFrom(from._internal_conversations());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getAllConversationsResp::CopyFrom(const getAllConversationsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.getAllConversationsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAllConversationsResp::IsInitialized() const {
  return true;
}

void getAllConversationsResp::InternalSwap(getAllConversationsResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_conversations()->InternalSwap(other->_internal_mutable_conversations());
}

::PROTOBUF_NAMESPACE_ID::Metadata getAllConversationsResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[8]);
}
// ===================================================================

class batchSetConversationsReq::_Internal {
 public:
};

batchSetConversationsReq::batchSetConversationsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.batchSetConversationsReq)
}
batchSetConversationsReq::batchSetConversationsReq(const batchSetConversationsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  batchSetConversationsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversations_){from._impl_.conversations_}
    , decltype(_impl_.owneruserid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.owneruserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owneruserid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owneruserid().empty()) {
    _this->_impl_.owneruserid_.Set(from._internal_owneruserid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.batchSetConversationsReq)
}

inline void batchSetConversationsReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.conversations_){arena}
    , decltype(_impl_.owneruserid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.owneruserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owneruserid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

batchSetConversationsReq::~batchSetConversationsReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.batchSetConversationsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void batchSetConversationsReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_conversations()->~RepeatedPtrField();
  _impl_.owneruserid_.Destroy();
}

void batchSetConversationsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void batchSetConversationsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.batchSetConversationsReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_conversations()->Clear();
  _impl_.owneruserid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* batchSetConversationsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ServerRpc.conversation.conversation conversations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conversations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string ownerUserID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owneruserid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.batchSetConversationsReq.ownerUserID"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* batchSetConversationsReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.batchSetConversationsReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerRpc.conversation.conversation conversations = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_conversations_size()); i < n; i++) {
    const auto& repfield = this->_internal_conversations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string ownerUserID = 2;
  if (!this->_internal_owneruserid().empty()) {
    const std::string& _s = this->_internal_owneruserid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.batchSetConversationsReq.ownerUserID");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.batchSetConversationsReq)
  return target;
}

::size_t batchSetConversationsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.batchSetConversationsReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ServerRpc.conversation.conversation conversations = 1;
  total_size += 1UL * this->_internal_conversations_size();
  for (const auto& msg : this->_internal_conversations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ownerUserID = 2;
  if (!this->_internal_owneruserid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_owneruserid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData batchSetConversationsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    batchSetConversationsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*batchSetConversationsReq::GetClassData() const { return &_class_data_; }


void batchSetConversationsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<batchSetConversationsReq*>(&to_msg);
  auto& from = static_cast<const batchSetConversationsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.batchSetConversationsReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_conversations()->MergeFrom(from._internal_conversations());
  if (!from._internal_owneruserid().empty()) {
    _this->_internal_set_owneruserid(from._internal_owneruserid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void batchSetConversationsReq::CopyFrom(const batchSetConversationsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.batchSetConversationsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool batchSetConversationsReq::IsInitialized() const {
  return true;
}

void batchSetConversationsReq::InternalSwap(batchSetConversationsReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_conversations()->InternalSwap(other->_internal_mutable_conversations());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owneruserid_, lhs_arena,
                                       &other->_impl_.owneruserid_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata batchSetConversationsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[9]);
}
// ===================================================================

class batchSetConversationsResp::_Internal {
 public:
};

batchSetConversationsResp::batchSetConversationsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.batchSetConversationsResp)
}
batchSetConversationsResp::batchSetConversationsResp(const batchSetConversationsResp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  batchSetConversationsResp* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.batchSetConversationsResp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData batchSetConversationsResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*batchSetConversationsResp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata batchSetConversationsResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[10]);
}
// ===================================================================

class createSingleChatConversationsReq::_Internal {
 public:
};

createSingleChatConversationsReq::createSingleChatConversationsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.createSingleChatConversationsReq)
}
createSingleChatConversationsReq::createSingleChatConversationsReq(const createSingleChatConversationsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  createSingleChatConversationsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.recvid_) {}

    , decltype(_impl_.sendid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.recvid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recvid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recvid().empty()) {
    _this->_impl_.recvid_.Set(from._internal_recvid(), _this->GetArenaForAllocation());
  }
  _impl_.sendid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sendid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sendid().empty()) {
    _this->_impl_.sendid_.Set(from._internal_sendid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.createSingleChatConversationsReq)
}

inline void createSingleChatConversationsReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.recvid_) {}

    , decltype(_impl_.sendid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.recvid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recvid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sendid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sendid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

createSingleChatConversationsReq::~createSingleChatConversationsReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.createSingleChatConversationsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void createSingleChatConversationsReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.recvid_.Destroy();
  _impl_.sendid_.Destroy();
}

void createSingleChatConversationsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void createSingleChatConversationsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.createSingleChatConversationsReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recvid_.ClearToEmpty();
  _impl_.sendid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* createSingleChatConversationsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string recvID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_recvid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.createSingleChatConversationsReq.recvID"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string sendID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sendid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.createSingleChatConversationsReq.sendID"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* createSingleChatConversationsReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.createSingleChatConversationsReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string recvID = 1;
  if (!this->_internal_recvid().empty()) {
    const std::string& _s = this->_internal_recvid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.createSingleChatConversationsReq.recvID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string sendID = 2;
  if (!this->_internal_sendid().empty()) {
    const std::string& _s = this->_internal_sendid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.createSingleChatConversationsReq.sendID");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.createSingleChatConversationsReq)
  return target;
}

::size_t createSingleChatConversationsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.createSingleChatConversationsReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string recvID = 1;
  if (!this->_internal_recvid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_recvid());
  }

  // string sendID = 2;
  if (!this->_internal_sendid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sendid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData createSingleChatConversationsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    createSingleChatConversationsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*createSingleChatConversationsReq::GetClassData() const { return &_class_data_; }


void createSingleChatConversationsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<createSingleChatConversationsReq*>(&to_msg);
  auto& from = static_cast<const createSingleChatConversationsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.createSingleChatConversationsReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_recvid().empty()) {
    _this->_internal_set_recvid(from._internal_recvid());
  }
  if (!from._internal_sendid().empty()) {
    _this->_internal_set_sendid(from._internal_sendid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void createSingleChatConversationsReq::CopyFrom(const createSingleChatConversationsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.createSingleChatConversationsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool createSingleChatConversationsReq::IsInitialized() const {
  return true;
}

void createSingleChatConversationsReq::InternalSwap(createSingleChatConversationsReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recvid_, lhs_arena,
                                       &other->_impl_.recvid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sendid_, lhs_arena,
                                       &other->_impl_.sendid_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata createSingleChatConversationsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[11]);
}
// ===================================================================

class createSingleChatConversationsResp::_Internal {
 public:
};

createSingleChatConversationsResp::createSingleChatConversationsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.createSingleChatConversationsResp)
}
createSingleChatConversationsResp::createSingleChatConversationsResp(const createSingleChatConversationsResp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  createSingleChatConversationsResp* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.createSingleChatConversationsResp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData createSingleChatConversationsResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*createSingleChatConversationsResp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata createSingleChatConversationsResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[12]);
}
// ===================================================================

class createGroupChatConversationsReq::_Internal {
 public:
};

createGroupChatConversationsReq::createGroupChatConversationsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.createGroupChatConversationsReq)
}
createGroupChatConversationsReq::createGroupChatConversationsReq(const createGroupChatConversationsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  createGroupChatConversationsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userids_){from._impl_.userids_}
    , decltype(_impl_.groupid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupid().empty()) {
    _this->_impl_.groupid_.Set(from._internal_groupid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.createGroupChatConversationsReq)
}

inline void createGroupChatConversationsReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.userids_){arena}
    , decltype(_impl_.groupid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

createGroupChatConversationsReq::~createGroupChatConversationsReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.createGroupChatConversationsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void createGroupChatConversationsReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_userids()->~RepeatedPtrField();
  _impl_.groupid_.Destroy();
}

void createGroupChatConversationsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void createGroupChatConversationsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.createGroupChatConversationsReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_userids()->Clear();
  _impl_.groupid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* createGroupChatConversationsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string userIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_userids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.createGroupChatConversationsReq.userIDs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string groupID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_groupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.createGroupChatConversationsReq.groupID"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* createGroupChatConversationsReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.createGroupChatConversationsReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string userIDs = 1;
  for (int i = 0, n = this->_internal_userids_size(); i < n; ++i) {
    const auto& s = this->_internal_userids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.createGroupChatConversationsReq.userIDs");
    target = stream->WriteString(1, s, target);
  }

  // string groupID = 2;
  if (!this->_internal_groupid().empty()) {
    const std::string& _s = this->_internal_groupid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.createGroupChatConversationsReq.groupID");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.createGroupChatConversationsReq)
  return target;
}

::size_t createGroupChatConversationsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.createGroupChatConversationsReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string userIDs = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_userids().size());
  for (int i = 0, n = _internal_userids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_userids().Get(i));
  }

  // string groupID = 2;
  if (!this->_internal_groupid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_groupid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData createGroupChatConversationsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    createGroupChatConversationsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*createGroupChatConversationsReq::GetClassData() const { return &_class_data_; }


void createGroupChatConversationsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<createGroupChatConversationsReq*>(&to_msg);
  auto& from = static_cast<const createGroupChatConversationsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.createGroupChatConversationsReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_userids()->MergeFrom(from._internal_userids());
  if (!from._internal_groupid().empty()) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void createGroupChatConversationsReq::CopyFrom(const createGroupChatConversationsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.createGroupChatConversationsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool createGroupChatConversationsReq::IsInitialized() const {
  return true;
}

void createGroupChatConversationsReq::InternalSwap(createGroupChatConversationsReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_userids()->InternalSwap(
      other->_internal_mutable_userids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.groupid_, lhs_arena,
                                       &other->_impl_.groupid_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata createGroupChatConversationsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[13]);
}
// ===================================================================

class createGroupChatConversationsResp::_Internal {
 public:
};

createGroupChatConversationsResp::createGroupChatConversationsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.createGroupChatConversationsResp)
}
createGroupChatConversationsResp::createGroupChatConversationsResp(const createGroupChatConversationsResp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  createGroupChatConversationsResp* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.createGroupChatConversationsResp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData createGroupChatConversationsResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*createGroupChatConversationsResp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata createGroupChatConversationsResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[14]);
}
// ===================================================================

class setConversationMaxSeqReq::_Internal {
 public:
};

setConversationMaxSeqReq::setConversationMaxSeqReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.setConversationMaxSeqReq)
}
setConversationMaxSeqReq::setConversationMaxSeqReq(const setConversationMaxSeqReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  setConversationMaxSeqReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owneruserid_){from._impl_.owneruserid_}
    , decltype(_impl_.conversationid_) {}

    , decltype(_impl_.maxseq_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.conversationid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversationid().empty()) {
    _this->_impl_.conversationid_.Set(from._internal_conversationid(), _this->GetArenaForAllocation());
  }
  _this->_impl_.maxseq_ = from._impl_.maxseq_;
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.setConversationMaxSeqReq)
}

inline void setConversationMaxSeqReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.owneruserid_){arena}
    , decltype(_impl_.conversationid_) {}

    , decltype(_impl_.maxseq_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.conversationid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.conversationid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

setConversationMaxSeqReq::~setConversationMaxSeqReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.setConversationMaxSeqReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void setConversationMaxSeqReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_owneruserid()->~RepeatedPtrField();
  _impl_.conversationid_.Destroy();
}

void setConversationMaxSeqReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void setConversationMaxSeqReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.setConversationMaxSeqReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_owneruserid()->Clear();
  _impl_.conversationid_.ClearToEmpty();
  _impl_.maxseq_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setConversationMaxSeqReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string conversationID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversationid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.setConversationMaxSeqReq.conversationID"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string ownerUserID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_owneruserid();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.setConversationMaxSeqReq.ownerUserID"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 maxSeq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.maxseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* setConversationMaxSeqReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.setConversationMaxSeqReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversationID = 1;
  if (!this->_internal_conversationid().empty()) {
    const std::string& _s = this->_internal_conversationid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.setConversationMaxSeqReq.conversationID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string ownerUserID = 2;
  for (int i = 0, n = this->_internal_owneruserid_size(); i < n; ++i) {
    const auto& s = this->_internal_owneruserid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.setConversationMaxSeqReq.ownerUserID");
    target = stream->WriteString(2, s, target);
  }

  // int64 maxSeq = 3;
  if (this->_internal_maxseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_maxseq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.setConversationMaxSeqReq)
  return target;
}

::size_t setConversationMaxSeqReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.setConversationMaxSeqReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ownerUserID = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_owneruserid().size());
  for (int i = 0, n = _internal_owneruserid().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_owneruserid().Get(i));
  }

  // string conversationID = 1;
  if (!this->_internal_conversationid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_conversationid());
  }

  // int64 maxSeq = 3;
  if (this->_internal_maxseq() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_maxseq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setConversationMaxSeqReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    setConversationMaxSeqReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setConversationMaxSeqReq::GetClassData() const { return &_class_data_; }


void setConversationMaxSeqReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<setConversationMaxSeqReq*>(&to_msg);
  auto& from = static_cast<const setConversationMaxSeqReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.setConversationMaxSeqReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_owneruserid()->MergeFrom(from._internal_owneruserid());
  if (!from._internal_conversationid().empty()) {
    _this->_internal_set_conversationid(from._internal_conversationid());
  }
  if (from._internal_maxseq() != 0) {
    _this->_internal_set_maxseq(from._internal_maxseq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setConversationMaxSeqReq::CopyFrom(const setConversationMaxSeqReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.setConversationMaxSeqReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setConversationMaxSeqReq::IsInitialized() const {
  return true;
}

void setConversationMaxSeqReq::InternalSwap(setConversationMaxSeqReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_owneruserid()->InternalSwap(
      other->_internal_mutable_owneruserid());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.conversationid_, lhs_arena,
                                       &other->_impl_.conversationid_, rhs_arena);

  swap(_impl_.maxseq_, other->_impl_.maxseq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setConversationMaxSeqReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[15]);
}
// ===================================================================

class setConversationMaxSeqResp::_Internal {
 public:
};

setConversationMaxSeqResp::setConversationMaxSeqResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.setConversationMaxSeqResp)
}
setConversationMaxSeqResp::setConversationMaxSeqResp(const setConversationMaxSeqResp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  setConversationMaxSeqResp* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.setConversationMaxSeqResp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setConversationMaxSeqResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setConversationMaxSeqResp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata setConversationMaxSeqResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[16]);
}
// ===================================================================

class getConversationIDsReq::_Internal {
 public:
};

getConversationIDsReq::getConversationIDsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.getConversationIDsReq)
}
getConversationIDsReq::getConversationIDsReq(const getConversationIDsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getConversationIDsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.getConversationIDsReq)
}

inline void getConversationIDsReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getConversationIDsReq::~getConversationIDsReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.getConversationIDsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getConversationIDsReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
}

void getConversationIDsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getConversationIDsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.getConversationIDsReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getConversationIDsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.getConversationIDsReq.userID"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getConversationIDsReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.getConversationIDsReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    const std::string& _s = this->_internal_userid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.getConversationIDsReq.userID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.getConversationIDsReq)
  return target;
}

::size_t getConversationIDsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.getConversationIDsReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getConversationIDsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getConversationIDsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getConversationIDsReq::GetClassData() const { return &_class_data_; }


void getConversationIDsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getConversationIDsReq*>(&to_msg);
  auto& from = static_cast<const getConversationIDsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.getConversationIDsReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getConversationIDsReq::CopyFrom(const getConversationIDsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.getConversationIDsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getConversationIDsReq::IsInitialized() const {
  return true;
}

void getConversationIDsReq::InternalSwap(getConversationIDsReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userid_, lhs_arena,
                                       &other->_impl_.userid_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata getConversationIDsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[17]);
}
// ===================================================================

class getConversationIDsResp::_Internal {
 public:
};

getConversationIDsResp::getConversationIDsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.getConversationIDsResp)
}
getConversationIDsResp::getConversationIDsResp(const getConversationIDsResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getConversationIDsResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversationids_){from._impl_.conversationids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.getConversationIDsResp)
}

inline void getConversationIDsResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.conversationids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

getConversationIDsResp::~getConversationIDsResp() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.getConversationIDsResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getConversationIDsResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_conversationids()->~RepeatedPtrField();
}

void getConversationIDsResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getConversationIDsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.getConversationIDsResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_conversationids()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getConversationIDsResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string conversationIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_conversationids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.getConversationIDsResp.conversationIDs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getConversationIDsResp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.getConversationIDsResp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string conversationIDs = 1;
  for (int i = 0, n = this->_internal_conversationids_size(); i < n; ++i) {
    const auto& s = this->_internal_conversationids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.getConversationIDsResp.conversationIDs");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.getConversationIDsResp)
  return target;
}

::size_t getConversationIDsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.getConversationIDsResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string conversationIDs = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_conversationids().size());
  for (int i = 0, n = _internal_conversationids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_conversationids().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getConversationIDsResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getConversationIDsResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getConversationIDsResp::GetClassData() const { return &_class_data_; }


void getConversationIDsResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getConversationIDsResp*>(&to_msg);
  auto& from = static_cast<const getConversationIDsResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.getConversationIDsResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_conversationids()->MergeFrom(from._internal_conversationids());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getConversationIDsResp::CopyFrom(const getConversationIDsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.getConversationIDsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getConversationIDsResp::IsInitialized() const {
  return true;
}

void getConversationIDsResp::InternalSwap(getConversationIDsResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_conversationids()->InternalSwap(
      other->_internal_mutable_conversationids());
}

::PROTOBUF_NAMESPACE_ID::Metadata getConversationIDsResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[18]);
}
// ===================================================================

class getUserConversationIDsHashReq::_Internal {
 public:
};

getUserConversationIDsHashReq::getUserConversationIDsHashReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.getUserConversationIDsHashReq)
}
getUserConversationIDsHashReq::getUserConversationIDsHashReq(const getUserConversationIDsHashReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getUserConversationIDsHashReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owneruserid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.owneruserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owneruserid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owneruserid().empty()) {
    _this->_impl_.owneruserid_.Set(from._internal_owneruserid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.getUserConversationIDsHashReq)
}

inline void getUserConversationIDsHashReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.owneruserid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.owneruserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owneruserid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getUserConversationIDsHashReq::~getUserConversationIDsHashReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.getUserConversationIDsHashReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getUserConversationIDsHashReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owneruserid_.Destroy();
}

void getUserConversationIDsHashReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getUserConversationIDsHashReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.getUserConversationIDsHashReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owneruserid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getUserConversationIDsHashReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ownerUserID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owneruserid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.getUserConversationIDsHashReq.ownerUserID"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getUserConversationIDsHashReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.getUserConversationIDsHashReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ownerUserID = 1;
  if (!this->_internal_owneruserid().empty()) {
    const std::string& _s = this->_internal_owneruserid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.getUserConversationIDsHashReq.ownerUserID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.getUserConversationIDsHashReq)
  return target;
}

::size_t getUserConversationIDsHashReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.getUserConversationIDsHashReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ownerUserID = 1;
  if (!this->_internal_owneruserid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_owneruserid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getUserConversationIDsHashReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getUserConversationIDsHashReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getUserConversationIDsHashReq::GetClassData() const { return &_class_data_; }


void getUserConversationIDsHashReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getUserConversationIDsHashReq*>(&to_msg);
  auto& from = static_cast<const getUserConversationIDsHashReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.getUserConversationIDsHashReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owneruserid().empty()) {
    _this->_internal_set_owneruserid(from._internal_owneruserid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getUserConversationIDsHashReq::CopyFrom(const getUserConversationIDsHashReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.getUserConversationIDsHashReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getUserConversationIDsHashReq::IsInitialized() const {
  return true;
}

void getUserConversationIDsHashReq::InternalSwap(getUserConversationIDsHashReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owneruserid_, lhs_arena,
                                       &other->_impl_.owneruserid_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata getUserConversationIDsHashReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[19]);
}
// ===================================================================

class getUserConversationIDsHashResp::_Internal {
 public:
};

getUserConversationIDsHashResp::getUserConversationIDsHashResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.getUserConversationIDsHashResp)
}
getUserConversationIDsHashResp::getUserConversationIDsHashResp(const getUserConversationIDsHashResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.getUserConversationIDsHashResp)
}

inline void getUserConversationIDsHashResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

getUserConversationIDsHashResp::~getUserConversationIDsHashResp() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.getUserConversationIDsHashResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getUserConversationIDsHashResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void getUserConversationIDsHashResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getUserConversationIDsHashResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.getUserConversationIDsHashResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getUserConversationIDsHashResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getUserConversationIDsHashResp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.getUserConversationIDsHashResp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hash = 1;
  if (this->_internal_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.getUserConversationIDsHashResp)
  return target;
}

::size_t getUserConversationIDsHashResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.getUserConversationIDsHashResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hash = 1;
  if (this->_internal_hash() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getUserConversationIDsHashResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getUserConversationIDsHashResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getUserConversationIDsHashResp::GetClassData() const { return &_class_data_; }


void getUserConversationIDsHashResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getUserConversationIDsHashResp*>(&to_msg);
  auto& from = static_cast<const getUserConversationIDsHashResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.getUserConversationIDsHashResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hash() != 0) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getUserConversationIDsHashResp::CopyFrom(const getUserConversationIDsHashResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.getUserConversationIDsHashResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getUserConversationIDsHashResp::IsInitialized() const {
  return true;
}

void getUserConversationIDsHashResp::InternalSwap(getUserConversationIDsHashResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.hash_, other->_impl_.hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getUserConversationIDsHashResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[20]);
}
// ===================================================================

class getConversationsByConversationIDReq::_Internal {
 public:
};

getConversationsByConversationIDReq::getConversationsByConversationIDReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.getConversationsByConversationIDReq)
}
getConversationsByConversationIDReq::getConversationsByConversationIDReq(const getConversationsByConversationIDReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getConversationsByConversationIDReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversationids_){from._impl_.conversationids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.getConversationsByConversationIDReq)
}

inline void getConversationsByConversationIDReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.conversationids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

getConversationsByConversationIDReq::~getConversationsByConversationIDReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.getConversationsByConversationIDReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getConversationsByConversationIDReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_conversationids()->~RepeatedPtrField();
}

void getConversationsByConversationIDReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getConversationsByConversationIDReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.getConversationsByConversationIDReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_conversationids()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getConversationsByConversationIDReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string conversationIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_conversationids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.conversation.getConversationsByConversationIDReq.conversationIDs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getConversationsByConversationIDReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.getConversationsByConversationIDReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string conversationIDs = 1;
  for (int i = 0, n = this->_internal_conversationids_size(); i < n; ++i) {
    const auto& s = this->_internal_conversationids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.conversation.getConversationsByConversationIDReq.conversationIDs");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.getConversationsByConversationIDReq)
  return target;
}

::size_t getConversationsByConversationIDReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.getConversationsByConversationIDReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string conversationIDs = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_conversationids().size());
  for (int i = 0, n = _internal_conversationids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_conversationids().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getConversationsByConversationIDReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getConversationsByConversationIDReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getConversationsByConversationIDReq::GetClassData() const { return &_class_data_; }


void getConversationsByConversationIDReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getConversationsByConversationIDReq*>(&to_msg);
  auto& from = static_cast<const getConversationsByConversationIDReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.getConversationsByConversationIDReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_conversationids()->MergeFrom(from._internal_conversationids());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getConversationsByConversationIDReq::CopyFrom(const getConversationsByConversationIDReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.getConversationsByConversationIDReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getConversationsByConversationIDReq::IsInitialized() const {
  return true;
}

void getConversationsByConversationIDReq::InternalSwap(getConversationsByConversationIDReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_conversationids()->InternalSwap(
      other->_internal_mutable_conversationids());
}

::PROTOBUF_NAMESPACE_ID::Metadata getConversationsByConversationIDReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[21]);
}
// ===================================================================

class getConversationsByConversationIDResp::_Internal {
 public:
};

getConversationsByConversationIDResp::getConversationsByConversationIDResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.conversation.getConversationsByConversationIDResp)
}
getConversationsByConversationIDResp::getConversationsByConversationIDResp(const getConversationsByConversationIDResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getConversationsByConversationIDResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversations_){from._impl_.conversations_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.conversation.getConversationsByConversationIDResp)
}

inline void getConversationsByConversationIDResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.conversations_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

getConversationsByConversationIDResp::~getConversationsByConversationIDResp() {
  // @@protoc_insertion_point(destructor:ServerRpc.conversation.getConversationsByConversationIDResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getConversationsByConversationIDResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_conversations()->~RepeatedPtrField();
}

void getConversationsByConversationIDResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getConversationsByConversationIDResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.conversation.getConversationsByConversationIDResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_conversations()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getConversationsByConversationIDResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ServerRpc.conversation.conversation conversations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conversations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* getConversationsByConversationIDResp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.conversation.getConversationsByConversationIDResp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerRpc.conversation.conversation conversations = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_conversations_size()); i < n; i++) {
    const auto& repfield = this->_internal_conversations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.conversation.getConversationsByConversationIDResp)
  return target;
}

::size_t getConversationsByConversationIDResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.conversation.getConversationsByConversationIDResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ServerRpc.conversation.conversation conversations = 1;
  total_size += 1UL * this->_internal_conversations_size();
  for (const auto& msg : this->_internal_conversations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getConversationsByConversationIDResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getConversationsByConversationIDResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getConversationsByConversationIDResp::GetClassData() const { return &_class_data_; }


void getConversationsByConversationIDResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getConversationsByConversationIDResp*>(&to_msg);
  auto& from = static_cast<const getConversationsByConversationIDResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.conversation.getConversationsByConversationIDResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_conversations()->MergeFrom(from._internal_conversations());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getConversationsByConversationIDResp::CopyFrom(const getConversationsByConversationIDResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.conversation.getConversationsByConversationIDResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getConversationsByConversationIDResp::IsInitialized() const {
  return true;
}

void getConversationsByConversationIDResp::InternalSwap(getConversationsByConversationIDResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_conversations()->InternalSwap(other->_internal_mutable_conversations());
}

::PROTOBUF_NAMESPACE_ID::Metadata getConversationsByConversationIDResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_conversation_2eproto_getter, &descriptor_table_conversation_2eproto_once,
      file_level_metadata_conversation_2eproto[22]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace conversation
}  // namespace ServerRpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::conversation*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::conversation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::conversation >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::setConversationReq*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::setConversationReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::setConversationReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::setConversationResp*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::setConversationResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::setConversationResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::getConversationReq*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::getConversationReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::getConversationReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::getConversationResp*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::getConversationResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::getConversationResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::getConversationsReq*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::getConversationsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::getConversationsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::getConversationsResp*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::getConversationsResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::getConversationsResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::getAllConversationsReq*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::getAllConversationsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::getAllConversationsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::getAllConversationsResp*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::getAllConversationsResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::getAllConversationsResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::batchSetConversationsReq*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::batchSetConversationsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::batchSetConversationsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::batchSetConversationsResp*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::batchSetConversationsResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::batchSetConversationsResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::createSingleChatConversationsReq*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::createSingleChatConversationsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::createSingleChatConversationsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::createSingleChatConversationsResp*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::createSingleChatConversationsResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::createSingleChatConversationsResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::createGroupChatConversationsReq*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::createGroupChatConversationsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::createGroupChatConversationsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::createGroupChatConversationsResp*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::createGroupChatConversationsResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::createGroupChatConversationsResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::setConversationMaxSeqReq*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::setConversationMaxSeqReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::setConversationMaxSeqReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::setConversationMaxSeqResp*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::setConversationMaxSeqResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::setConversationMaxSeqResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::getConversationIDsReq*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::getConversationIDsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::getConversationIDsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::getConversationIDsResp*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::getConversationIDsResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::getConversationIDsResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::getUserConversationIDsHashReq*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::getUserConversationIDsHashReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::getUserConversationIDsHashReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::getUserConversationIDsHashResp*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::getUserConversationIDsHashResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::getUserConversationIDsHashResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::getConversationsByConversationIDReq*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::getConversationsByConversationIDReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::getConversationsByConversationIDReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::conversation::getConversationsByConversationIDResp*
Arena::CreateMaybeMessage< ::ServerRpc::conversation::getConversationsByConversationIDResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::conversation::getConversationsByConversationIDResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
