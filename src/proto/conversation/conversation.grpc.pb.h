// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: conversation.proto
#ifndef GRPC_conversation_2eproto__INCLUDED
#define GRPC_conversation_2eproto__INCLUDED

#include "conversation.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ServerRpc {
namespace conversation {

class Conversation final {
 public:
  static constexpr char const* service_full_name() {
    return "ServerRpc.conversation.Conversation";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status setConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq& request, ::ServerRpc::conversation::setConversationResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::setConversationResp>> AsyncsetConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::setConversationResp>>(AsyncsetConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::setConversationResp>> PrepareAsyncsetConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::setConversationResp>>(PrepareAsyncsetConversationRaw(context, request, cq));
    }
    virtual ::grpc::Status getConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq& request, ::ServerRpc::conversation::getConversationResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationResp>> AsyncgetConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationResp>>(AsyncgetConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationResp>> PrepareAsyncgetConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationResp>>(PrepareAsyncgetConversationRaw(context, request, cq));
    }
    virtual ::grpc::Status getConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq& request, ::ServerRpc::conversation::getConversationsResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationsResp>> AsyncgetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationsResp>>(AsyncgetConversationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationsResp>> PrepareAsyncgetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationsResp>>(PrepareAsyncgetConversationsRaw(context, request, cq));
    }
    virtual ::grpc::Status getAllConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq& request, ::ServerRpc::conversation::getAllConversationsResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getAllConversationsResp>> AsyncgetAllConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getAllConversationsResp>>(AsyncgetAllConversationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getAllConversationsResp>> PrepareAsyncgetAllConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getAllConversationsResp>>(PrepareAsyncgetAllConversationsRaw(context, request, cq));
    }
    virtual ::grpc::Status batchSetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq& request, ::ServerRpc::conversation::batchSetConversationsResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::batchSetConversationsResp>> AsyncbatchSetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::batchSetConversationsResp>>(AsyncbatchSetConversationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::batchSetConversationsResp>> PrepareAsyncbatchSetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::batchSetConversationsResp>>(PrepareAsyncbatchSetConversationsRaw(context, request, cq));
    }
    virtual ::grpc::Status createSingleChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq& request, ::ServerRpc::conversation::createSingleChatConversationsResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::createSingleChatConversationsResp>> AsynccreateSingleChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::createSingleChatConversationsResp>>(AsynccreateSingleChatConversationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::createSingleChatConversationsResp>> PrepareAsynccreateSingleChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::createSingleChatConversationsResp>>(PrepareAsynccreateSingleChatConversationsRaw(context, request, cq));
    }
    virtual ::grpc::Status createGroupChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq& request, ::ServerRpc::conversation::createGroupChatConversationsResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::createGroupChatConversationsResp>> AsynccreateGroupChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::createGroupChatConversationsResp>>(AsynccreateGroupChatConversationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::createGroupChatConversationsResp>> PrepareAsynccreateGroupChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::createGroupChatConversationsResp>>(PrepareAsynccreateGroupChatConversationsRaw(context, request, cq));
    }
    virtual ::grpc::Status setConversationMaxSeq(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq& request, ::ServerRpc::conversation::setConversationMaxSeqResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::setConversationMaxSeqResp>> AsyncsetConversationMaxSeq(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::setConversationMaxSeqResp>>(AsyncsetConversationMaxSeqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::setConversationMaxSeqResp>> PrepareAsyncsetConversationMaxSeq(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::setConversationMaxSeqResp>>(PrepareAsyncsetConversationMaxSeqRaw(context, request, cq));
    }
    virtual ::grpc::Status getConversationIDs(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq& request, ::ServerRpc::conversation::getConversationIDsResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationIDsResp>> AsyncgetConversationIDs(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationIDsResp>>(AsyncgetConversationIDsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationIDsResp>> PrepareAsyncgetConversationIDs(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationIDsResp>>(PrepareAsyncgetConversationIDsRaw(context, request, cq));
    }
    virtual ::grpc::Status getUserConversationIDsHash(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq& request, ::ServerRpc::conversation::getUserConversationIDsHashResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getUserConversationIDsHashResp>> AsyncgetUserConversationIDsHash(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getUserConversationIDsHashResp>>(AsyncgetUserConversationIDsHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getUserConversationIDsHashResp>> PrepareAsyncgetUserConversationIDsHash(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getUserConversationIDsHashResp>>(PrepareAsyncgetUserConversationIDsHashRaw(context, request, cq));
    }
    virtual ::grpc::Status getConversationsByConversationID(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq& request, ::ServerRpc::conversation::getConversationsByConversationIDResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationsByConversationIDResp>> AsyncgetConversationsByConversationID(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationsByConversationIDResp>>(AsyncgetConversationsByConversationIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationsByConversationIDResp>> PrepareAsyncgetConversationsByConversationID(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationsByConversationIDResp>>(PrepareAsyncgetConversationsByConversationIDRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void setConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq* request, ::ServerRpc::conversation::setConversationResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq* request, ::ServerRpc::conversation::setConversationResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq* request, ::ServerRpc::conversation::getConversationResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq* request, ::ServerRpc::conversation::getConversationResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq* request, ::ServerRpc::conversation::getConversationsResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq* request, ::ServerRpc::conversation::getConversationsResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getAllConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq* request, ::ServerRpc::conversation::getAllConversationsResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getAllConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq* request, ::ServerRpc::conversation::getAllConversationsResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void batchSetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq* request, ::ServerRpc::conversation::batchSetConversationsResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void batchSetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq* request, ::ServerRpc::conversation::batchSetConversationsResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void createSingleChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq* request, ::ServerRpc::conversation::createSingleChatConversationsResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createSingleChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq* request, ::ServerRpc::conversation::createSingleChatConversationsResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void createGroupChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq* request, ::ServerRpc::conversation::createGroupChatConversationsResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createGroupChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq* request, ::ServerRpc::conversation::createGroupChatConversationsResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setConversationMaxSeq(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq* request, ::ServerRpc::conversation::setConversationMaxSeqResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setConversationMaxSeq(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq* request, ::ServerRpc::conversation::setConversationMaxSeqResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getConversationIDs(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq* request, ::ServerRpc::conversation::getConversationIDsResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getConversationIDs(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq* request, ::ServerRpc::conversation::getConversationIDsResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getUserConversationIDsHash(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq* request, ::ServerRpc::conversation::getUserConversationIDsHashResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getUserConversationIDsHash(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq* request, ::ServerRpc::conversation::getUserConversationIDsHashResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getConversationsByConversationID(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq* request, ::ServerRpc::conversation::getConversationsByConversationIDResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getConversationsByConversationID(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq* request, ::ServerRpc::conversation::getConversationsByConversationIDResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::setConversationResp>* AsyncsetConversationRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::setConversationResp>* PrepareAsyncsetConversationRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationResp>* AsyncgetConversationRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationResp>* PrepareAsyncgetConversationRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationsResp>* AsyncgetConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationsResp>* PrepareAsyncgetConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getAllConversationsResp>* AsyncgetAllConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getAllConversationsResp>* PrepareAsyncgetAllConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::batchSetConversationsResp>* AsyncbatchSetConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::batchSetConversationsResp>* PrepareAsyncbatchSetConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::createSingleChatConversationsResp>* AsynccreateSingleChatConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::createSingleChatConversationsResp>* PrepareAsynccreateSingleChatConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::createGroupChatConversationsResp>* AsynccreateGroupChatConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::createGroupChatConversationsResp>* PrepareAsynccreateGroupChatConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::setConversationMaxSeqResp>* AsyncsetConversationMaxSeqRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::setConversationMaxSeqResp>* PrepareAsyncsetConversationMaxSeqRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationIDsResp>* AsyncgetConversationIDsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationIDsResp>* PrepareAsyncgetConversationIDsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getUserConversationIDsHashResp>* AsyncgetUserConversationIDsHashRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getUserConversationIDsHashResp>* PrepareAsyncgetUserConversationIDsHashRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationsByConversationIDResp>* AsyncgetConversationsByConversationIDRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::conversation::getConversationsByConversationIDResp>* PrepareAsyncgetConversationsByConversationIDRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status setConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq& request, ::ServerRpc::conversation::setConversationResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationResp>> AsyncsetConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationResp>>(AsyncsetConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationResp>> PrepareAsyncsetConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationResp>>(PrepareAsyncsetConversationRaw(context, request, cq));
    }
    ::grpc::Status getConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq& request, ::ServerRpc::conversation::getConversationResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationResp>> AsyncgetConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationResp>>(AsyncgetConversationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationResp>> PrepareAsyncgetConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationResp>>(PrepareAsyncgetConversationRaw(context, request, cq));
    }
    ::grpc::Status getConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq& request, ::ServerRpc::conversation::getConversationsResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsResp>> AsyncgetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsResp>>(AsyncgetConversationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsResp>> PrepareAsyncgetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsResp>>(PrepareAsyncgetConversationsRaw(context, request, cq));
    }
    ::grpc::Status getAllConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq& request, ::ServerRpc::conversation::getAllConversationsResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getAllConversationsResp>> AsyncgetAllConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getAllConversationsResp>>(AsyncgetAllConversationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getAllConversationsResp>> PrepareAsyncgetAllConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getAllConversationsResp>>(PrepareAsyncgetAllConversationsRaw(context, request, cq));
    }
    ::grpc::Status batchSetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq& request, ::ServerRpc::conversation::batchSetConversationsResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::batchSetConversationsResp>> AsyncbatchSetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::batchSetConversationsResp>>(AsyncbatchSetConversationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::batchSetConversationsResp>> PrepareAsyncbatchSetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::batchSetConversationsResp>>(PrepareAsyncbatchSetConversationsRaw(context, request, cq));
    }
    ::grpc::Status createSingleChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq& request, ::ServerRpc::conversation::createSingleChatConversationsResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createSingleChatConversationsResp>> AsynccreateSingleChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createSingleChatConversationsResp>>(AsynccreateSingleChatConversationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createSingleChatConversationsResp>> PrepareAsynccreateSingleChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createSingleChatConversationsResp>>(PrepareAsynccreateSingleChatConversationsRaw(context, request, cq));
    }
    ::grpc::Status createGroupChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq& request, ::ServerRpc::conversation::createGroupChatConversationsResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createGroupChatConversationsResp>> AsynccreateGroupChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createGroupChatConversationsResp>>(AsynccreateGroupChatConversationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createGroupChatConversationsResp>> PrepareAsynccreateGroupChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createGroupChatConversationsResp>>(PrepareAsynccreateGroupChatConversationsRaw(context, request, cq));
    }
    ::grpc::Status setConversationMaxSeq(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq& request, ::ServerRpc::conversation::setConversationMaxSeqResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationMaxSeqResp>> AsyncsetConversationMaxSeq(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationMaxSeqResp>>(AsyncsetConversationMaxSeqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationMaxSeqResp>> PrepareAsyncsetConversationMaxSeq(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationMaxSeqResp>>(PrepareAsyncsetConversationMaxSeqRaw(context, request, cq));
    }
    ::grpc::Status getConversationIDs(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq& request, ::ServerRpc::conversation::getConversationIDsResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationIDsResp>> AsyncgetConversationIDs(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationIDsResp>>(AsyncgetConversationIDsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationIDsResp>> PrepareAsyncgetConversationIDs(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationIDsResp>>(PrepareAsyncgetConversationIDsRaw(context, request, cq));
    }
    ::grpc::Status getUserConversationIDsHash(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq& request, ::ServerRpc::conversation::getUserConversationIDsHashResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getUserConversationIDsHashResp>> AsyncgetUserConversationIDsHash(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getUserConversationIDsHashResp>>(AsyncgetUserConversationIDsHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getUserConversationIDsHashResp>> PrepareAsyncgetUserConversationIDsHash(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getUserConversationIDsHashResp>>(PrepareAsyncgetUserConversationIDsHashRaw(context, request, cq));
    }
    ::grpc::Status getConversationsByConversationID(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq& request, ::ServerRpc::conversation::getConversationsByConversationIDResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsByConversationIDResp>> AsyncgetConversationsByConversationID(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsByConversationIDResp>>(AsyncgetConversationsByConversationIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsByConversationIDResp>> PrepareAsyncgetConversationsByConversationID(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsByConversationIDResp>>(PrepareAsyncgetConversationsByConversationIDRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void setConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq* request, ::ServerRpc::conversation::setConversationResp* response, std::function<void(::grpc::Status)>) override;
      void setConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq* request, ::ServerRpc::conversation::setConversationResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq* request, ::ServerRpc::conversation::getConversationResp* response, std::function<void(::grpc::Status)>) override;
      void getConversation(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq* request, ::ServerRpc::conversation::getConversationResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq* request, ::ServerRpc::conversation::getConversationsResp* response, std::function<void(::grpc::Status)>) override;
      void getConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq* request, ::ServerRpc::conversation::getConversationsResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getAllConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq* request, ::ServerRpc::conversation::getAllConversationsResp* response, std::function<void(::grpc::Status)>) override;
      void getAllConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq* request, ::ServerRpc::conversation::getAllConversationsResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void batchSetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq* request, ::ServerRpc::conversation::batchSetConversationsResp* response, std::function<void(::grpc::Status)>) override;
      void batchSetConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq* request, ::ServerRpc::conversation::batchSetConversationsResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void createSingleChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq* request, ::ServerRpc::conversation::createSingleChatConversationsResp* response, std::function<void(::grpc::Status)>) override;
      void createSingleChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq* request, ::ServerRpc::conversation::createSingleChatConversationsResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void createGroupChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq* request, ::ServerRpc::conversation::createGroupChatConversationsResp* response, std::function<void(::grpc::Status)>) override;
      void createGroupChatConversations(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq* request, ::ServerRpc::conversation::createGroupChatConversationsResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setConversationMaxSeq(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq* request, ::ServerRpc::conversation::setConversationMaxSeqResp* response, std::function<void(::grpc::Status)>) override;
      void setConversationMaxSeq(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq* request, ::ServerRpc::conversation::setConversationMaxSeqResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getConversationIDs(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq* request, ::ServerRpc::conversation::getConversationIDsResp* response, std::function<void(::grpc::Status)>) override;
      void getConversationIDs(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq* request, ::ServerRpc::conversation::getConversationIDsResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getUserConversationIDsHash(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq* request, ::ServerRpc::conversation::getUserConversationIDsHashResp* response, std::function<void(::grpc::Status)>) override;
      void getUserConversationIDsHash(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq* request, ::ServerRpc::conversation::getUserConversationIDsHashResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getConversationsByConversationID(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq* request, ::ServerRpc::conversation::getConversationsByConversationIDResp* response, std::function<void(::grpc::Status)>) override;
      void getConversationsByConversationID(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq* request, ::ServerRpc::conversation::getConversationsByConversationIDResp* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationResp>* AsyncsetConversationRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationResp>* PrepareAsyncsetConversationRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationResp>* AsyncgetConversationRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationResp>* PrepareAsyncgetConversationRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsResp>* AsyncgetConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsResp>* PrepareAsyncgetConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getAllConversationsResp>* AsyncgetAllConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getAllConversationsResp>* PrepareAsyncgetAllConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getAllConversationsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::batchSetConversationsResp>* AsyncbatchSetConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::batchSetConversationsResp>* PrepareAsyncbatchSetConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::batchSetConversationsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createSingleChatConversationsResp>* AsynccreateSingleChatConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createSingleChatConversationsResp>* PrepareAsynccreateSingleChatConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createGroupChatConversationsResp>* AsynccreateGroupChatConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::createGroupChatConversationsResp>* PrepareAsynccreateGroupChatConversationsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationMaxSeqResp>* AsyncsetConversationMaxSeqRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::setConversationMaxSeqResp>* PrepareAsyncsetConversationMaxSeqRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationIDsResp>* AsyncgetConversationIDsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationIDsResp>* PrepareAsyncgetConversationIDsRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationIDsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getUserConversationIDsHashResp>* AsyncgetUserConversationIDsHashRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getUserConversationIDsHashResp>* PrepareAsyncgetUserConversationIDsHashRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsByConversationIDResp>* AsyncgetConversationsByConversationIDRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::conversation::getConversationsByConversationIDResp>* PrepareAsyncgetConversationsByConversationIDRaw(::grpc::ClientContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_setConversation_;
    const ::grpc::internal::RpcMethod rpcmethod_getConversation_;
    const ::grpc::internal::RpcMethod rpcmethod_getConversations_;
    const ::grpc::internal::RpcMethod rpcmethod_getAllConversations_;
    const ::grpc::internal::RpcMethod rpcmethod_batchSetConversations_;
    const ::grpc::internal::RpcMethod rpcmethod_createSingleChatConversations_;
    const ::grpc::internal::RpcMethod rpcmethod_createGroupChatConversations_;
    const ::grpc::internal::RpcMethod rpcmethod_setConversationMaxSeq_;
    const ::grpc::internal::RpcMethod rpcmethod_getConversationIDs_;
    const ::grpc::internal::RpcMethod rpcmethod_getUserConversationIDsHash_;
    const ::grpc::internal::RpcMethod rpcmethod_getConversationsByConversationID_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status setConversation(::grpc::ServerContext* context, const ::ServerRpc::conversation::setConversationReq* request, ::ServerRpc::conversation::setConversationResp* response);
    virtual ::grpc::Status getConversation(::grpc::ServerContext* context, const ::ServerRpc::conversation::getConversationReq* request, ::ServerRpc::conversation::getConversationResp* response);
    virtual ::grpc::Status getConversations(::grpc::ServerContext* context, const ::ServerRpc::conversation::getConversationsReq* request, ::ServerRpc::conversation::getConversationsResp* response);
    virtual ::grpc::Status getAllConversations(::grpc::ServerContext* context, const ::ServerRpc::conversation::getAllConversationsReq* request, ::ServerRpc::conversation::getAllConversationsResp* response);
    virtual ::grpc::Status batchSetConversations(::grpc::ServerContext* context, const ::ServerRpc::conversation::batchSetConversationsReq* request, ::ServerRpc::conversation::batchSetConversationsResp* response);
    virtual ::grpc::Status createSingleChatConversations(::grpc::ServerContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq* request, ::ServerRpc::conversation::createSingleChatConversationsResp* response);
    virtual ::grpc::Status createGroupChatConversations(::grpc::ServerContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq* request, ::ServerRpc::conversation::createGroupChatConversationsResp* response);
    virtual ::grpc::Status setConversationMaxSeq(::grpc::ServerContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq* request, ::ServerRpc::conversation::setConversationMaxSeqResp* response);
    virtual ::grpc::Status getConversationIDs(::grpc::ServerContext* context, const ::ServerRpc::conversation::getConversationIDsReq* request, ::ServerRpc::conversation::getConversationIDsResp* response);
    virtual ::grpc::Status getUserConversationIDsHash(::grpc::ServerContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq* request, ::ServerRpc::conversation::getUserConversationIDsHashResp* response);
    virtual ::grpc::Status getConversationsByConversationID(::grpc::ServerContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq* request, ::ServerRpc::conversation::getConversationsByConversationIDResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_setConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setConversation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_setConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setConversation(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::setConversationReq* /*request*/, ::ServerRpc::conversation::setConversationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetConversation(::grpc::ServerContext* context, ::ServerRpc::conversation::setConversationReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::conversation::setConversationResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getConversation() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversation(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationReq* /*request*/, ::ServerRpc::conversation::getConversationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConversation(::grpc::ServerContext* context, ::ServerRpc::conversation::getConversationReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::conversation::getConversationResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getConversations() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationsReq* /*request*/, ::ServerRpc::conversation::getConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConversations(::grpc::ServerContext* context, ::ServerRpc::conversation::getConversationsReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::conversation::getConversationsResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAllConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAllConversations() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getAllConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getAllConversationsReq* /*request*/, ::ServerRpc::conversation::getAllConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllConversations(::grpc::ServerContext* context, ::ServerRpc::conversation::getAllConversationsReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::conversation::getAllConversationsResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_batchSetConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_batchSetConversations() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_batchSetConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchSetConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::batchSetConversationsReq* /*request*/, ::ServerRpc::conversation::batchSetConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbatchSetConversations(::grpc::ServerContext* context, ::ServerRpc::conversation::batchSetConversationsReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::conversation::batchSetConversationsResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createSingleChatConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createSingleChatConversations() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_createSingleChatConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createSingleChatConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::createSingleChatConversationsReq* /*request*/, ::ServerRpc::conversation::createSingleChatConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateSingleChatConversations(::grpc::ServerContext* context, ::ServerRpc::conversation::createSingleChatConversationsReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::conversation::createSingleChatConversationsResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createGroupChatConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createGroupChatConversations() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_createGroupChatConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGroupChatConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::createGroupChatConversationsReq* /*request*/, ::ServerRpc::conversation::createGroupChatConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateGroupChatConversations(::grpc::ServerContext* context, ::ServerRpc::conversation::createGroupChatConversationsReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::conversation::createGroupChatConversationsResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setConversationMaxSeq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setConversationMaxSeq() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_setConversationMaxSeq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setConversationMaxSeq(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::setConversationMaxSeqReq* /*request*/, ::ServerRpc::conversation::setConversationMaxSeqResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetConversationMaxSeq(::grpc::ServerContext* context, ::ServerRpc::conversation::setConversationMaxSeqReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::conversation::setConversationMaxSeqResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getConversationIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getConversationIDs() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_getConversationIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversationIDs(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationIDsReq* /*request*/, ::ServerRpc::conversation::getConversationIDsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConversationIDs(::grpc::ServerContext* context, ::ServerRpc::conversation::getConversationIDsReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::conversation::getConversationIDsResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getUserConversationIDsHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getUserConversationIDsHash() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getUserConversationIDsHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUserConversationIDsHash(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getUserConversationIDsHashReq* /*request*/, ::ServerRpc::conversation::getUserConversationIDsHashResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetUserConversationIDsHash(::grpc::ServerContext* context, ::ServerRpc::conversation::getUserConversationIDsHashReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::conversation::getUserConversationIDsHashResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getConversationsByConversationID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getConversationsByConversationID() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_getConversationsByConversationID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversationsByConversationID(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationsByConversationIDReq* /*request*/, ::ServerRpc::conversation::getConversationsByConversationIDResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConversationsByConversationID(::grpc::ServerContext* context, ::ServerRpc::conversation::getConversationsByConversationIDReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::conversation::getConversationsByConversationIDResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_setConversation<WithAsyncMethod_getConversation<WithAsyncMethod_getConversations<WithAsyncMethod_getAllConversations<WithAsyncMethod_batchSetConversations<WithAsyncMethod_createSingleChatConversations<WithAsyncMethod_createGroupChatConversations<WithAsyncMethod_setConversationMaxSeq<WithAsyncMethod_getConversationIDs<WithAsyncMethod_getUserConversationIDsHash<WithAsyncMethod_getConversationsByConversationID<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_setConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setConversation() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::setConversationReq, ::ServerRpc::conversation::setConversationResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::conversation::setConversationReq* request, ::ServerRpc::conversation::setConversationResp* response) { return this->setConversation(context, request, response); }));}
    void SetMessageAllocatorFor_setConversation(
        ::grpc::MessageAllocator< ::ServerRpc::conversation::setConversationReq, ::ServerRpc::conversation::setConversationResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::setConversationReq, ::ServerRpc::conversation::setConversationResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setConversation(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::setConversationReq* /*request*/, ::ServerRpc::conversation::setConversationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::conversation::setConversationReq* /*request*/, ::ServerRpc::conversation::setConversationResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getConversation() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::getConversationReq, ::ServerRpc::conversation::getConversationResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::conversation::getConversationReq* request, ::ServerRpc::conversation::getConversationResp* response) { return this->getConversation(context, request, response); }));}
    void SetMessageAllocatorFor_getConversation(
        ::grpc::MessageAllocator< ::ServerRpc::conversation::getConversationReq, ::ServerRpc::conversation::getConversationResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::getConversationReq, ::ServerRpc::conversation::getConversationResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversation(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationReq* /*request*/, ::ServerRpc::conversation::getConversationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::conversation::getConversationReq* /*request*/, ::ServerRpc::conversation::getConversationResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getConversations() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::getConversationsReq, ::ServerRpc::conversation::getConversationsResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::conversation::getConversationsReq* request, ::ServerRpc::conversation::getConversationsResp* response) { return this->getConversations(context, request, response); }));}
    void SetMessageAllocatorFor_getConversations(
        ::grpc::MessageAllocator< ::ServerRpc::conversation::getConversationsReq, ::ServerRpc::conversation::getConversationsResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::getConversationsReq, ::ServerRpc::conversation::getConversationsResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationsReq* /*request*/, ::ServerRpc::conversation::getConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getConversations(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::conversation::getConversationsReq* /*request*/, ::ServerRpc::conversation::getConversationsResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getAllConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getAllConversations() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::getAllConversationsReq, ::ServerRpc::conversation::getAllConversationsResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::conversation::getAllConversationsReq* request, ::ServerRpc::conversation::getAllConversationsResp* response) { return this->getAllConversations(context, request, response); }));}
    void SetMessageAllocatorFor_getAllConversations(
        ::grpc::MessageAllocator< ::ServerRpc::conversation::getAllConversationsReq, ::ServerRpc::conversation::getAllConversationsResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::getAllConversationsReq, ::ServerRpc::conversation::getAllConversationsResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getAllConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getAllConversationsReq* /*request*/, ::ServerRpc::conversation::getAllConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAllConversations(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::conversation::getAllConversationsReq* /*request*/, ::ServerRpc::conversation::getAllConversationsResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_batchSetConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_batchSetConversations() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::batchSetConversationsReq, ::ServerRpc::conversation::batchSetConversationsResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::conversation::batchSetConversationsReq* request, ::ServerRpc::conversation::batchSetConversationsResp* response) { return this->batchSetConversations(context, request, response); }));}
    void SetMessageAllocatorFor_batchSetConversations(
        ::grpc::MessageAllocator< ::ServerRpc::conversation::batchSetConversationsReq, ::ServerRpc::conversation::batchSetConversationsResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::batchSetConversationsReq, ::ServerRpc::conversation::batchSetConversationsResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_batchSetConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchSetConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::batchSetConversationsReq* /*request*/, ::ServerRpc::conversation::batchSetConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* batchSetConversations(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::conversation::batchSetConversationsReq* /*request*/, ::ServerRpc::conversation::batchSetConversationsResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_createSingleChatConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createSingleChatConversations() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::createSingleChatConversationsReq, ::ServerRpc::conversation::createSingleChatConversationsResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::conversation::createSingleChatConversationsReq* request, ::ServerRpc::conversation::createSingleChatConversationsResp* response) { return this->createSingleChatConversations(context, request, response); }));}
    void SetMessageAllocatorFor_createSingleChatConversations(
        ::grpc::MessageAllocator< ::ServerRpc::conversation::createSingleChatConversationsReq, ::ServerRpc::conversation::createSingleChatConversationsResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::createSingleChatConversationsReq, ::ServerRpc::conversation::createSingleChatConversationsResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createSingleChatConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createSingleChatConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::createSingleChatConversationsReq* /*request*/, ::ServerRpc::conversation::createSingleChatConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createSingleChatConversations(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::conversation::createSingleChatConversationsReq* /*request*/, ::ServerRpc::conversation::createSingleChatConversationsResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_createGroupChatConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createGroupChatConversations() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::createGroupChatConversationsReq, ::ServerRpc::conversation::createGroupChatConversationsResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::conversation::createGroupChatConversationsReq* request, ::ServerRpc::conversation::createGroupChatConversationsResp* response) { return this->createGroupChatConversations(context, request, response); }));}
    void SetMessageAllocatorFor_createGroupChatConversations(
        ::grpc::MessageAllocator< ::ServerRpc::conversation::createGroupChatConversationsReq, ::ServerRpc::conversation::createGroupChatConversationsResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::createGroupChatConversationsReq, ::ServerRpc::conversation::createGroupChatConversationsResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createGroupChatConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGroupChatConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::createGroupChatConversationsReq* /*request*/, ::ServerRpc::conversation::createGroupChatConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createGroupChatConversations(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::conversation::createGroupChatConversationsReq* /*request*/, ::ServerRpc::conversation::createGroupChatConversationsResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setConversationMaxSeq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setConversationMaxSeq() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::setConversationMaxSeqReq, ::ServerRpc::conversation::setConversationMaxSeqResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::conversation::setConversationMaxSeqReq* request, ::ServerRpc::conversation::setConversationMaxSeqResp* response) { return this->setConversationMaxSeq(context, request, response); }));}
    void SetMessageAllocatorFor_setConversationMaxSeq(
        ::grpc::MessageAllocator< ::ServerRpc::conversation::setConversationMaxSeqReq, ::ServerRpc::conversation::setConversationMaxSeqResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::setConversationMaxSeqReq, ::ServerRpc::conversation::setConversationMaxSeqResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setConversationMaxSeq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setConversationMaxSeq(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::setConversationMaxSeqReq* /*request*/, ::ServerRpc::conversation::setConversationMaxSeqResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setConversationMaxSeq(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::conversation::setConversationMaxSeqReq* /*request*/, ::ServerRpc::conversation::setConversationMaxSeqResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getConversationIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getConversationIDs() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::getConversationIDsReq, ::ServerRpc::conversation::getConversationIDsResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::conversation::getConversationIDsReq* request, ::ServerRpc::conversation::getConversationIDsResp* response) { return this->getConversationIDs(context, request, response); }));}
    void SetMessageAllocatorFor_getConversationIDs(
        ::grpc::MessageAllocator< ::ServerRpc::conversation::getConversationIDsReq, ::ServerRpc::conversation::getConversationIDsResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::getConversationIDsReq, ::ServerRpc::conversation::getConversationIDsResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getConversationIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversationIDs(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationIDsReq* /*request*/, ::ServerRpc::conversation::getConversationIDsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getConversationIDs(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::conversation::getConversationIDsReq* /*request*/, ::ServerRpc::conversation::getConversationIDsResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getUserConversationIDsHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getUserConversationIDsHash() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::getUserConversationIDsHashReq, ::ServerRpc::conversation::getUserConversationIDsHashResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::conversation::getUserConversationIDsHashReq* request, ::ServerRpc::conversation::getUserConversationIDsHashResp* response) { return this->getUserConversationIDsHash(context, request, response); }));}
    void SetMessageAllocatorFor_getUserConversationIDsHash(
        ::grpc::MessageAllocator< ::ServerRpc::conversation::getUserConversationIDsHashReq, ::ServerRpc::conversation::getUserConversationIDsHashResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::getUserConversationIDsHashReq, ::ServerRpc::conversation::getUserConversationIDsHashResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getUserConversationIDsHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUserConversationIDsHash(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getUserConversationIDsHashReq* /*request*/, ::ServerRpc::conversation::getUserConversationIDsHashResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getUserConversationIDsHash(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::conversation::getUserConversationIDsHashReq* /*request*/, ::ServerRpc::conversation::getUserConversationIDsHashResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getConversationsByConversationID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getConversationsByConversationID() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::getConversationsByConversationIDReq, ::ServerRpc::conversation::getConversationsByConversationIDResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::conversation::getConversationsByConversationIDReq* request, ::ServerRpc::conversation::getConversationsByConversationIDResp* response) { return this->getConversationsByConversationID(context, request, response); }));}
    void SetMessageAllocatorFor_getConversationsByConversationID(
        ::grpc::MessageAllocator< ::ServerRpc::conversation::getConversationsByConversationIDReq, ::ServerRpc::conversation::getConversationsByConversationIDResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::conversation::getConversationsByConversationIDReq, ::ServerRpc::conversation::getConversationsByConversationIDResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getConversationsByConversationID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversationsByConversationID(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationsByConversationIDReq* /*request*/, ::ServerRpc::conversation::getConversationsByConversationIDResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getConversationsByConversationID(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::conversation::getConversationsByConversationIDReq* /*request*/, ::ServerRpc::conversation::getConversationsByConversationIDResp* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_setConversation<WithCallbackMethod_getConversation<WithCallbackMethod_getConversations<WithCallbackMethod_getAllConversations<WithCallbackMethod_batchSetConversations<WithCallbackMethod_createSingleChatConversations<WithCallbackMethod_createGroupChatConversations<WithCallbackMethod_setConversationMaxSeq<WithCallbackMethod_getConversationIDs<WithCallbackMethod_getUserConversationIDsHash<WithCallbackMethod_getConversationsByConversationID<Service > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_setConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setConversation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_setConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setConversation(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::setConversationReq* /*request*/, ::ServerRpc::conversation::setConversationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getConversation() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversation(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationReq* /*request*/, ::ServerRpc::conversation::getConversationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getConversations() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationsReq* /*request*/, ::ServerRpc::conversation::getConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAllConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAllConversations() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getAllConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getAllConversationsReq* /*request*/, ::ServerRpc::conversation::getAllConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_batchSetConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_batchSetConversations() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_batchSetConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchSetConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::batchSetConversationsReq* /*request*/, ::ServerRpc::conversation::batchSetConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createSingleChatConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createSingleChatConversations() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_createSingleChatConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createSingleChatConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::createSingleChatConversationsReq* /*request*/, ::ServerRpc::conversation::createSingleChatConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createGroupChatConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createGroupChatConversations() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_createGroupChatConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGroupChatConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::createGroupChatConversationsReq* /*request*/, ::ServerRpc::conversation::createGroupChatConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setConversationMaxSeq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setConversationMaxSeq() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_setConversationMaxSeq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setConversationMaxSeq(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::setConversationMaxSeqReq* /*request*/, ::ServerRpc::conversation::setConversationMaxSeqResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getConversationIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getConversationIDs() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_getConversationIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversationIDs(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationIDsReq* /*request*/, ::ServerRpc::conversation::getConversationIDsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getUserConversationIDsHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getUserConversationIDsHash() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getUserConversationIDsHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUserConversationIDsHash(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getUserConversationIDsHashReq* /*request*/, ::ServerRpc::conversation::getUserConversationIDsHashResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getConversationsByConversationID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getConversationsByConversationID() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_getConversationsByConversationID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversationsByConversationID(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationsByConversationIDReq* /*request*/, ::ServerRpc::conversation::getConversationsByConversationIDResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_setConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setConversation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_setConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setConversation(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::setConversationReq* /*request*/, ::ServerRpc::conversation::setConversationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetConversation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getConversation() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversation(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationReq* /*request*/, ::ServerRpc::conversation::getConversationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConversation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getConversations() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationsReq* /*request*/, ::ServerRpc::conversation::getConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConversations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAllConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAllConversations() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getAllConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getAllConversationsReq* /*request*/, ::ServerRpc::conversation::getAllConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllConversations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_batchSetConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_batchSetConversations() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_batchSetConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchSetConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::batchSetConversationsReq* /*request*/, ::ServerRpc::conversation::batchSetConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbatchSetConversations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createSingleChatConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createSingleChatConversations() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_createSingleChatConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createSingleChatConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::createSingleChatConversationsReq* /*request*/, ::ServerRpc::conversation::createSingleChatConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateSingleChatConversations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createGroupChatConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createGroupChatConversations() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_createGroupChatConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGroupChatConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::createGroupChatConversationsReq* /*request*/, ::ServerRpc::conversation::createGroupChatConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateGroupChatConversations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setConversationMaxSeq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setConversationMaxSeq() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_setConversationMaxSeq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setConversationMaxSeq(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::setConversationMaxSeqReq* /*request*/, ::ServerRpc::conversation::setConversationMaxSeqResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetConversationMaxSeq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getConversationIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getConversationIDs() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_getConversationIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversationIDs(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationIDsReq* /*request*/, ::ServerRpc::conversation::getConversationIDsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConversationIDs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getUserConversationIDsHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getUserConversationIDsHash() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_getUserConversationIDsHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUserConversationIDsHash(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getUserConversationIDsHashReq* /*request*/, ::ServerRpc::conversation::getUserConversationIDsHashResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetUserConversationIDsHash(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getConversationsByConversationID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getConversationsByConversationID() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_getConversationsByConversationID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversationsByConversationID(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationsByConversationIDReq* /*request*/, ::ServerRpc::conversation::getConversationsByConversationIDResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConversationsByConversationID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setConversation() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setConversation(context, request, response); }));
    }
    ~WithRawCallbackMethod_setConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setConversation(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::setConversationReq* /*request*/, ::ServerRpc::conversation::setConversationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getConversation() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getConversation(context, request, response); }));
    }
    ~WithRawCallbackMethod_getConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversation(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationReq* /*request*/, ::ServerRpc::conversation::getConversationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getConversation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getConversations() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getConversations(context, request, response); }));
    }
    ~WithRawCallbackMethod_getConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationsReq* /*request*/, ::ServerRpc::conversation::getConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getConversations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getAllConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getAllConversations() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAllConversations(context, request, response); }));
    }
    ~WithRawCallbackMethod_getAllConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getAllConversationsReq* /*request*/, ::ServerRpc::conversation::getAllConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAllConversations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_batchSetConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_batchSetConversations() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->batchSetConversations(context, request, response); }));
    }
    ~WithRawCallbackMethod_batchSetConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batchSetConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::batchSetConversationsReq* /*request*/, ::ServerRpc::conversation::batchSetConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* batchSetConversations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createSingleChatConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createSingleChatConversations() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createSingleChatConversations(context, request, response); }));
    }
    ~WithRawCallbackMethod_createSingleChatConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createSingleChatConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::createSingleChatConversationsReq* /*request*/, ::ServerRpc::conversation::createSingleChatConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createSingleChatConversations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createGroupChatConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createGroupChatConversations() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createGroupChatConversations(context, request, response); }));
    }
    ~WithRawCallbackMethod_createGroupChatConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGroupChatConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::createGroupChatConversationsReq* /*request*/, ::ServerRpc::conversation::createGroupChatConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createGroupChatConversations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setConversationMaxSeq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setConversationMaxSeq() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setConversationMaxSeq(context, request, response); }));
    }
    ~WithRawCallbackMethod_setConversationMaxSeq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setConversationMaxSeq(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::setConversationMaxSeqReq* /*request*/, ::ServerRpc::conversation::setConversationMaxSeqResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setConversationMaxSeq(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getConversationIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getConversationIDs() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getConversationIDs(context, request, response); }));
    }
    ~WithRawCallbackMethod_getConversationIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversationIDs(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationIDsReq* /*request*/, ::ServerRpc::conversation::getConversationIDsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getConversationIDs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getUserConversationIDsHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getUserConversationIDsHash() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getUserConversationIDsHash(context, request, response); }));
    }
    ~WithRawCallbackMethod_getUserConversationIDsHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUserConversationIDsHash(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getUserConversationIDsHashReq* /*request*/, ::ServerRpc::conversation::getUserConversationIDsHashResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getUserConversationIDsHash(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getConversationsByConversationID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getConversationsByConversationID() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getConversationsByConversationID(context, request, response); }));
    }
    ~WithRawCallbackMethod_getConversationsByConversationID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConversationsByConversationID(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationsByConversationIDReq* /*request*/, ::ServerRpc::conversation::getConversationsByConversationIDResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getConversationsByConversationID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setConversation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::conversation::setConversationReq, ::ServerRpc::conversation::setConversationResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::conversation::setConversationReq, ::ServerRpc::conversation::setConversationResp>* streamer) {
                       return this->StreamedsetConversation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setConversation(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::setConversationReq* /*request*/, ::ServerRpc::conversation::setConversationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetConversation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::conversation::setConversationReq,::ServerRpc::conversation::setConversationResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getConversation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getConversation() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::conversation::getConversationReq, ::ServerRpc::conversation::getConversationResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::conversation::getConversationReq, ::ServerRpc::conversation::getConversationResp>* streamer) {
                       return this->StreamedgetConversation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getConversation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getConversation(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationReq* /*request*/, ::ServerRpc::conversation::getConversationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetConversation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::conversation::getConversationReq,::ServerRpc::conversation::getConversationResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getConversations() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::conversation::getConversationsReq, ::ServerRpc::conversation::getConversationsResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::conversation::getConversationsReq, ::ServerRpc::conversation::getConversationsResp>* streamer) {
                       return this->StreamedgetConversations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationsReq* /*request*/, ::ServerRpc::conversation::getConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetConversations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::conversation::getConversationsReq,::ServerRpc::conversation::getConversationsResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAllConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAllConversations() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::conversation::getAllConversationsReq, ::ServerRpc::conversation::getAllConversationsResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::conversation::getAllConversationsReq, ::ServerRpc::conversation::getAllConversationsResp>* streamer) {
                       return this->StreamedgetAllConversations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAllConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAllConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getAllConversationsReq* /*request*/, ::ServerRpc::conversation::getAllConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAllConversations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::conversation::getAllConversationsReq,::ServerRpc::conversation::getAllConversationsResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_batchSetConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_batchSetConversations() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::conversation::batchSetConversationsReq, ::ServerRpc::conversation::batchSetConversationsResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::conversation::batchSetConversationsReq, ::ServerRpc::conversation::batchSetConversationsResp>* streamer) {
                       return this->StreamedbatchSetConversations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_batchSetConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status batchSetConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::batchSetConversationsReq* /*request*/, ::ServerRpc::conversation::batchSetConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedbatchSetConversations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::conversation::batchSetConversationsReq,::ServerRpc::conversation::batchSetConversationsResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createSingleChatConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createSingleChatConversations() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::conversation::createSingleChatConversationsReq, ::ServerRpc::conversation::createSingleChatConversationsResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::conversation::createSingleChatConversationsReq, ::ServerRpc::conversation::createSingleChatConversationsResp>* streamer) {
                       return this->StreamedcreateSingleChatConversations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createSingleChatConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createSingleChatConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::createSingleChatConversationsReq* /*request*/, ::ServerRpc::conversation::createSingleChatConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateSingleChatConversations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::conversation::createSingleChatConversationsReq,::ServerRpc::conversation::createSingleChatConversationsResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createGroupChatConversations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createGroupChatConversations() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::conversation::createGroupChatConversationsReq, ::ServerRpc::conversation::createGroupChatConversationsResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::conversation::createGroupChatConversationsReq, ::ServerRpc::conversation::createGroupChatConversationsResp>* streamer) {
                       return this->StreamedcreateGroupChatConversations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createGroupChatConversations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createGroupChatConversations(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::createGroupChatConversationsReq* /*request*/, ::ServerRpc::conversation::createGroupChatConversationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateGroupChatConversations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::conversation::createGroupChatConversationsReq,::ServerRpc::conversation::createGroupChatConversationsResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setConversationMaxSeq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setConversationMaxSeq() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::conversation::setConversationMaxSeqReq, ::ServerRpc::conversation::setConversationMaxSeqResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::conversation::setConversationMaxSeqReq, ::ServerRpc::conversation::setConversationMaxSeqResp>* streamer) {
                       return this->StreamedsetConversationMaxSeq(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setConversationMaxSeq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setConversationMaxSeq(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::setConversationMaxSeqReq* /*request*/, ::ServerRpc::conversation::setConversationMaxSeqResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetConversationMaxSeq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::conversation::setConversationMaxSeqReq,::ServerRpc::conversation::setConversationMaxSeqResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getConversationIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getConversationIDs() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::conversation::getConversationIDsReq, ::ServerRpc::conversation::getConversationIDsResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::conversation::getConversationIDsReq, ::ServerRpc::conversation::getConversationIDsResp>* streamer) {
                       return this->StreamedgetConversationIDs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getConversationIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getConversationIDs(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationIDsReq* /*request*/, ::ServerRpc::conversation::getConversationIDsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetConversationIDs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::conversation::getConversationIDsReq,::ServerRpc::conversation::getConversationIDsResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getUserConversationIDsHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getUserConversationIDsHash() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::conversation::getUserConversationIDsHashReq, ::ServerRpc::conversation::getUserConversationIDsHashResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::conversation::getUserConversationIDsHashReq, ::ServerRpc::conversation::getUserConversationIDsHashResp>* streamer) {
                       return this->StreamedgetUserConversationIDsHash(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getUserConversationIDsHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getUserConversationIDsHash(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getUserConversationIDsHashReq* /*request*/, ::ServerRpc::conversation::getUserConversationIDsHashResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetUserConversationIDsHash(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::conversation::getUserConversationIDsHashReq,::ServerRpc::conversation::getUserConversationIDsHashResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getConversationsByConversationID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getConversationsByConversationID() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::conversation::getConversationsByConversationIDReq, ::ServerRpc::conversation::getConversationsByConversationIDResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::conversation::getConversationsByConversationIDReq, ::ServerRpc::conversation::getConversationsByConversationIDResp>* streamer) {
                       return this->StreamedgetConversationsByConversationID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getConversationsByConversationID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getConversationsByConversationID(::grpc::ServerContext* /*context*/, const ::ServerRpc::conversation::getConversationsByConversationIDReq* /*request*/, ::ServerRpc::conversation::getConversationsByConversationIDResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetConversationsByConversationID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::conversation::getConversationsByConversationIDReq,::ServerRpc::conversation::getConversationsByConversationIDResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_setConversation<WithStreamedUnaryMethod_getConversation<WithStreamedUnaryMethod_getConversations<WithStreamedUnaryMethod_getAllConversations<WithStreamedUnaryMethod_batchSetConversations<WithStreamedUnaryMethod_createSingleChatConversations<WithStreamedUnaryMethod_createGroupChatConversations<WithStreamedUnaryMethod_setConversationMaxSeq<WithStreamedUnaryMethod_getConversationIDs<WithStreamedUnaryMethod_getUserConversationIDsHash<WithStreamedUnaryMethod_getConversationsByConversationID<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_setConversation<WithStreamedUnaryMethod_getConversation<WithStreamedUnaryMethod_getConversations<WithStreamedUnaryMethod_getAllConversations<WithStreamedUnaryMethod_batchSetConversations<WithStreamedUnaryMethod_createSingleChatConversations<WithStreamedUnaryMethod_createGroupChatConversations<WithStreamedUnaryMethod_setConversationMaxSeq<WithStreamedUnaryMethod_getConversationIDs<WithStreamedUnaryMethod_getUserConversationIDsHash<WithStreamedUnaryMethod_getConversationsByConversationID<Service > > > > > > > > > > > StreamedService;
};

}  // namespace conversation
}  // namespace ServerRpc


#endif  // GRPC_conversation_2eproto__INCLUDED
