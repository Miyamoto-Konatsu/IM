// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#include "auth.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ServerRpc {
namespace auth {
template <typename>
PROTOBUF_CONSTEXPR userTokenReq::userTokenReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.secret_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.userid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.password_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.platformid_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct userTokenReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR userTokenReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~userTokenReqDefaultTypeInternal() {}
  union {
    userTokenReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 userTokenReqDefaultTypeInternal _userTokenReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR userTokenResp::userTokenResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.expiretimeseconds_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct userTokenRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR userTokenRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~userTokenRespDefaultTypeInternal() {}
  union {
    userTokenResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 userTokenRespDefaultTypeInternal _userTokenResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR forceLogoutReq::forceLogoutReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.platformid_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct forceLogoutReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR forceLogoutReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~forceLogoutReqDefaultTypeInternal() {}
  union {
    forceLogoutReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 forceLogoutReqDefaultTypeInternal _forceLogoutReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR forceLogoutResp::forceLogoutResp(
    ::_pbi::ConstantInitialized) {}
struct forceLogoutRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR forceLogoutRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~forceLogoutRespDefaultTypeInternal() {}
  union {
    forceLogoutResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 forceLogoutRespDefaultTypeInternal _forceLogoutResp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR parseTokenReq::parseTokenReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct parseTokenReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR parseTokenReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~parseTokenReqDefaultTypeInternal() {}
  union {
    parseTokenReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 parseTokenReqDefaultTypeInternal _parseTokenReq_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR parseTokenResp::parseTokenResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.expiretimeseconds_)*/ ::int64_t{0}

  , /*decltype(_impl_.platformid_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct parseTokenRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR parseTokenRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~parseTokenRespDefaultTypeInternal() {}
  union {
    parseTokenResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 parseTokenRespDefaultTypeInternal _parseTokenResp_default_instance_;
}  // namespace auth
}  // namespace ServerRpc
static ::_pb::Metadata file_level_metadata_auth_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_auth_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_auth_2eproto = nullptr;
const ::uint32_t TableStruct_auth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::userTokenReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::userTokenReq, _impl_.secret_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::userTokenReq, _impl_.platformid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::userTokenReq, _impl_.userid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::userTokenReq, _impl_.password_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::userTokenResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::userTokenResp, _impl_.token_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::userTokenResp, _impl_.expiretimeseconds_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::forceLogoutReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::forceLogoutReq, _impl_.platformid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::forceLogoutReq, _impl_.userid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::forceLogoutResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::parseTokenReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::parseTokenReq, _impl_.token_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::parseTokenResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::parseTokenResp, _impl_.userid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::parseTokenResp, _impl_.platformid_),
    PROTOBUF_FIELD_OFFSET(::ServerRpc::auth::parseTokenResp, _impl_.expiretimeseconds_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ServerRpc::auth::userTokenReq)},
        { 12, -1, -1, sizeof(::ServerRpc::auth::userTokenResp)},
        { 22, -1, -1, sizeof(::ServerRpc::auth::forceLogoutReq)},
        { 32, -1, -1, sizeof(::ServerRpc::auth::forceLogoutResp)},
        { 40, -1, -1, sizeof(::ServerRpc::auth::parseTokenReq)},
        { 49, -1, -1, sizeof(::ServerRpc::auth::parseTokenResp)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ServerRpc::auth::_userTokenReq_default_instance_._instance,
    &::ServerRpc::auth::_userTokenResp_default_instance_._instance,
    &::ServerRpc::auth::_forceLogoutReq_default_instance_._instance,
    &::ServerRpc::auth::_forceLogoutResp_default_instance_._instance,
    &::ServerRpc::auth::_parseTokenReq_default_instance_._instance,
    &::ServerRpc::auth::_parseTokenResp_default_instance_._instance,
};
const char descriptor_table_protodef_auth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nauth.proto\022\016ServerRpc.auth\"T\n\014userToke"
    "nReq\022\016\n\006secret\030\001 \001(\t\022\022\n\nplatformID\030\002 \001(\005"
    "\022\016\n\006userID\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\"9\n\rus"
    "erTokenResp\022\r\n\005token\030\002 \001(\t\022\031\n\021expireTime"
    "Seconds\030\003 \001(\003\"4\n\016forceLogoutReq\022\022\n\nplatf"
    "ormID\030\001 \001(\005\022\016\n\006userID\030\002 \001(\t\"\021\n\017forceLogo"
    "utResp\"\036\n\rparseTokenReq\022\r\n\005token\030\001 \001(\t\"O"
    "\n\016parseTokenResp\022\016\n\006userID\030\001 \001(\t\022\022\n\nplat"
    "formID\030\002 \001(\005\022\031\n\021expireTimeSeconds\030\004 \001(\0032"
    "\355\001\n\004Auth\022H\n\tuserToken\022\034.ServerRpc.auth.u"
    "serTokenReq\032\035.ServerRpc.auth.userTokenRe"
    "sp\022N\n\013forceLogout\022\036.ServerRpc.auth.force"
    "LogoutReq\032\037.ServerRpc.auth.forceLogoutRe"
    "sp\022K\n\nparseToken\022\035.ServerRpc.auth.parseT"
    "okenReq\032\036.ServerRpc.auth.parseTokenRespb"
    "\006proto3"
};
static ::absl::once_flag descriptor_table_auth_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_auth_2eproto = {
    false,
    false,
    607,
    descriptor_table_protodef_auth_2eproto,
    "auth.proto",
    &descriptor_table_auth_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_auth_2eproto::offsets,
    file_level_metadata_auth_2eproto,
    file_level_enum_descriptors_auth_2eproto,
    file_level_service_descriptors_auth_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_auth_2eproto_getter() {
  return &descriptor_table_auth_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_auth_2eproto(&descriptor_table_auth_2eproto);
namespace ServerRpc {
namespace auth {
// ===================================================================

class userTokenReq::_Internal {
 public:
};

userTokenReq::userTokenReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.auth.userTokenReq)
}
userTokenReq::userTokenReq(const userTokenReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  userTokenReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.secret_) {}

    , decltype(_impl_.userid_) {}

    , decltype(_impl_.password_) {}

    , decltype(_impl_.platformid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.secret_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret().empty()) {
    _this->_impl_.secret_.Set(from._internal_secret(), _this->GetArenaForAllocation());
  }
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), _this->GetArenaForAllocation());
  }
  _this->_impl_.platformid_ = from._impl_.platformid_;
  // @@protoc_insertion_point(copy_constructor:ServerRpc.auth.userTokenReq)
}

inline void userTokenReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.secret_) {}

    , decltype(_impl_.userid_) {}

    , decltype(_impl_.password_) {}

    , decltype(_impl_.platformid_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.secret_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

userTokenReq::~userTokenReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.auth.userTokenReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void userTokenReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.secret_.Destroy();
  _impl_.userid_.Destroy();
  _impl_.password_.Destroy();
}

void userTokenReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void userTokenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.auth.userTokenReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.secret_.ClearToEmpty();
  _impl_.userid_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.platformid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* userTokenReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string secret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.auth.userTokenReq.secret"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 platformID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.platformid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string userID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.auth.userTokenReq.userID"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.auth.userTokenReq.password"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* userTokenReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.auth.userTokenReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string secret = 1;
  if (!this->_internal_secret().empty()) {
    const std::string& _s = this->_internal_secret();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.auth.userTokenReq.secret");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 platformID = 2;
  if (this->_internal_platformid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_platformid(), target);
  }

  // string userID = 3;
  if (!this->_internal_userid().empty()) {
    const std::string& _s = this->_internal_userid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.auth.userTokenReq.userID");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    const std::string& _s = this->_internal_password();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.auth.userTokenReq.password");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.auth.userTokenReq)
  return target;
}

::size_t userTokenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.auth.userTokenReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string secret = 1;
  if (!this->_internal_secret().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_secret());
  }

  // string userID = 3;
  if (!this->_internal_userid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_userid());
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_password());
  }

  // int32 platformID = 2;
  if (this->_internal_platformid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_platformid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData userTokenReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    userTokenReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*userTokenReq::GetClassData() const { return &_class_data_; }


void userTokenReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<userTokenReq*>(&to_msg);
  auto& from = static_cast<const userTokenReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.auth.userTokenReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_secret().empty()) {
    _this->_internal_set_secret(from._internal_secret());
  }
  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_platformid() != 0) {
    _this->_internal_set_platformid(from._internal_platformid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void userTokenReq::CopyFrom(const userTokenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.auth.userTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool userTokenReq::IsInitialized() const {
  return true;
}

void userTokenReq::InternalSwap(userTokenReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.secret_, lhs_arena,
                                       &other->_impl_.secret_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userid_, lhs_arena,
                                       &other->_impl_.userid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, lhs_arena,
                                       &other->_impl_.password_, rhs_arena);

  swap(_impl_.platformid_, other->_impl_.platformid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata userTokenReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[0]);
}
// ===================================================================

class userTokenResp::_Internal {
 public:
};

userTokenResp::userTokenResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.auth.userTokenResp)
}
userTokenResp::userTokenResp(const userTokenResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  userTokenResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_) {}

    , decltype(_impl_.expiretimeseconds_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), _this->GetArenaForAllocation());
  }
  _this->_impl_.expiretimeseconds_ = from._impl_.expiretimeseconds_;
  // @@protoc_insertion_point(copy_constructor:ServerRpc.auth.userTokenResp)
}

inline void userTokenResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.token_) {}

    , decltype(_impl_.expiretimeseconds_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

userTokenResp::~userTokenResp() {
  // @@protoc_insertion_point(destructor:ServerRpc.auth.userTokenResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void userTokenResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void userTokenResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void userTokenResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.auth.userTokenResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.expiretimeseconds_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* userTokenResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.auth.userTokenResp.token"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 expireTimeSeconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.expiretimeseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* userTokenResp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.auth.userTokenResp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 2;
  if (!this->_internal_token().empty()) {
    const std::string& _s = this->_internal_token();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.auth.userTokenResp.token");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int64 expireTimeSeconds = 3;
  if (this->_internal_expiretimeseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_expiretimeseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.auth.userTokenResp)
  return target;
}

::size_t userTokenResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.auth.userTokenResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_token());
  }

  // int64 expireTimeSeconds = 3;
  if (this->_internal_expiretimeseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_expiretimeseconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData userTokenResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    userTokenResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*userTokenResp::GetClassData() const { return &_class_data_; }


void userTokenResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<userTokenResp*>(&to_msg);
  auto& from = static_cast<const userTokenResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.auth.userTokenResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_expiretimeseconds() != 0) {
    _this->_internal_set_expiretimeseconds(from._internal_expiretimeseconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void userTokenResp::CopyFrom(const userTokenResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.auth.userTokenResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool userTokenResp::IsInitialized() const {
  return true;
}

void userTokenResp::InternalSwap(userTokenResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.token_, lhs_arena,
                                       &other->_impl_.token_, rhs_arena);

  swap(_impl_.expiretimeseconds_, other->_impl_.expiretimeseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata userTokenResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[1]);
}
// ===================================================================

class forceLogoutReq::_Internal {
 public:
};

forceLogoutReq::forceLogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.auth.forceLogoutReq)
}
forceLogoutReq::forceLogoutReq(const forceLogoutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  forceLogoutReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_) {}

    , decltype(_impl_.platformid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), _this->GetArenaForAllocation());
  }
  _this->_impl_.platformid_ = from._impl_.platformid_;
  // @@protoc_insertion_point(copy_constructor:ServerRpc.auth.forceLogoutReq)
}

inline void forceLogoutReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_) {}

    , decltype(_impl_.platformid_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

forceLogoutReq::~forceLogoutReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.auth.forceLogoutReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void forceLogoutReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
}

void forceLogoutReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void forceLogoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.auth.forceLogoutReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _impl_.platformid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* forceLogoutReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 platformID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.platformid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string userID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.auth.forceLogoutReq.userID"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* forceLogoutReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.auth.forceLogoutReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 platformID = 1;
  if (this->_internal_platformid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_platformid(), target);
  }

  // string userID = 2;
  if (!this->_internal_userid().empty()) {
    const std::string& _s = this->_internal_userid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.auth.forceLogoutReq.userID");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.auth.forceLogoutReq)
  return target;
}

::size_t forceLogoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.auth.forceLogoutReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userID = 2;
  if (!this->_internal_userid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_userid());
  }

  // int32 platformID = 1;
  if (this->_internal_platformid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_platformid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData forceLogoutReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    forceLogoutReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*forceLogoutReq::GetClassData() const { return &_class_data_; }


void forceLogoutReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<forceLogoutReq*>(&to_msg);
  auto& from = static_cast<const forceLogoutReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.auth.forceLogoutReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (from._internal_platformid() != 0) {
    _this->_internal_set_platformid(from._internal_platformid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void forceLogoutReq::CopyFrom(const forceLogoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.auth.forceLogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool forceLogoutReq::IsInitialized() const {
  return true;
}

void forceLogoutReq::InternalSwap(forceLogoutReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userid_, lhs_arena,
                                       &other->_impl_.userid_, rhs_arena);

  swap(_impl_.platformid_, other->_impl_.platformid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata forceLogoutReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[2]);
}
// ===================================================================

class forceLogoutResp::_Internal {
 public:
};

forceLogoutResp::forceLogoutResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ServerRpc.auth.forceLogoutResp)
}
forceLogoutResp::forceLogoutResp(const forceLogoutResp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  forceLogoutResp* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerRpc.auth.forceLogoutResp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData forceLogoutResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*forceLogoutResp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata forceLogoutResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[3]);
}
// ===================================================================

class parseTokenReq::_Internal {
 public:
};

parseTokenReq::parseTokenReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.auth.parseTokenReq)
}
parseTokenReq::parseTokenReq(const parseTokenReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  parseTokenReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerRpc.auth.parseTokenReq)
}

inline void parseTokenReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.token_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

parseTokenReq::~parseTokenReq() {
  // @@protoc_insertion_point(destructor:ServerRpc.auth.parseTokenReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void parseTokenReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void parseTokenReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void parseTokenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.auth.parseTokenReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* parseTokenReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.auth.parseTokenReq.token"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* parseTokenReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.auth.parseTokenReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    const std::string& _s = this->_internal_token();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.auth.parseTokenReq.token");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.auth.parseTokenReq)
  return target;
}

::size_t parseTokenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.auth.parseTokenReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData parseTokenReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    parseTokenReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*parseTokenReq::GetClassData() const { return &_class_data_; }


void parseTokenReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<parseTokenReq*>(&to_msg);
  auto& from = static_cast<const parseTokenReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.auth.parseTokenReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void parseTokenReq::CopyFrom(const parseTokenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.auth.parseTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool parseTokenReq::IsInitialized() const {
  return true;
}

void parseTokenReq::InternalSwap(parseTokenReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.token_, lhs_arena,
                                       &other->_impl_.token_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata parseTokenReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[4]);
}
// ===================================================================

class parseTokenResp::_Internal {
 public:
};

parseTokenResp::parseTokenResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerRpc.auth.parseTokenResp)
}
parseTokenResp::parseTokenResp(const parseTokenResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  parseTokenResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_) {}

    , decltype(_impl_.expiretimeseconds_) {}

    , decltype(_impl_.platformid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.expiretimeseconds_, &from._impl_.expiretimeseconds_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.platformid_) -
    reinterpret_cast<char*>(&_impl_.expiretimeseconds_)) + sizeof(_impl_.platformid_));
  // @@protoc_insertion_point(copy_constructor:ServerRpc.auth.parseTokenResp)
}

inline void parseTokenResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_) {}

    , decltype(_impl_.expiretimeseconds_) { ::int64_t{0} }

    , decltype(_impl_.platformid_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

parseTokenResp::~parseTokenResp() {
  // @@protoc_insertion_point(destructor:ServerRpc.auth.parseTokenResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void parseTokenResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
}

void parseTokenResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void parseTokenResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerRpc.auth.parseTokenResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  ::memset(&_impl_.expiretimeseconds_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.platformid_) -
      reinterpret_cast<char*>(&_impl_.expiretimeseconds_)) + sizeof(_impl_.platformid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* parseTokenResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerRpc.auth.parseTokenResp.userID"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 platformID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.platformid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 expireTimeSeconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.expiretimeseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* parseTokenResp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRpc.auth.parseTokenResp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    const std::string& _s = this->_internal_userid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ServerRpc.auth.parseTokenResp.userID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 platformID = 2;
  if (this->_internal_platformid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_platformid(), target);
  }

  // int64 expireTimeSeconds = 4;
  if (this->_internal_expiretimeseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_expiretimeseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRpc.auth.parseTokenResp)
  return target;
}

::size_t parseTokenResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerRpc.auth.parseTokenResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_userid());
  }

  // int64 expireTimeSeconds = 4;
  if (this->_internal_expiretimeseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_expiretimeseconds());
  }

  // int32 platformID = 2;
  if (this->_internal_platformid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_platformid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData parseTokenResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    parseTokenResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*parseTokenResp::GetClassData() const { return &_class_data_; }


void parseTokenResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<parseTokenResp*>(&to_msg);
  auto& from = static_cast<const parseTokenResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerRpc.auth.parseTokenResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (from._internal_expiretimeseconds() != 0) {
    _this->_internal_set_expiretimeseconds(from._internal_expiretimeseconds());
  }
  if (from._internal_platformid() != 0) {
    _this->_internal_set_platformid(from._internal_platformid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void parseTokenResp::CopyFrom(const parseTokenResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerRpc.auth.parseTokenResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool parseTokenResp::IsInitialized() const {
  return true;
}

void parseTokenResp::InternalSwap(parseTokenResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userid_, lhs_arena,
                                       &other->_impl_.userid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(parseTokenResp, _impl_.platformid_)
      + sizeof(parseTokenResp::_impl_.platformid_)
      - PROTOBUF_FIELD_OFFSET(parseTokenResp, _impl_.expiretimeseconds_)>(
          reinterpret_cast<char*>(&_impl_.expiretimeseconds_),
          reinterpret_cast<char*>(&other->_impl_.expiretimeseconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata parseTokenResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace auth
}  // namespace ServerRpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServerRpc::auth::userTokenReq*
Arena::CreateMaybeMessage< ::ServerRpc::auth::userTokenReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::auth::userTokenReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::auth::userTokenResp*
Arena::CreateMaybeMessage< ::ServerRpc::auth::userTokenResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::auth::userTokenResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::auth::forceLogoutReq*
Arena::CreateMaybeMessage< ::ServerRpc::auth::forceLogoutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::auth::forceLogoutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::auth::forceLogoutResp*
Arena::CreateMaybeMessage< ::ServerRpc::auth::forceLogoutResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::auth::forceLogoutResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::auth::parseTokenReq*
Arena::CreateMaybeMessage< ::ServerRpc::auth::parseTokenReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::auth::parseTokenReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerRpc::auth::parseTokenResp*
Arena::CreateMaybeMessage< ::ServerRpc::auth::parseTokenResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerRpc::auth::parseTokenResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
