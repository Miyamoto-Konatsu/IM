// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: auth.proto
#ifndef GRPC_auth_2eproto__INCLUDED
#define GRPC_auth_2eproto__INCLUDED

#include "auth.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ServerRpc {
namespace auth {

class Auth final {
 public:
  static constexpr char const* service_full_name() {
    return "ServerRpc.auth.Auth";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 生成token
    virtual ::grpc::Status userToken(::grpc::ClientContext* context, const ::ServerRpc::auth::userTokenReq& request, ::ServerRpc::auth::userTokenResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::userTokenResp>> AsyncuserToken(::grpc::ClientContext* context, const ::ServerRpc::auth::userTokenReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::userTokenResp>>(AsyncuserTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::userTokenResp>> PrepareAsyncuserToken(::grpc::ClientContext* context, const ::ServerRpc::auth::userTokenReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::userTokenResp>>(PrepareAsyncuserTokenRaw(context, request, cq));
    }
    // 强制退出登录
    virtual ::grpc::Status forceLogout(::grpc::ClientContext* context, const ::ServerRpc::auth::forceLogoutReq& request, ::ServerRpc::auth::forceLogoutResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::forceLogoutResp>> AsyncforceLogout(::grpc::ClientContext* context, const ::ServerRpc::auth::forceLogoutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::forceLogoutResp>>(AsyncforceLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::forceLogoutResp>> PrepareAsyncforceLogout(::grpc::ClientContext* context, const ::ServerRpc::auth::forceLogoutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::forceLogoutResp>>(PrepareAsyncforceLogoutRaw(context, request, cq));
    }
    // 解析token
    virtual ::grpc::Status parseToken(::grpc::ClientContext* context, const ::ServerRpc::auth::parseTokenReq& request, ::ServerRpc::auth::parseTokenResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::parseTokenResp>> AsyncparseToken(::grpc::ClientContext* context, const ::ServerRpc::auth::parseTokenReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::parseTokenResp>>(AsyncparseTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::parseTokenResp>> PrepareAsyncparseToken(::grpc::ClientContext* context, const ::ServerRpc::auth::parseTokenReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::parseTokenResp>>(PrepareAsyncparseTokenRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 生成token
      virtual void userToken(::grpc::ClientContext* context, const ::ServerRpc::auth::userTokenReq* request, ::ServerRpc::auth::userTokenResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void userToken(::grpc::ClientContext* context, const ::ServerRpc::auth::userTokenReq* request, ::ServerRpc::auth::userTokenResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 强制退出登录
      virtual void forceLogout(::grpc::ClientContext* context, const ::ServerRpc::auth::forceLogoutReq* request, ::ServerRpc::auth::forceLogoutResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void forceLogout(::grpc::ClientContext* context, const ::ServerRpc::auth::forceLogoutReq* request, ::ServerRpc::auth::forceLogoutResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 解析token
      virtual void parseToken(::grpc::ClientContext* context, const ::ServerRpc::auth::parseTokenReq* request, ::ServerRpc::auth::parseTokenResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void parseToken(::grpc::ClientContext* context, const ::ServerRpc::auth::parseTokenReq* request, ::ServerRpc::auth::parseTokenResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::userTokenResp>* AsyncuserTokenRaw(::grpc::ClientContext* context, const ::ServerRpc::auth::userTokenReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::userTokenResp>* PrepareAsyncuserTokenRaw(::grpc::ClientContext* context, const ::ServerRpc::auth::userTokenReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::forceLogoutResp>* AsyncforceLogoutRaw(::grpc::ClientContext* context, const ::ServerRpc::auth::forceLogoutReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::forceLogoutResp>* PrepareAsyncforceLogoutRaw(::grpc::ClientContext* context, const ::ServerRpc::auth::forceLogoutReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::parseTokenResp>* AsyncparseTokenRaw(::grpc::ClientContext* context, const ::ServerRpc::auth::parseTokenReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServerRpc::auth::parseTokenResp>* PrepareAsyncparseTokenRaw(::grpc::ClientContext* context, const ::ServerRpc::auth::parseTokenReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status userToken(::grpc::ClientContext* context, const ::ServerRpc::auth::userTokenReq& request, ::ServerRpc::auth::userTokenResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::userTokenResp>> AsyncuserToken(::grpc::ClientContext* context, const ::ServerRpc::auth::userTokenReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::userTokenResp>>(AsyncuserTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::userTokenResp>> PrepareAsyncuserToken(::grpc::ClientContext* context, const ::ServerRpc::auth::userTokenReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::userTokenResp>>(PrepareAsyncuserTokenRaw(context, request, cq));
    }
    ::grpc::Status forceLogout(::grpc::ClientContext* context, const ::ServerRpc::auth::forceLogoutReq& request, ::ServerRpc::auth::forceLogoutResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::forceLogoutResp>> AsyncforceLogout(::grpc::ClientContext* context, const ::ServerRpc::auth::forceLogoutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::forceLogoutResp>>(AsyncforceLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::forceLogoutResp>> PrepareAsyncforceLogout(::grpc::ClientContext* context, const ::ServerRpc::auth::forceLogoutReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::forceLogoutResp>>(PrepareAsyncforceLogoutRaw(context, request, cq));
    }
    ::grpc::Status parseToken(::grpc::ClientContext* context, const ::ServerRpc::auth::parseTokenReq& request, ::ServerRpc::auth::parseTokenResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::parseTokenResp>> AsyncparseToken(::grpc::ClientContext* context, const ::ServerRpc::auth::parseTokenReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::parseTokenResp>>(AsyncparseTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::parseTokenResp>> PrepareAsyncparseToken(::grpc::ClientContext* context, const ::ServerRpc::auth::parseTokenReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::parseTokenResp>>(PrepareAsyncparseTokenRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void userToken(::grpc::ClientContext* context, const ::ServerRpc::auth::userTokenReq* request, ::ServerRpc::auth::userTokenResp* response, std::function<void(::grpc::Status)>) override;
      void userToken(::grpc::ClientContext* context, const ::ServerRpc::auth::userTokenReq* request, ::ServerRpc::auth::userTokenResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void forceLogout(::grpc::ClientContext* context, const ::ServerRpc::auth::forceLogoutReq* request, ::ServerRpc::auth::forceLogoutResp* response, std::function<void(::grpc::Status)>) override;
      void forceLogout(::grpc::ClientContext* context, const ::ServerRpc::auth::forceLogoutReq* request, ::ServerRpc::auth::forceLogoutResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void parseToken(::grpc::ClientContext* context, const ::ServerRpc::auth::parseTokenReq* request, ::ServerRpc::auth::parseTokenResp* response, std::function<void(::grpc::Status)>) override;
      void parseToken(::grpc::ClientContext* context, const ::ServerRpc::auth::parseTokenReq* request, ::ServerRpc::auth::parseTokenResp* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::userTokenResp>* AsyncuserTokenRaw(::grpc::ClientContext* context, const ::ServerRpc::auth::userTokenReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::userTokenResp>* PrepareAsyncuserTokenRaw(::grpc::ClientContext* context, const ::ServerRpc::auth::userTokenReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::forceLogoutResp>* AsyncforceLogoutRaw(::grpc::ClientContext* context, const ::ServerRpc::auth::forceLogoutReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::forceLogoutResp>* PrepareAsyncforceLogoutRaw(::grpc::ClientContext* context, const ::ServerRpc::auth::forceLogoutReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::parseTokenResp>* AsyncparseTokenRaw(::grpc::ClientContext* context, const ::ServerRpc::auth::parseTokenReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServerRpc::auth::parseTokenResp>* PrepareAsyncparseTokenRaw(::grpc::ClientContext* context, const ::ServerRpc::auth::parseTokenReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_userToken_;
    const ::grpc::internal::RpcMethod rpcmethod_forceLogout_;
    const ::grpc::internal::RpcMethod rpcmethod_parseToken_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 生成token
    virtual ::grpc::Status userToken(::grpc::ServerContext* context, const ::ServerRpc::auth::userTokenReq* request, ::ServerRpc::auth::userTokenResp* response);
    // 强制退出登录
    virtual ::grpc::Status forceLogout(::grpc::ServerContext* context, const ::ServerRpc::auth::forceLogoutReq* request, ::ServerRpc::auth::forceLogoutResp* response);
    // 解析token
    virtual ::grpc::Status parseToken(::grpc::ServerContext* context, const ::ServerRpc::auth::parseTokenReq* request, ::ServerRpc::auth::parseTokenResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_userToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_userToken() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_userToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userToken(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::userTokenReq* /*request*/, ::ServerRpc::auth::userTokenResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserToken(::grpc::ServerContext* context, ::ServerRpc::auth::userTokenReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::auth::userTokenResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_forceLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_forceLogout() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_forceLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status forceLogout(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::forceLogoutReq* /*request*/, ::ServerRpc::auth::forceLogoutResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestforceLogout(::grpc::ServerContext* context, ::ServerRpc::auth::forceLogoutReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::auth::forceLogoutResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_parseToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_parseToken() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_parseToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status parseToken(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::parseTokenReq* /*request*/, ::ServerRpc::auth::parseTokenResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestparseToken(::grpc::ServerContext* context, ::ServerRpc::auth::parseTokenReq* request, ::grpc::ServerAsyncResponseWriter< ::ServerRpc::auth::parseTokenResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_userToken<WithAsyncMethod_forceLogout<WithAsyncMethod_parseToken<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_userToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_userToken() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::auth::userTokenReq, ::ServerRpc::auth::userTokenResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::auth::userTokenReq* request, ::ServerRpc::auth::userTokenResp* response) { return this->userToken(context, request, response); }));}
    void SetMessageAllocatorFor_userToken(
        ::grpc::MessageAllocator< ::ServerRpc::auth::userTokenReq, ::ServerRpc::auth::userTokenResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::auth::userTokenReq, ::ServerRpc::auth::userTokenResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_userToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userToken(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::userTokenReq* /*request*/, ::ServerRpc::auth::userTokenResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* userToken(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::auth::userTokenReq* /*request*/, ::ServerRpc::auth::userTokenResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_forceLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_forceLogout() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::auth::forceLogoutReq, ::ServerRpc::auth::forceLogoutResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::auth::forceLogoutReq* request, ::ServerRpc::auth::forceLogoutResp* response) { return this->forceLogout(context, request, response); }));}
    void SetMessageAllocatorFor_forceLogout(
        ::grpc::MessageAllocator< ::ServerRpc::auth::forceLogoutReq, ::ServerRpc::auth::forceLogoutResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::auth::forceLogoutReq, ::ServerRpc::auth::forceLogoutResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_forceLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status forceLogout(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::forceLogoutReq* /*request*/, ::ServerRpc::auth::forceLogoutResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* forceLogout(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::auth::forceLogoutReq* /*request*/, ::ServerRpc::auth::forceLogoutResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_parseToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_parseToken() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerRpc::auth::parseTokenReq, ::ServerRpc::auth::parseTokenResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerRpc::auth::parseTokenReq* request, ::ServerRpc::auth::parseTokenResp* response) { return this->parseToken(context, request, response); }));}
    void SetMessageAllocatorFor_parseToken(
        ::grpc::MessageAllocator< ::ServerRpc::auth::parseTokenReq, ::ServerRpc::auth::parseTokenResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerRpc::auth::parseTokenReq, ::ServerRpc::auth::parseTokenResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_parseToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status parseToken(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::parseTokenReq* /*request*/, ::ServerRpc::auth::parseTokenResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* parseToken(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerRpc::auth::parseTokenReq* /*request*/, ::ServerRpc::auth::parseTokenResp* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_userToken<WithCallbackMethod_forceLogout<WithCallbackMethod_parseToken<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_userToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_userToken() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_userToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userToken(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::userTokenReq* /*request*/, ::ServerRpc::auth::userTokenResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_forceLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_forceLogout() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_forceLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status forceLogout(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::forceLogoutReq* /*request*/, ::ServerRpc::auth::forceLogoutResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_parseToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_parseToken() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_parseToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status parseToken(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::parseTokenReq* /*request*/, ::ServerRpc::auth::parseTokenResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_userToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_userToken() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_userToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userToken(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::userTokenReq* /*request*/, ::ServerRpc::auth::userTokenResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_forceLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_forceLogout() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_forceLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status forceLogout(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::forceLogoutReq* /*request*/, ::ServerRpc::auth::forceLogoutResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestforceLogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_parseToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_parseToken() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_parseToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status parseToken(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::parseTokenReq* /*request*/, ::ServerRpc::auth::parseTokenResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestparseToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_userToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_userToken() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->userToken(context, request, response); }));
    }
    ~WithRawCallbackMethod_userToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userToken(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::userTokenReq* /*request*/, ::ServerRpc::auth::userTokenResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* userToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_forceLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_forceLogout() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->forceLogout(context, request, response); }));
    }
    ~WithRawCallbackMethod_forceLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status forceLogout(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::forceLogoutReq* /*request*/, ::ServerRpc::auth::forceLogoutResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* forceLogout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_parseToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_parseToken() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->parseToken(context, request, response); }));
    }
    ~WithRawCallbackMethod_parseToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status parseToken(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::parseTokenReq* /*request*/, ::ServerRpc::auth::parseTokenResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* parseToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_userToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_userToken() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::auth::userTokenReq, ::ServerRpc::auth::userTokenResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::auth::userTokenReq, ::ServerRpc::auth::userTokenResp>* streamer) {
                       return this->StreameduserToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_userToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status userToken(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::userTokenReq* /*request*/, ::ServerRpc::auth::userTokenResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameduserToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::auth::userTokenReq,::ServerRpc::auth::userTokenResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_forceLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_forceLogout() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::auth::forceLogoutReq, ::ServerRpc::auth::forceLogoutResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::auth::forceLogoutReq, ::ServerRpc::auth::forceLogoutResp>* streamer) {
                       return this->StreamedforceLogout(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_forceLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status forceLogout(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::forceLogoutReq* /*request*/, ::ServerRpc::auth::forceLogoutResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedforceLogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::auth::forceLogoutReq,::ServerRpc::auth::forceLogoutResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_parseToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_parseToken() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerRpc::auth::parseTokenReq, ::ServerRpc::auth::parseTokenResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerRpc::auth::parseTokenReq, ::ServerRpc::auth::parseTokenResp>* streamer) {
                       return this->StreamedparseToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_parseToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status parseToken(::grpc::ServerContext* /*context*/, const ::ServerRpc::auth::parseTokenReq* /*request*/, ::ServerRpc::auth::parseTokenResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedparseToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerRpc::auth::parseTokenReq,::ServerRpc::auth::parseTokenResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_userToken<WithStreamedUnaryMethod_forceLogout<WithStreamedUnaryMethod_parseToken<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_userToken<WithStreamedUnaryMethod_forceLogout<WithStreamedUnaryMethod_parseToken<Service > > > StreamedService;
};

}  // namespace auth
}  // namespace ServerRpc


#endif  // GRPC_auth_2eproto__INCLUDED
