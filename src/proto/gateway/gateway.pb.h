// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gateway_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_gateway_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "msg.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_gateway_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gateway_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_gateway_2eproto;
namespace ServerRpc {
namespace gateway {
class kickUserReq;
struct kickUserReqDefaultTypeInternal;
extern kickUserReqDefaultTypeInternal _kickUserReq_default_instance_;
class kickUserResp;
struct kickUserRespDefaultTypeInternal;
extern kickUserRespDefaultTypeInternal _kickUserResp_default_instance_;
class onlineBatchPushOneMsgReq;
struct onlineBatchPushOneMsgReqDefaultTypeInternal;
extern onlineBatchPushOneMsgReqDefaultTypeInternal _onlineBatchPushOneMsgReq_default_instance_;
class onlineBatchPushOneMsgResp;
struct onlineBatchPushOneMsgRespDefaultTypeInternal;
extern onlineBatchPushOneMsgRespDefaultTypeInternal _onlineBatchPushOneMsgResp_default_instance_;
class pushMessage;
struct pushMessageDefaultTypeInternal;
extern pushMessageDefaultTypeInternal _pushMessage_default_instance_;
class pushMessage_MsgsEntry_DoNotUse;
struct pushMessage_MsgsEntry_DoNotUseDefaultTypeInternal;
extern pushMessage_MsgsEntry_DoNotUseDefaultTypeInternal _pushMessage_MsgsEntry_DoNotUse_default_instance_;
}  // namespace gateway
}  // namespace ServerRpc
PROTOBUF_NAMESPACE_OPEN
template <>
::ServerRpc::gateway::kickUserReq* Arena::CreateMaybeMessage<::ServerRpc::gateway::kickUserReq>(Arena*);
template <>
::ServerRpc::gateway::kickUserResp* Arena::CreateMaybeMessage<::ServerRpc::gateway::kickUserResp>(Arena*);
template <>
::ServerRpc::gateway::onlineBatchPushOneMsgReq* Arena::CreateMaybeMessage<::ServerRpc::gateway::onlineBatchPushOneMsgReq>(Arena*);
template <>
::ServerRpc::gateway::onlineBatchPushOneMsgResp* Arena::CreateMaybeMessage<::ServerRpc::gateway::onlineBatchPushOneMsgResp>(Arena*);
template <>
::ServerRpc::gateway::pushMessage* Arena::CreateMaybeMessage<::ServerRpc::gateway::pushMessage>(Arena*);
template <>
::ServerRpc::gateway::pushMessage_MsgsEntry_DoNotUse* Arena::CreateMaybeMessage<::ServerRpc::gateway::pushMessage_MsgsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ServerRpc {
namespace gateway {

// ===================================================================


// -------------------------------------------------------------------

class pushMessage_MsgsEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<pushMessage_MsgsEntry_DoNotUse, 
    std::string, ::ServerRpc::msg::pullMsgs,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<pushMessage_MsgsEntry_DoNotUse, 
    std::string, ::ServerRpc::msg::pullMsgs,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  pushMessage_MsgsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR pushMessage_MsgsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit pushMessage_MsgsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const pushMessage_MsgsEntry_DoNotUse& other);
  static const pushMessage_MsgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const pushMessage_MsgsEntry_DoNotUse*>(&_pushMessage_MsgsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ServerRpc.gateway.pushMessage.MsgsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class pushMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerRpc.gateway.pushMessage) */ {
 public:
  inline pushMessage() : pushMessage(nullptr) {}
  ~pushMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR pushMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pushMessage(const pushMessage& from);
  pushMessage(pushMessage&& from) noexcept
    : pushMessage() {
    *this = ::std::move(from);
  }

  inline pushMessage& operator=(const pushMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline pushMessage& operator=(pushMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pushMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const pushMessage* internal_default_instance() {
    return reinterpret_cast<const pushMessage*>(
               &_pushMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(pushMessage& a, pushMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(pushMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pushMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pushMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pushMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pushMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const pushMessage& from) {
    pushMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pushMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ServerRpc.gateway.pushMessage";
  }
  protected:
  explicit pushMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 1,
  };
  // map<string, .ServerRpc.msg.pullMsgs> msgs = 1;
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;

  public:
  void clear_msgs() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ServerRpc::msg::pullMsgs >&
      _internal_msgs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ServerRpc::msg::pullMsgs >*
      _internal_mutable_msgs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ServerRpc::msg::pullMsgs >&
      msgs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ServerRpc::msg::pullMsgs >*
      mutable_msgs();
  // @@protoc_insertion_point(class_scope:ServerRpc.gateway.pushMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        pushMessage_MsgsEntry_DoNotUse,
        std::string, ::ServerRpc::msg::pullMsgs,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> msgs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};// -------------------------------------------------------------------

class onlineBatchPushOneMsgReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerRpc.gateway.onlineBatchPushOneMsgReq) */ {
 public:
  inline onlineBatchPushOneMsgReq() : onlineBatchPushOneMsgReq(nullptr) {}
  ~onlineBatchPushOneMsgReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR onlineBatchPushOneMsgReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  onlineBatchPushOneMsgReq(const onlineBatchPushOneMsgReq& from);
  onlineBatchPushOneMsgReq(onlineBatchPushOneMsgReq&& from) noexcept
    : onlineBatchPushOneMsgReq() {
    *this = ::std::move(from);
  }

  inline onlineBatchPushOneMsgReq& operator=(const onlineBatchPushOneMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline onlineBatchPushOneMsgReq& operator=(onlineBatchPushOneMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const onlineBatchPushOneMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const onlineBatchPushOneMsgReq* internal_default_instance() {
    return reinterpret_cast<const onlineBatchPushOneMsgReq*>(
               &_onlineBatchPushOneMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(onlineBatchPushOneMsgReq& a, onlineBatchPushOneMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(onlineBatchPushOneMsgReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(onlineBatchPushOneMsgReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  onlineBatchPushOneMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<onlineBatchPushOneMsgReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const onlineBatchPushOneMsgReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const onlineBatchPushOneMsgReq& from) {
    onlineBatchPushOneMsgReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(onlineBatchPushOneMsgReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ServerRpc.gateway.onlineBatchPushOneMsgReq";
  }
  protected:
  explicit onlineBatchPushOneMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPushToUserIDsFieldNumber = 2,
    kMsgDataFieldNumber = 1,
  };
  // repeated string pushToUserIDs = 2;
  int pushtouserids_size() const;
  private:
  int _internal_pushtouserids_size() const;

  public:
  void clear_pushtouserids() ;
  const std::string& pushtouserids(int index) const;
  std::string* mutable_pushtouserids(int index);
  void set_pushtouserids(int index, const std::string& value);
  void set_pushtouserids(int index, std::string&& value);
  void set_pushtouserids(int index, const char* value);
  void set_pushtouserids(int index, const char* value, std::size_t size);
  void set_pushtouserids(int index, absl::string_view value);
  std::string* add_pushtouserids();
  void add_pushtouserids(const std::string& value);
  void add_pushtouserids(std::string&& value);
  void add_pushtouserids(const char* value);
  void add_pushtouserids(const char* value, std::size_t size);
  void add_pushtouserids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pushtouserids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pushtouserids();

  private:
  const std::string& _internal_pushtouserids(int index) const;
  std::string* _internal_add_pushtouserids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_pushtouserids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_pushtouserids();

  public:
  // .ServerRpc.msg.msg msg_data = 1;
  bool has_msg_data() const;
  void clear_msg_data() ;
  const ::ServerRpc::msg::msg& msg_data() const;
  PROTOBUF_NODISCARD ::ServerRpc::msg::msg* release_msg_data();
  ::ServerRpc::msg::msg* mutable_msg_data();
  void set_allocated_msg_data(::ServerRpc::msg::msg* msg_data);
  private:
  const ::ServerRpc::msg::msg& _internal_msg_data() const;
  ::ServerRpc::msg::msg* _internal_mutable_msg_data();
  public:
  void unsafe_arena_set_allocated_msg_data(
      ::ServerRpc::msg::msg* msg_data);
  ::ServerRpc::msg::msg* unsafe_arena_release_msg_data();
  // @@protoc_insertion_point(class_scope:ServerRpc.gateway.onlineBatchPushOneMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pushtouserids_;
    ::ServerRpc::msg::msg* msg_data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};// -------------------------------------------------------------------

class onlineBatchPushOneMsgResp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ServerRpc.gateway.onlineBatchPushOneMsgResp) */ {
 public:
  inline onlineBatchPushOneMsgResp() : onlineBatchPushOneMsgResp(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR onlineBatchPushOneMsgResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  onlineBatchPushOneMsgResp(const onlineBatchPushOneMsgResp& from);
  onlineBatchPushOneMsgResp(onlineBatchPushOneMsgResp&& from) noexcept
    : onlineBatchPushOneMsgResp() {
    *this = ::std::move(from);
  }

  inline onlineBatchPushOneMsgResp& operator=(const onlineBatchPushOneMsgResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline onlineBatchPushOneMsgResp& operator=(onlineBatchPushOneMsgResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const onlineBatchPushOneMsgResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const onlineBatchPushOneMsgResp* internal_default_instance() {
    return reinterpret_cast<const onlineBatchPushOneMsgResp*>(
               &_onlineBatchPushOneMsgResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(onlineBatchPushOneMsgResp& a, onlineBatchPushOneMsgResp& b) {
    a.Swap(&b);
  }
  inline void Swap(onlineBatchPushOneMsgResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(onlineBatchPushOneMsgResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  onlineBatchPushOneMsgResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<onlineBatchPushOneMsgResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const onlineBatchPushOneMsgResp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const onlineBatchPushOneMsgResp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ServerRpc.gateway.onlineBatchPushOneMsgResp";
  }
  protected:
  explicit onlineBatchPushOneMsgResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ServerRpc.gateway.onlineBatchPushOneMsgResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gateway_2eproto;
};// -------------------------------------------------------------------

class kickUserReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerRpc.gateway.kickUserReq) */ {
 public:
  inline kickUserReq() : kickUserReq(nullptr) {}
  ~kickUserReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR kickUserReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  kickUserReq(const kickUserReq& from);
  kickUserReq(kickUserReq&& from) noexcept
    : kickUserReq() {
    *this = ::std::move(from);
  }

  inline kickUserReq& operator=(const kickUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline kickUserReq& operator=(kickUserReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const kickUserReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const kickUserReq* internal_default_instance() {
    return reinterpret_cast<const kickUserReq*>(
               &_kickUserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(kickUserReq& a, kickUserReq& b) {
    a.Swap(&b);
  }
  inline void Swap(kickUserReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(kickUserReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  kickUserReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<kickUserReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const kickUserReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const kickUserReq& from) {
    kickUserReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(kickUserReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ServerRpc.gateway.kickUserReq";
  }
  protected:
  explicit kickUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
    kPlatformFieldNumber = 2,
  };
  // string userID = 1;
  void clear_userid() ;
  const std::string& userid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* ptr);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // int32 platform = 2;
  void clear_platform() ;
  ::int32_t platform() const;
  void set_platform(::int32_t value);

  private:
  ::int32_t _internal_platform() const;
  void _internal_set_platform(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ServerRpc.gateway.kickUserReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::int32_t platform_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gateway_2eproto;
};// -------------------------------------------------------------------

class kickUserResp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ServerRpc.gateway.kickUserResp) */ {
 public:
  inline kickUserResp() : kickUserResp(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR kickUserResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  kickUserResp(const kickUserResp& from);
  kickUserResp(kickUserResp&& from) noexcept
    : kickUserResp() {
    *this = ::std::move(from);
  }

  inline kickUserResp& operator=(const kickUserResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline kickUserResp& operator=(kickUserResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const kickUserResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const kickUserResp* internal_default_instance() {
    return reinterpret_cast<const kickUserResp*>(
               &_kickUserResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(kickUserResp& a, kickUserResp& b) {
    a.Swap(&b);
  }
  inline void Swap(kickUserResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(kickUserResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  kickUserResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<kickUserResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const kickUserResp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const kickUserResp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ServerRpc.gateway.kickUserResp";
  }
  protected:
  explicit kickUserResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ServerRpc.gateway.kickUserResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gateway_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// pushMessage

// map<string, .ServerRpc.msg.pullMsgs> msgs = 1;
inline int pushMessage::_internal_msgs_size() const {
  return _impl_.msgs_.size();
}
inline int pushMessage::msgs_size() const {
  return _internal_msgs_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ServerRpc::msg::pullMsgs >&
pushMessage::_internal_msgs() const {
  return _impl_.msgs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ServerRpc::msg::pullMsgs >&
pushMessage::msgs() const {
  // @@protoc_insertion_point(field_map:ServerRpc.gateway.pushMessage.msgs)
  return _internal_msgs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ServerRpc::msg::pullMsgs >*
pushMessage::_internal_mutable_msgs() {
  return _impl_.msgs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ServerRpc::msg::pullMsgs >*
pushMessage::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_map:ServerRpc.gateway.pushMessage.msgs)
  return _internal_mutable_msgs();
}

// -------------------------------------------------------------------

// onlineBatchPushOneMsgReq

// .ServerRpc.msg.msg msg_data = 1;
inline bool onlineBatchPushOneMsgReq::has_msg_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msg_data_ != nullptr);
  return value;
}
inline const ::ServerRpc::msg::msg& onlineBatchPushOneMsgReq::_internal_msg_data() const {
  const ::ServerRpc::msg::msg* p = _impl_.msg_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::ServerRpc::msg::msg&>(
      ::ServerRpc::msg::_msg_default_instance_);
}
inline const ::ServerRpc::msg::msg& onlineBatchPushOneMsgReq::msg_data() const {
  // @@protoc_insertion_point(field_get:ServerRpc.gateway.onlineBatchPushOneMsgReq.msg_data)
  return _internal_msg_data();
}
inline void onlineBatchPushOneMsgReq::unsafe_arena_set_allocated_msg_data(
    ::ServerRpc::msg::msg* msg_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msg_data_);
  }
  _impl_.msg_data_ = msg_data;
  if (msg_data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerRpc.gateway.onlineBatchPushOneMsgReq.msg_data)
}
inline ::ServerRpc::msg::msg* onlineBatchPushOneMsgReq::release_msg_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ServerRpc::msg::msg* temp = _impl_.msg_data_;
  _impl_.msg_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ServerRpc::msg::msg* onlineBatchPushOneMsgReq::unsafe_arena_release_msg_data() {
  // @@protoc_insertion_point(field_release:ServerRpc.gateway.onlineBatchPushOneMsgReq.msg_data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ServerRpc::msg::msg* temp = _impl_.msg_data_;
  _impl_.msg_data_ = nullptr;
  return temp;
}
inline ::ServerRpc::msg::msg* onlineBatchPushOneMsgReq::_internal_mutable_msg_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.msg_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::ServerRpc::msg::msg>(GetArenaForAllocation());
    _impl_.msg_data_ = p;
  }
  return _impl_.msg_data_;
}
inline ::ServerRpc::msg::msg* onlineBatchPushOneMsgReq::mutable_msg_data() {
  ::ServerRpc::msg::msg* _msg = _internal_mutable_msg_data();
  // @@protoc_insertion_point(field_mutable:ServerRpc.gateway.onlineBatchPushOneMsgReq.msg_data)
  return _msg;
}
inline void onlineBatchPushOneMsgReq::set_allocated_msg_data(::ServerRpc::msg::msg* msg_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msg_data_);
  }
  if (msg_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_data));
    if (message_arena != submessage_arena) {
      msg_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msg_data_ = msg_data;
  // @@protoc_insertion_point(field_set_allocated:ServerRpc.gateway.onlineBatchPushOneMsgReq.msg_data)
}

// repeated string pushToUserIDs = 2;
inline int onlineBatchPushOneMsgReq::_internal_pushtouserids_size() const {
  return _impl_.pushtouserids_.size();
}
inline int onlineBatchPushOneMsgReq::pushtouserids_size() const {
  return _internal_pushtouserids_size();
}
inline void onlineBatchPushOneMsgReq::clear_pushtouserids() {
  _internal_mutable_pushtouserids()->Clear();
}
inline std::string* onlineBatchPushOneMsgReq::add_pushtouserids() {
  std::string* _s = _internal_add_pushtouserids();
  // @@protoc_insertion_point(field_add_mutable:ServerRpc.gateway.onlineBatchPushOneMsgReq.pushToUserIDs)
  return _s;
}
inline const std::string& onlineBatchPushOneMsgReq::pushtouserids(int index) const {
  // @@protoc_insertion_point(field_get:ServerRpc.gateway.onlineBatchPushOneMsgReq.pushToUserIDs)
  return _internal_pushtouserids(index);
}
inline std::string* onlineBatchPushOneMsgReq::mutable_pushtouserids(int index) {
  // @@protoc_insertion_point(field_mutable:ServerRpc.gateway.onlineBatchPushOneMsgReq.pushToUserIDs)
  return _internal_mutable_pushtouserids()->Mutable(index);
}
inline void onlineBatchPushOneMsgReq::set_pushtouserids(int index, const std::string& value) {
  _internal_mutable_pushtouserids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ServerRpc.gateway.onlineBatchPushOneMsgReq.pushToUserIDs)
}
inline void onlineBatchPushOneMsgReq::set_pushtouserids(int index, std::string&& value) {
  _internal_mutable_pushtouserids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ServerRpc.gateway.onlineBatchPushOneMsgReq.pushToUserIDs)
}
inline void onlineBatchPushOneMsgReq::set_pushtouserids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_pushtouserids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ServerRpc.gateway.onlineBatchPushOneMsgReq.pushToUserIDs)
}
inline void onlineBatchPushOneMsgReq::set_pushtouserids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_pushtouserids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServerRpc.gateway.onlineBatchPushOneMsgReq.pushToUserIDs)
}
inline void onlineBatchPushOneMsgReq::set_pushtouserids(int index, absl::string_view value) {
  _internal_mutable_pushtouserids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ServerRpc.gateway.onlineBatchPushOneMsgReq.pushToUserIDs)
}
inline void onlineBatchPushOneMsgReq::add_pushtouserids(const std::string& value) {
  _internal_mutable_pushtouserids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ServerRpc.gateway.onlineBatchPushOneMsgReq.pushToUserIDs)
}
inline void onlineBatchPushOneMsgReq::add_pushtouserids(std::string&& value) {
  _internal_mutable_pushtouserids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ServerRpc.gateway.onlineBatchPushOneMsgReq.pushToUserIDs)
}
inline void onlineBatchPushOneMsgReq::add_pushtouserids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_pushtouserids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ServerRpc.gateway.onlineBatchPushOneMsgReq.pushToUserIDs)
}
inline void onlineBatchPushOneMsgReq::add_pushtouserids(const char* value, std::size_t size) {
  _internal_mutable_pushtouserids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ServerRpc.gateway.onlineBatchPushOneMsgReq.pushToUserIDs)
}
inline void onlineBatchPushOneMsgReq::add_pushtouserids(absl::string_view value) {
  _internal_mutable_pushtouserids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ServerRpc.gateway.onlineBatchPushOneMsgReq.pushToUserIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
onlineBatchPushOneMsgReq::pushtouserids() const {
  // @@protoc_insertion_point(field_list:ServerRpc.gateway.onlineBatchPushOneMsgReq.pushToUserIDs)
  return _internal_pushtouserids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* onlineBatchPushOneMsgReq::mutable_pushtouserids() {
  // @@protoc_insertion_point(field_mutable_list:ServerRpc.gateway.onlineBatchPushOneMsgReq.pushToUserIDs)
  return _internal_mutable_pushtouserids();
}
inline const std::string& onlineBatchPushOneMsgReq::_internal_pushtouserids(int index) const {
  return _internal_pushtouserids().Get(index);
}
inline std::string* onlineBatchPushOneMsgReq::_internal_add_pushtouserids() {
  return _internal_mutable_pushtouserids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
onlineBatchPushOneMsgReq::_internal_pushtouserids() const {
  return _impl_.pushtouserids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
onlineBatchPushOneMsgReq::_internal_mutable_pushtouserids() {
  return &_impl_.pushtouserids_;
}

// -------------------------------------------------------------------

// onlineBatchPushOneMsgResp

// -------------------------------------------------------------------

// kickUserReq

// string userID = 1;
inline void kickUserReq::clear_userid() {
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& kickUserReq::userid() const {
  // @@protoc_insertion_point(field_get:ServerRpc.gateway.kickUserReq.userID)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void kickUserReq::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServerRpc.gateway.kickUserReq.userID)
}
inline std::string* kickUserReq::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:ServerRpc.gateway.kickUserReq.userID)
  return _s;
}
inline const std::string& kickUserReq::_internal_userid() const {
  return _impl_.userid_.Get();
}
inline void kickUserReq::_internal_set_userid(const std::string& value) {
  ;


  _impl_.userid_.Set(value, GetArenaForAllocation());
}
inline std::string* kickUserReq::_internal_mutable_userid() {
  ;
  return _impl_.userid_.Mutable( GetArenaForAllocation());
}
inline std::string* kickUserReq::release_userid() {
  // @@protoc_insertion_point(field_release:ServerRpc.gateway.kickUserReq.userID)
  return _impl_.userid_.Release();
}
inline void kickUserReq::set_allocated_userid(std::string* value) {
  _impl_.userid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServerRpc.gateway.kickUserReq.userID)
}

// int32 platform = 2;
inline void kickUserReq::clear_platform() {
  _impl_.platform_ = 0;
}
inline ::int32_t kickUserReq::platform() const {
  // @@protoc_insertion_point(field_get:ServerRpc.gateway.kickUserReq.platform)
  return _internal_platform();
}
inline void kickUserReq::set_platform(::int32_t value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:ServerRpc.gateway.kickUserReq.platform)
}
inline ::int32_t kickUserReq::_internal_platform() const {
  return _impl_.platform_;
}
inline void kickUserReq::_internal_set_platform(::int32_t value) {
  ;
  _impl_.platform_ = value;
}

// -------------------------------------------------------------------

// kickUserResp

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace gateway
}  // namespace ServerRpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_gateway_2eproto_2epb_2eh
