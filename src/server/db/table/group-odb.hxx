// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef GROUP_ODB_HXX
#define GROUP_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20475UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "group.h"

#include "user-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // ChatGroup
  //
  template <>
  struct class_traits< ::ChatGroup >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ChatGroup >
  {
    public:
    typedef ::ChatGroup object_type;
    typedef ::ChatGroup* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // GroupMember
  //
  template <>
  struct class_traits< ::GroupMember >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::GroupMember >
  {
    public:
    typedef ::GroupMember object_type;
    typedef ::GroupMember* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // ChatGroup
  //
  template <typename A>
  struct query_columns< ::ChatGroup, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;

    // groupName
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    groupName_type_;

    static const groupName_type_ groupName;
  };

  template <typename A>
  const typename query_columns< ::ChatGroup, id_mysql, A >::id_type_
  query_columns< ::ChatGroup, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::ChatGroup, id_mysql, A >::groupName_type_
  query_columns< ::ChatGroup, id_mysql, A >::
  groupName (A::table_name, "`groupName`", 0);

  template <typename A>
  struct pointer_query_columns< ::ChatGroup, id_mysql, A >:
    query_columns< ::ChatGroup, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ChatGroup, id_mysql >:
    public access::object_traits< ::ChatGroup >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      // groupName_
      //
      details::buffer groupName_value;
      unsigned long groupName_size;
      my_bool groupName_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::ChatGroup, id_common >:
    public access::object_traits_impl< ::ChatGroup, id_mysql >
  {
  };

  // GroupMember
  //
  template <typename A>
  struct pointer_query_columns< ::GroupMember, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;

    // roler
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::GroupMember::GroupMemberRoler,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    roler_type_;

    static const roler_type_ roler;

    // user
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    user_type_;

    static const user_type_ user;

    // group
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    group_type_;

    static const group_type_ group;
  };

  template <typename A>
  const typename pointer_query_columns< ::GroupMember, id_mysql, A >::id_type_
  pointer_query_columns< ::GroupMember, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::GroupMember, id_mysql, A >::roler_type_
  pointer_query_columns< ::GroupMember, id_mysql, A >::
  roler (A::table_name, "`roler`", 0);

  template <typename A>
  const typename pointer_query_columns< ::GroupMember, id_mysql, A >::user_type_
  pointer_query_columns< ::GroupMember, id_mysql, A >::
  user (A::table_name, "`user`", 0);

  template <typename A>
  const typename pointer_query_columns< ::GroupMember, id_mysql, A >::group_type_
  pointer_query_columns< ::GroupMember, id_mysql, A >::
  group (A::table_name, "`group`", 0);

  template <>
  class access::object_traits_impl< ::GroupMember, id_mysql >:
    public access::object_traits< ::GroupMember >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      // roler_
      //
      mysql::value_traits< ::GroupMember::GroupMemberRoler, mysql::id_enum >::image_type roler_value;
      unsigned long roler_size;
      my_bool roler_null;

      // user_
      //
      unsigned long long user_value;
      my_bool user_null;

      // group_
      //
      unsigned long long group_value;
      my_bool group_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct user_tag;
    struct group_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::GroupMember, id_common >:
    public access::object_traits_impl< ::GroupMember, id_mysql >
  {
  };

  // ChatGroup
  //
  // GroupMember
  //
  template <>
  struct alias_traits<
    ::User,
    id_mysql,
    access::object_traits_impl< ::GroupMember, id_mysql >::user_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::ChatGroup,
    id_mysql,
    access::object_traits_impl< ::GroupMember, id_mysql >::group_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::GroupMember, id_mysql >
  {
    // user
    //
    typedef
    odb::alias_traits<
      ::User,
      id_mysql,
      access::object_traits_impl< ::GroupMember, id_mysql >::user_tag>
    user_alias_;

    // group
    //
    typedef
    odb::alias_traits<
      ::ChatGroup,
      id_mysql,
      access::object_traits_impl< ::GroupMember, id_mysql >::group_tag>
    group_alias_;
  };

  template <typename A>
  struct query_columns< ::GroupMember, id_mysql, A >:
    query_columns_base< ::GroupMember, id_mysql >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;

    // roler
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::GroupMember::GroupMemberRoler,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    roler_type_;

    static const roler_type_ roler;

    // user
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    user_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::User,
        id_mysql,
        user_alias_ > >
    user_pointer_type_;

    struct user_type_: user_pointer_type_, user_column_type_
    {
      user_type_ (const char* t, const char* c, const char* conv)
        : user_column_type_ (t, c, conv)
      {
      }
    };

    static const user_type_ user;

    // group
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    group_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::ChatGroup,
        id_mysql,
        group_alias_ > >
    group_pointer_type_;

    struct group_type_: group_pointer_type_, group_column_type_
    {
      group_type_ (const char* t, const char* c, const char* conv)
        : group_column_type_ (t, c, conv)
      {
      }
    };

    static const group_type_ group;
  };

  template <typename A>
  const typename query_columns< ::GroupMember, id_mysql, A >::id_type_
  query_columns< ::GroupMember, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::GroupMember, id_mysql, A >::roler_type_
  query_columns< ::GroupMember, id_mysql, A >::
  roler (A::table_name, "`roler`", 0);

  template <typename A>
  const typename query_columns< ::GroupMember, id_mysql, A >::user_type_
  query_columns< ::GroupMember, id_mysql, A >::
  user (A::table_name, "`user`", 0);

  template <typename A>
  const typename query_columns< ::GroupMember, id_mysql, A >::group_type_
  query_columns< ::GroupMember, id_mysql, A >::
  group (A::table_name, "`group`", 0);
}

#include "group-odb.ixx"

#include <odb/post.hxx>

#endif // GROUP_ODB_HXX
